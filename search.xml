<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>oracle 回收站</title>
      <link href="/2018/12/03/oracle-hui-shou-zhan/"/>
      <url>/2018/12/03/oracle-hui-shou-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="回收站概念"><a href="#回收站概念" class="headerlink" title="回收站概念"></a>回收站概念</h3><blockquote><p>从ORACLE 10g开始，引入了一个叫回收站(Recycle Bin)的概念。它的全称叫Tablespace Recycle<br>Bin。回收站实际是一个逻辑容器（逻辑区域），原理有点类似于WINDOW系统的回收站。它以表空间中现有已经分配的空间为基础，而不是从表空间上物理划出一个固定区域用作回收站。这意味着回收站和表空间中的对象共用存储区域、系统没有给回收站预留空间。因此，当表被DROP后，如果可用空间充足，并且没有对回收站进行清理，那么被DROP掉的对象会一直存在回收站中，但是如果可用空间紧张的情况下，数据库会根据先进先出的顺序覆盖Recycle<br>Bin中的对象。所以回收站机制也不是百分百的保险机制。另外从原理上来说它就是一个数据字典表，放置用户Drop掉的数据库对象信息。用户进行Drop操作的对象并没有真正被数据库删除，仍然会占用空间。除非是由于用户手工进行Purge或者因为存储空间不够而被数据库清掉。数据库有了这样的功能，能够减少很多不必要的麻烦。当用户、开发人员、甚至DBA误操作删除了表，那么我们不必还原整个数据库或表空间，直接使用ORACLE<br>10g的闪回(FLASHBACK,闪回)功能来还原被删除的表。这样我们就能避免大量的人工误操作。这是一个对DBA相当有用的功能。</p></blockquote><p>回收站这个特性主要的好处就是在误删除一个表时有一个恢复机制，不必通过数据库还原来实现。避免大量的人工误操作。以及数据库还原等复杂的操作。让数据库的管理、维护更加简单、方便。</p><p>管理回收站<br>开启、关闭回收站<br>首先你可以通过命令查看数据库是否开启了回收站机制， 如下所示 VALUE= ON表示开启了回收站机制。OFF则表示回收站机制关闭。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> PARAMETER RECYCLEBIN<span class="token punctuation">;</span>SQL<span class="token operator">></span> <span class="token keyword">SHOW</span> PARAMETER RECYCLEBIN<span class="token punctuation">;</span>NAME              <span class="token keyword">TYPE</span>        <span class="token keyword">VALUE</span><span class="token comment" spellcheck="true">--------     ----------- ----------</span>recyclebin      string         <span class="token keyword">ON</span>或SQL<span class="token operator">></span> <span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span> <span class="token keyword">VALUE</span> <span class="token keyword">FROM</span> V$PARAMETER <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'recyclebin'</span><span class="token punctuation">;</span>NAME                      <span class="token keyword">VALUE</span><span class="token comment" spellcheck="true">----------------- --------------------</span>recyclebin                  <span class="token keyword">on</span>可以通过设置初始化参数recyclebin启用或禁用回收站功能。当然也可以用命令关闭回收站SQL<span class="token operator">></span> <span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">SET</span> RECYCLEBIN<span class="token operator">=</span><span class="token keyword">OFF</span><span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">SESSION</span> <span class="token keyword">SET</span> RECYCLEBIN<span class="token operator">=</span><span class="token keyword">OFF</span><span class="token punctuation">;</span><span class="token keyword">Session</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">SHOW</span> PARAMETER RECYCLEBIN<span class="token punctuation">;</span>NAME                                 <span class="token keyword">TYPE</span>        <span class="token keyword">VALUE</span><span class="token comment" spellcheck="true">------------------------------------ ----------- ------------------------------</span>recyclebin                           string      <span class="token keyword">OFF</span>可以用命令开启回收站SQL<span class="token operator">></span> <span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">SET</span> RECYCLEBIN<span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">SESSION</span> <span class="token keyword">SET</span> RECYCLEBIN <span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">Session</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">SHOW</span> PARAMETER RECYCLEBIN<span class="token punctuation">;</span>NAME                                 <span class="token keyword">TYPE</span>        <span class="token keyword">VALUE</span><span class="token comment" spellcheck="true">------------------------------------ ----------- ------------------------------</span>recyclebin                           string      <span class="token keyword">ON</span>oracle10g，在pl<span class="token operator">/</span>sql中选中删除后会出现类似：BIN$nJ5JuP9cQmqPaArFei384g<span class="token operator">=</span><span class="token operator">=</span>$<span class="token number">0</span>的表。<span class="token number">1</span><span class="token punctuation">.</span>查看回收站<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_recyclebin<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>清空回收站<span class="token keyword">purge</span> recyclebin<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>清空回收站中的某个表<span class="token comment" spellcheck="true">--如下方式删除会提示：SQL命令未正确结束。</span><span class="token keyword">purge</span> <span class="token keyword">table</span> BIN$<span class="token operator">/</span>UpBuh<span class="token operator">+</span>LQ9yZGN95BFsk5Q<span class="token operator">=</span><span class="token operator">=</span>$<span class="token number">0</span><span class="token comment" spellcheck="true">--正确写法如下：</span> <span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span>sql    <span class="token keyword">purge</span> <span class="token keyword">table</span> <span class="token string">"BIN$/UpBuh+LQ9yZGN95BFsk5Q==$0"</span><span class="token punctuation">;</span></code></pre><p>–如下方式删除会提示：SQL命令未正确结束。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> BIN$<span class="token operator">/</span>UpBuh<span class="token operator">+</span>LQ9yZGN95BFsk5Q<span class="token operator">=</span><span class="token operator">=</span>$<span class="token number">0</span>sql<span class="token comment" spellcheck="true">--而如下这样写，则会提示：无法对回收站中的对象执行DDL/DML。</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token string">"BIN$0iJ7/rWFQrSGdZexvGv3qQ==$0"</span><span class="token number">4</span><span class="token punctuation">.</span>恢复回收站FLASHBACK <span class="token keyword">TABLE</span> <span class="token string">"BIN$0iJ7/rWFQrSGdZexvGv3qQ==$0"</span> <span class="token keyword">TO</span> BEFORE <span class="token keyword">DROP</span>这是10g 的新特性在10g中，如果启用flash <span class="token keyword">drop</span>功能，在<span class="token keyword">drop</span>表时，数据库不会直接删除，而是将其放在回收站中，当空间出现短缺时，才会逐渐回收这部分空间。bin$表示表放在了回收站，你想要的话还可以找回来删除的话一个方法是直接删<span class="token keyword">delete</span> tanle bin$<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>另一种方法就是使用 <span class="token keyword">purge</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span>时， 不产生他们，修改你的<span class="token keyword">drop</span>语句写成 ：<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> TABLE_NAME <span class="token keyword">PURGE</span> <span class="token punctuation">;</span>有几种方法可以手动控制回收站<span class="token number">1</span>，。如果在删除名为 TEST 的特定表之后需要从回收站中清除它，可以执行<span class="token keyword">PURGE</span> <span class="token keyword">TABLE</span> TABLE_NAME<span class="token punctuation">;</span>或者使用其回收站中的名称：<span class="token keyword">PURGE</span> <span class="token keyword">TABLE</span> <span class="token string">"BIN$04LhcpndanfgMAAAAAANPw==$0"</span><span class="token punctuation">;</span><span class="token number">2</span>，要从回收站中永久删除索引<span class="token keyword">PURGE</span> <span class="token keyword">INDEX</span> IN_TEST1_O1<span class="token number">3</span>，清除表空间 USERS 的回收站中的所有对象<span class="token keyword">PURGE</span> <span class="token keyword">TABLESPACE</span> USERS<span class="token punctuation">;</span><span class="token number">4</span>，只清除特定的用户<span class="token keyword">PURGE</span> <span class="token keyword">TABLESPACE</span> USERS <span class="token keyword">USER</span> SCOTT<span class="token punctuation">;</span><span class="token number">5</span>，要释放整个回收站占用的空间<span class="token keyword">PURGE</span> RECYCLEBIN<span class="token punctuation">;</span></code></pre><p>重要:<br><strong>PURGE RECYCLEBIN只是清除当前用户回收站中的对象，DBA_RECYCLEBIN下的的对象并没有删除，如果你要清除当前数据库回收站的对象，必须使用下面命令（DBA权限） PURGE DBA_RECYCLEBIN</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ORALCE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle的11g自动统计信息</title>
      <link href="/2018/12/03/oracle-de-11g-zi-dong-tong-ji-xin-xi/"/>
      <url>/2018/12/03/oracle-de-11g-zi-dong-tong-ji-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>一、Oracle 11g<br>在Oracle的11g版本中提供了统计数据自动收集的功能。在部署安装11g Oracle软件过程中，其中有一个步骤便是提示是否启动这个功能(默认是启用这个功能)。<br>在这里介绍一下怎么将该功能启用与禁用：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>、查看自动收集统计信息的任务及状态：<span class="token keyword">select</span> client_name<span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">from</span> dba_autotask_client<span class="token punctuation">;</span><span class="token number">2</span>、禁止自动收集统计信息的任务禁用自动收集统计信息的任务可以使用DBMS_AUTO_TASK_ADMIN包完成：SQL<span class="token operator">></span> <span class="token keyword">exec</span> DBMS_AUTO_TASK_ADMIN<span class="token punctuation">.</span><span class="token keyword">DISABLE</span><span class="token punctuation">(</span>client_name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'auto optimizer stats collection'</span><span class="token punctuation">,</span>operation <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>window_name <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PL<span class="token operator">/</span>SQL 过程已成功完成。SQL<span class="token operator">></span> <span class="token keyword">select</span> client_name<span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">from</span> dba_autotask_client<span class="token punctuation">;</span>CLIENT_NAME                 <span class="token keyword">STATUS</span><span class="token comment" spellcheck="true">---------------------------------------- ----------------</span>auto optimizer stats collection      DISABLEDauto space advisor             ENABLEDsql tuning advisor             ENABLED此时<span class="token string">"auto optimizer stats collection"</span>任务已经被禁用。<span class="token number">3</span>、启用自动收集统计信息的任务SQL<span class="token operator">></span> <span class="token keyword">exec</span> DBMS_AUTO_TASK_ADMIN<span class="token punctuation">.</span><span class="token keyword">ENABLE</span><span class="token punctuation">(</span>client_name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'auto optimizer stats collection'</span><span class="token punctuation">,</span>operation <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>window_name <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PL<span class="token operator">/</span>SQL 过程已成功完成。SQL<span class="token operator">></span> <span class="token keyword">select</span> client_name<span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">from</span> dba_autotask_client<span class="token punctuation">;</span>CLIENT_NAME                 <span class="token keyword">STATUS</span><span class="token comment" spellcheck="true">---------------------------------------- ----------------</span>auto optimizer stats collection      ENABLEDauto space advisor             ENABLEDsql tuning advisor             ENABLED这个功能貌似带来了统计数据采集上的便捷，但是Oracle 11g自动收集统计信息的时间是<span class="token number">22</span>:<span class="token number">00</span><span class="token comment" spellcheck="true">--2:00</span>这个时间段往往是业务的高峰期，给本已紧张的系统带来更大的负担。所以，应该把自动执行的时间改到空闲的时段。<span class="token number">4</span>、获得当前自动收集统计信息的执行时间：SQL<span class="token operator">></span> <span class="token keyword">select</span> t1<span class="token punctuation">.</span>window_name<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>repeat_interval<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>duration <span class="token keyword">from</span> dba_scheduler_windows t1<span class="token punctuation">,</span>dba_scheduler_wingroup_members t2  <span class="token number">2</span>  <span class="token keyword">where</span> t1<span class="token punctuation">.</span>window_name<span class="token operator">=</span>t2<span class="token punctuation">.</span>window_name <span class="token operator">and</span> t2<span class="token punctuation">.</span>window_group_name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'MAINTENANCE_WINDOW_GROUP'</span><span class="token punctuation">,</span><span class="token string">'BSLN_MAINTAIN_STATS_SCHED'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WINDOW_NAME                    REPEAT_INTERVAL                                                                  DURATION<span class="token comment" spellcheck="true">------------------------------ -------------------------------------------------------------------------------- -------------------------------------------------------------------------------</span>MONDAY_WINDOW                  freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>MON<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>TUESDAY_WINDOW                 freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>TUE<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>WEDNESDAY_WINDOW               freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>WED<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>THURSDAY_WINDOW                freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>THU<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>FRIDAY_WINDOW                  freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>FRI<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>SATURDAY_WINDOW                freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>SAT<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                             <span class="token operator">+</span><span class="token number">000</span> <span class="token number">20</span>:<span class="token number">00</span>:<span class="token number">00</span>SUNDAY_WINDOW                  freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>SUN<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                             <span class="token operator">+</span><span class="token number">000</span> <span class="token number">20</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token number">7</span> <span class="token keyword">rows</span> selected      WINDOW_NAME：任务名      REPEAT_INTERVAL：任务重复间隔时间      DURATION：持续时间修改自动执行的时间  到空闲的时间<span class="token number">1</span><span class="token punctuation">.</span>停止任务：SQL<span class="token operator">></span> <span class="token keyword">BEGIN</span>  <span class="token number">2</span>    DBMS_SCHEDULER<span class="token punctuation">.</span><span class="token keyword">DISABLE</span><span class="token punctuation">(</span>  <span class="token number">3</span>    name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'"SYS"."FRIDAY_WINDOW"'</span><span class="token punctuation">,</span>  <span class="token number">4</span>    <span class="token keyword">force</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">5</span>  <span class="token keyword">END</span><span class="token punctuation">;</span>  <span class="token number">6</span>  <span class="token operator">/</span>PL<span class="token operator">/</span>SQL 过程已成功完成。<span class="token number">2</span><span class="token punctuation">.</span>修改任务的持续时间，单位是分钟：SQL<span class="token operator">></span> <span class="token keyword">BEGIN</span>  <span class="token number">2</span>    DBMS_SCHEDULER<span class="token punctuation">.</span>SET_ATTRIBUTE<span class="token punctuation">(</span>  <span class="token number">3</span>    name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'"SYS"."FRIDAY_WINDOW"'</span><span class="token punctuation">,</span>  <span class="token number">4</span>    attribute <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'DURATION'</span><span class="token punctuation">,</span>  <span class="token number">5</span>    <span class="token keyword">value</span> <span class="token operator">=</span><span class="token operator">></span> numtodsinterval<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token string">'minute'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">6</span>  <span class="token keyword">END</span><span class="token punctuation">;</span>    <span class="token number">7</span>  <span class="token operator">/</span>PL<span class="token operator">/</span>SQL 过程已成功完成。<span class="token number">3</span><span class="token punctuation">.</span>开始执行时间，BYHOUR<span class="token operator">=</span><span class="token number">2</span>，表示<span class="token number">2</span>点开始执行：SQL<span class="token operator">></span> <span class="token keyword">BEGIN</span>  <span class="token number">2</span>    DBMS_SCHEDULER<span class="token punctuation">.</span>SET_ATTRIBUTE<span class="token punctuation">(</span>  <span class="token number">3</span>    name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'"SYS"."FRIDAY_WINDOW"'</span><span class="token punctuation">,</span>  <span class="token number">4</span>    attribute <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'REPEAT_INTERVAL'</span><span class="token punctuation">,</span>  <span class="token number">5</span>    <span class="token keyword">value</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'FREQ=WEEKLY;BYDAY=MON;BYHOUR=2;BYMINUTE=0;BYSECOND=0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">6</span>  <span class="token keyword">END</span><span class="token punctuation">;</span>  <span class="token number">7</span>  <span class="token operator">/</span>PL<span class="token operator">/</span>SQL 过程已成功完成。<span class="token number">4</span><span class="token punctuation">.</span>开启任务：SQL<span class="token operator">></span> <span class="token keyword">BEGIN</span>  <span class="token number">2</span>    DBMS_SCHEDULER<span class="token punctuation">.</span><span class="token keyword">ENABLE</span><span class="token punctuation">(</span>  <span class="token number">3</span>    name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'"SYS"."FRIDAY_WINDOW"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">4</span>  <span class="token keyword">END</span><span class="token punctuation">;</span>  <span class="token number">5</span>  <span class="token operator">/</span>PL<span class="token operator">/</span>SQL 过程已成功完成。<span class="token number">5</span><span class="token punctuation">.</span>查看修改后的情况：SQL<span class="token operator">></span> <span class="token keyword">select</span> t1<span class="token punctuation">.</span>window_name<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>repeat_interval<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>duration <span class="token keyword">from</span> dba_scheduler_windows t1<span class="token punctuation">,</span>dba_scheduler_wingroup_members t2  <span class="token number">2</span>  <span class="token keyword">where</span> t1<span class="token punctuation">.</span>window_name<span class="token operator">=</span>t2<span class="token punctuation">.</span>window_name <span class="token operator">and</span> t2<span class="token punctuation">.</span>window_group_name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'MAINTENANCE_WINDOW_GROUP'</span><span class="token punctuation">,</span><span class="token string">'BSLN_MAINTAIN_STATS_SCHED'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WINDOW_NAME                    REPEAT_INTERVAL                                                                  DURATION<span class="token comment" spellcheck="true">------------------------------ -------------------------------------------------------------------------------- -------------------------------------------------------------------------------</span>WEDNESDAY_WINDOW               freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>WED<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>FRIDAY_WINDOW                  FREQ<span class="token operator">=</span>WEEKLY<span class="token punctuation">;</span>BYDAY<span class="token operator">=</span>MON<span class="token punctuation">;</span>BYHOUR<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>BYMINUTE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>BYSECOND<span class="token operator">=</span><span class="token number">0</span>                             <span class="token operator">+</span><span class="token number">000</span> <span class="token number">03</span>:<span class="token number">00</span>:<span class="token number">00</span>SATURDAY_WINDOW                freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>SAT<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                             <span class="token operator">+</span><span class="token number">000</span> <span class="token number">20</span>:<span class="token number">00</span>:<span class="token number">00</span>THURSDAY_WINDOW                freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>THU<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>TUESDAY_WINDOW                 freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>TUE<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span>SUNDAY_WINDOW                  freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>SUN<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                             <span class="token operator">+</span><span class="token number">000</span> <span class="token number">20</span>:<span class="token number">00</span>:<span class="token number">00</span>MONDAY_WINDOW                  freq<span class="token operator">=</span>daily<span class="token punctuation">;</span>byday<span class="token operator">=</span>MON<span class="token punctuation">;</span>byhour<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>byminute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> bysecond<span class="token operator">=</span><span class="token number">0</span>                            <span class="token operator">+</span><span class="token number">000</span> <span class="token number">04</span>:<span class="token number">00</span>:<span class="token number">00</span><span class="token number">7</span> <span class="token keyword">rows</span> selected<span class="token comment" spellcheck="true">--查看历史收集情况</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>                                    <span class="token keyword">FROM</span> dba_autotask_client_history             <span class="token keyword">WHERE</span> client_name <span class="token operator">LIKE</span> <span class="token string">'%stats%'</span><span class="token punctuation">;</span>三、手工执行统计信息的自动收集<span class="token keyword">create</span> <span class="token keyword">table</span> scott<span class="token punctuation">.</span>tb_objs <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_objects<span class="token punctuation">;</span><span class="token keyword">select</span> TABLE_NAME<span class="token punctuation">,</span>NUM_ROWS<span class="token punctuation">,</span>BLOCKS<span class="token punctuation">,</span>LAST_ANALYZED <span class="token keyword">from</span> dba_tables <span class="token keyword">where</span> TABLE_NAME<span class="token operator">=</span><span class="token string">'TB_OBJS'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--执行下面的这个存储过程</span>        SQL<span class="token operator">></span> <span class="token keyword">EXEC</span> DBMS_AUTO_TASK_IMMEDIATE<span class="token punctuation">.</span>GATHER_OPTIMIZER_STATS<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--如下查询，scott表上的统计信息已更新</span>        SQL<span class="token operator">></span> <span class="token keyword">select</span> TABLE_NAME<span class="token punctuation">,</span>NUM_ROWS<span class="token punctuation">,</span>BLOCKS<span class="token punctuation">,</span>LAST_ANALYZED <span class="token keyword">from</span> dba_tables <span class="token keyword">where</span> TABLE_NAME<span class="token operator">=</span><span class="token string">'TB_OBJS'</span><span class="token punctuation">;</span></code></pre><p>​    </p><p> eg:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">begin</span>  dbms_stats<span class="token punctuation">.</span>gather_table_stats<span class="token punctuation">(</span>ownname          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'CRM'</span><span class="token punctuation">,</span>                            tabname          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'E_TEL_VIPCUST_ADD'</span><span class="token punctuation">,</span>                            estimate_percent <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0.01</span><span class="token punctuation">,</span>                            degree           <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>                            <span class="token keyword">cascade</span>          <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>end;</p><p>/</p><p>FOR循环<br>   示例:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span>      <span class="token keyword">cursor</span> c_1 <span class="token operator">is</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">--定义游标     </span><span class="token keyword">BEGIN</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'行号 姓名 薪水'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">FOR</span> i <span class="token operator">IN</span> c_1         <span class="token comment" spellcheck="true">--for循环中的循环变量i为c_1%rowtype类型;</span>     LOOP     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>c_1<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>i<span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">' '</span><span class="token operator">||</span>i<span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--输出结果,需要 set serverout on 才能显示.</span>     <span class="token keyword">END</span> LOOP<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span> <span class="token keyword">declare</span> sqls varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'********  表名 ******************'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">FOR</span> i <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> user_tables<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--for循环中的循环变量i为c_1%rowtype类型;</span>   LOOP    sqls :<span class="token operator">=</span> <span class="token string">'create or replace view view_'</span> <span class="token operator">||</span> i<span class="token punctuation">.</span>table_NAME <span class="token operator">||</span> <span class="token string">'as select * from'</span> <span class="token operator">||</span> i<span class="token punctuation">.</span>table_NAME<span class="token punctuation">;</span>    <span class="token keyword">begin</span>    <span class="token keyword">execute</span> immediate sqls<span class="token punctuation">;</span>    exception      <span class="token keyword">when</span> OTHERS <span class="token keyword">Then</span>        dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>sqlerrm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> LOOP<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token number">1</span>  ORU<span class="token number">-10027</span>:buffer overflow <span class="token keyword">limit</span> <span class="token keyword">of</span> <span class="token number">2000</span> bytes；方法<span class="token number">1</span>：<span class="token keyword">set</span> serveroutput <span class="token keyword">on</span> size <span class="token number">10000000</span> <span class="token comment" spellcheck="true">//设置大点,默认为2000 bytes</span>方法<span class="token number">2</span>：<span class="token keyword">exec</span> dbms_output<span class="token punctuation">.</span><span class="token keyword">enable</span><span class="token punctuation">(</span><span class="token number">999999999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认为2000 bytes</span></code></pre><p><strong>总结：<br>自动收集的时间<br>周一 ··· 到  周五<br>默认是晚上10点  到 凌晨2两  持续  4个小时<br>周六周日<br>默认是 6点 到 凌晨2点 持续 20个小时</strong>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>知识时代我们的焦虑 </title>
      <link href="/2018/12/03/zhi-shi-shi-dai-wo-men-de-jiao-lu/"/>
      <url>/2018/12/03/zhi-shi-shi-dai-wo-men-de-jiao-lu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kb.cnblogs.com/page/606645/" target="_blank" rel="noopener">在学习中，有一个比掌握知识更重要的能力</a></p><p>来源: <a href="http://www.iheima.com/" target="_blank" rel="noopener">i黑马</a>  发布时间: 2018-09-08 16:28  阅读: 26467 次  推荐: 112   <a href="http://www.iheima.com/zixun/2018/0908/178982.shtml" target="_blank" rel="noopener">原文链接</a>   [收藏]  </p><p>　　我究竟该学什么？</p><p>　　我一朋友的公司，专门给创业者提供创业培训。有一天，他和我聊道， 现在创业者有一个普遍困扰，那就是不知道该学什么好。 </p><p>　　我说：为什么？ </p><p>　　他说：你想啊，创业者累成狗，本来时间就很少，结果创业方法今天出一个还没弄明白，明天就又出来一个——根本学不过来啊！ </p><p>　　我一听，嘿嘿乐了。我说，你以为只有创业者累成狗，没时间学那么多东西啊， 我们都一样！ </p><p>　　你看看，今天，不仅新知识产生的速度越来越快，而且知识发布的形式和渠道也越来越多，什么音频说书，视频讲课，在线培训等都在快速增加。这一点， 看“知识付费”行业这两年的快速兴起就是一个例证。 </p><p>　　据《2018年中国知识付费市场研究报告》显示，2017年中国知识付费产业规模约49亿元，同比增长近3倍，预计2020年将达到235亿元。 </p><p>　　你看，这个行业消费规模的快速攀升背后，就说明有越来越多人渴望更快更多地获取知识，哪怕让他多花一些钱也可以。 </p><p>　　员工在想，现在的新知识层出不穷，我不学会落后啊，我学点啥啊？ </p><p>　　老板在想，现在的新打法频繁迭出，我们公司可能什么都没做错，莫名奇妙就被降维攻击了，得学点啥啊？！ </p><p>　　家长在想，这么多育儿方法我一个都不会，让孩子输在起跑线怎办？我学点啥啊？！！ </p><p>　　…… </p><p>　　所有这些问题都可以归结于一个问题： </p><p>　　知识太多，学不过来，反而不知道该学点啥了，怎么办啊？ </p><p>　　嗯······要不，就······焦虑吧？ </p><p>　　学习的第一推动力 </p><p>　　有那么多知识需要学，可自己却无从下手，焦虑一下也是应该。 </p><p>　　况且，现在流行一个说法：人，生而懒惰，学习，天然辛苦。因此： 学习，是一件反人性的事。 </p><p>　　哈哈，你看， 如果我们老想着要做一件反人性的事情，不焦虑才怪呢。 </p><p>　　不过，要这么说，那些爱学习的人，岂不是快要没人性了——压力山大啊…… </p><p>　　扯远了，让我们回到主题里，我们刚才提到： </p><p>　　（1）我们觉得自己要学的知识太多，不知到底应该从何入手？ </p><p>　　（2）而学知识又是一个很辛苦的事情，要凭借毅力才能坚持，所以这是逆人性的过程。 </p><p>　　因此，我们应该努力克服自己的懒惰，凭借坚强的毅力，努力学习各种知识，吃得苦中苦，方为人上人！对不对？ </p><p>　　我觉得这个结论，貌似正确，实际并不完全。。。甚至可能会让人误入歧途。 </p><p>　　为什么这么说？ </p><p>　　因为，学习根本不是一个逆人性、需要坚强毅力的过程。恰恰相反， 学习是最容易产生愉悦心流的事情，学习就是人之天性。 </p><p>　　甚至学习不仅是人的天性，也是人类近亲猴子的天性。有研究发现，猴子在没有任何外部奖惩的机制下，自己就会投入精力研究如何打开笼子里的一把锁。 </p><p>　　而作为人类，正是由于有探索奥秘、发现新知识的天性，才在一代又一代人的努力下，积累创造了今天的丰富知识。 </p><p>　　事实上，世界上本没有知识，人探索的多了，才产生了知识。 </p><p>　　可是，为什么我们现在一提到学习，就觉得是一个很辛苦、逆人性的事情呢？ </p><p>　　我想，很大程度上是因为，我们总觉得学习最重要的能力是掌握知识，因此要头悬梁，锥刺股。 </p><p>　　然而对于真正会学习的人而言，其实他们并不是简单地靠着毅力来学知识——相反他们有一个隐形的关键能力，这个能力往往把“会学习的人”和“想学习的人”区分了出来。 </p><p>　　这就是： 提出问题的能力。 </p><p>　　记住： 真正要学习往往不是如何记住知识， 而是如何提出问题。 </p><p>　　学习真正的动力不是来自记住知识，而是发现未知，探索好奇，研究问题，克服困难。 </p><p>　　我们在解答疑惑的过程中，会聚精会神，会充满斗志，会沉浸其中。我们在记忆概念答案的时候，却抓耳挠腮。 </p><p>　　你一定有这样的经验，当你专注于研究探索你好奇事情时，你真的会沉溺于学习无法自拔，感觉不到时间的流逝。而让你死记硬背的时候，你一定更多地是充满绝望。 </p><p>　　所以，如果我们只能提升一个学习能力的话，那就聚焦在如何提出感兴趣的问题。 </p><p>　　因为， 提出你感兴趣的问题，将是你开展学习的第一推动力 ，剩下的学习过程，都可以因此自然发生。 </p><p>　　所以，当我们遇到很多知识，不知道该学哪个的时候，我的答案总是： 如果你不知道你该学什么，就去学你最好奇的。 </p><p>　　提问能力是一系列的能力集合 </p><p>　　知道、记住“学习的起点是问题”很简单，可是，要真正能够做到这一点，却并不容易。 </p><p>　　因为，要做到这一点，需要改变的并不仅仅是理念，而是整个学习流程体系——从学习方法、辅助工具到习惯培养的一系列内容。 </p><p>　　比如，说是学习的起点是问题。可是，你一具体操作起来，就会发现： </p><p>　　我过去没有提问这个习惯，不知道该问什么问题啊？ </p><p>　　或者我每天工作很忙，没时间想问题啊？ </p><p>　　又或者，如果我想出很多问题，可是还是回答不了啊…… </p><p>　　类似的一系列问题，都是我们要去面对和解决的。然而，很少有一本书或文章，帮我们回答这些问题。 </p><p>　　我自己在践行中发现， 任何一个习惯和能力的培养，真正的阻碍往往在执行的细节里 ，正是这些具体的操作障碍，影响了很多人学习能力的提高。 </p><p>　　因此，接下来我稍微多说几句细节的方法，希望对你实际训练能力时会有帮助。 </p><p>　　书归正传，在实践中，我把培养提问的习惯，分成两个环节： </p><p>　　（1）提出问题； </p><p>　　（2）处理问题。 </p><p>　　我们这篇文章，主要讨论提问能力，就让我们聚焦在第一个问题吧。 </p><p>　　说到提问题能力，我发现有个有趣的现象，那就是人们一旦开始训练自己提问能力的时候，就发现自己——提不出问题。尤其是当你提问提过3天之后，似乎所有问题都被我们问完了，剩下的事情似乎都没毛病啊~Everything is ok（一切都没问题），你让我提什么？ </p><p>　　有一次，我们团队开月度反思会，轮到一个刚入职的新同事发言时，他说：我找不到要反思的内容，感觉就是正常工作，没觉得有什么问题。 </p><p>　　当时我就一巴掌抽到自己脸上——好在是在我脑海里抽的…… </p><p>　　我怎么忘了提醒， 提问不是遇到问题才进行的——相反，极端点讲，你得有种“鸡蛋里挑骨头”的精神。 </p><p>　　我们觉得自己没问题，就等于我们真的没问题吗？ 当然不是。 不是没有问题，是我们没有发现问题的能力。 </p><p>　　我当时问这个同事：你今天的工作，如果换一个你认识的最优秀的人来做，他会和你的做法一样吗？ </p><p>　　同事立刻明白了，对自己“正常”的一天，可能对别人就是“不正常”的一天，只是自己没有发现而已。 </p><p>　　我举这个例子只是想说明： 提问这件事情，没我们想的那么简单，是需要用心挖掘的。 </p><p>　　既然提问的内容很重要，那我们怎样才能找到比较好的提问角度呢？ </p><p>　　我有一个小技巧可以和你分享： 当你感到自己“动了感情”的时候，就可以动手动脚动脑提问了。 </p><p>　　这里说的动感情，不是说你上大街看到美女或帅哥，就上去动手动脚，向人家提问：请问，这块砖头是你掉的吗？ </p><p>　　虽然那也是动感情，也是提问。。。但是，那个跑题了！ </p><p>　　我们这里指的动感情是—— </p><p>　　看电影的时候，可以问：为什么这个桥段会让我感动？发生了什么？ </p><p>　　看到喜欢的电子产品时会问：为什么这个产品让我这么喜欢，是什么让它与众不同？ </p><p>　　看小说入迷到忘却时间会问：为什么我不由自主地沉溺到这段剧情了？ </p><p>　　点完付款按钮之后，会问：我为什么又剁手了，怎么会这样？我是谁？我在哪里？要到哪里去…… </p><p>　　哈哈~ </p><p>　　事实上，所有让你“感兴趣”、想要弄明白的事情，你都可以提出问题：为什么这首歌这么好听？为什么金融业的人收入那么高？为什么老板最近看我的眼神不对了…… </p><p>　　发现自己“感兴趣”的事情，就提醒自己，要有意识地追问原因。 </p><p>　　因此，每当我意识到自己被一件事物击中了某种感情的时候，我就会拿出手机，记录下我的感受和问题。 </p><p>　　这些积累的问题，都是激发我学习新领域的星光火把——往往我会因为对一个问题的好奇探索，最后进入一个全新的领域学习。 </p><p>　　最典型的例子就是，我因为想了解如何能让员工学习能力提升，结果后来反而在学习和知识管理领域做了大量的研究，结果你才能看到《好好学习》和今天的文章，哈哈~ </p><p>　　当然，除了随时随地对感兴趣、好奇的事情提问之外，我还会在每日晨修之时列一个问题： “昨天发生的事情里，我可以提出什么问题呢？” </p><p>　　我把记录晨修日记的过程，当作训练提出问题和回答问题的思考训练，这也是一种非常有效的方式。不过，这个方法只是辅助，目的是有一个固定时间提问的仪式感，提醒自己更好地坚持下次。 </p><p>　　好了，总结一下今天的内容： </p><p>　　1、一个重要的学习理念：学习的起点是问题，而不是知识。 </p><p>　　2、提出感兴趣的问题，看似简单，可是能持续做到并不容易，是一系列能力的综合体现。 </p><p>　　3、有一个技巧可以帮助训练提问能力：在自己动感情的时候，赶紧动手动脚，追问问题。 </p><p>　　当然，无论我们文章中介绍了什么方法，都需要践行。正所谓，为者常成，行者常至。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 获取知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle SQL语句之常见优化方法总结</title>
      <link href="/2018/12/03/oracle-sql-yu-ju-zhi-chang-jian-you-hua-fang-fa-zong-jie/"/>
      <url>/2018/12/03/oracle-sql-yu-ju-zhi-chang-jian-you-hua-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>（以下 方法不能盲信 要以实际情况为准  只是提供一份蓝本）</strong></p><p>下面列举一些工作中常常会碰到的Oracle的SQL语句优化方法：</p><p>1、SQL语句尽量用大写的；</p><p> <code>因为oracle总是先解析SQL语句，把小写的字母转换成大写的再执行。</code></p><p>2、使用表的别名： </p><p> <code>当在SQL语句中连接多个表时, 尽量使用表的别名并把别名前缀于每个列上。这样一来,</code></p><p><code>就可以减少解析的时间并减少那些由列歧义引起的语法错误。</code></p><p>3、选择最有效率的表名顺序(只在基于规则的优化器(RBO)中有效)： </p><pre class=" language-sql"><code class="language-sql"> ORACLE 的解析器按照从右到左的顺序处理<span class="token keyword">FROM</span>子句中的表名，<span class="token keyword">FROM</span>子句中写在最后的表<span class="token punctuation">(</span>基础表也称为驱动表<span class="token punctuation">,</span>driving <span class="token keyword">table</span><span class="token punctuation">)</span>将被最先处理，在<span class="token keyword">FROM</span>子句中包含多个表的情况下<span class="token punctuation">,</span>必须选择记录条数最少的表作为基础表。如果有<span class="token number">3</span>个以上的表连接查询<span class="token punctuation">,</span> 那就需要选择交叉表<span class="token punctuation">(</span>intersection <span class="token keyword">table</span><span class="token punctuation">)</span>作为基础表<span class="token punctuation">,</span> 交叉表是指那个被其他表所引用的表。</code></pre><p>4、WHERE子句中的连接顺序： </p><pre class=" language-sql"><code class="language-sql"> ORACLE采用自下而上的顺序解析<span class="token keyword">WHERE</span>子句<span class="token punctuation">,</span>根据这个原理<span class="token punctuation">,</span>表之间的连接必须写在其他<span class="token keyword">WHERE</span>条件之前<span class="token punctuation">,</span> 那些可以过滤掉最大数量记录的条件必须写在<span class="token keyword">WHERE</span>子句的末尾。</code></pre><p>5、SELECT子句中避免使用 * ： </p><p> ORACLE在解析的过程中, 会将’*’ 依次转换成所有的列名, 这个工作是通过查询数据字</p><p>典完成的, 这意味着将耗费更多的时间。</p><p>6、减少访问数据库的次数： </p><p> ORACLE在内部执行了许多工作: 解析SQL语句,估算索引的利用率,绑定变量,读数据块等。</p><p>7、整合简单、无关联的数据库访问： </p><p> 如果有几个简单的数据库查询语句,可以整合到一个查询中(即使它们之间没有关系)。</p><p>8、在SQL<em>Plus,SQL</em>Forms和Pro*C中重新设置ARRAYSIZE参数,可以增加每次数据库访问</p><p> 的检索数据量,建议值为200。 </p><p>9、删除重复记录： </p><p> 最高效的删除重复记录方法 ： </p><pre class=" language-SQL"><code class="language-SQL"> DELETE FROM TEMP E  WHERE E.ROWID > (SELECT MIN(X.ROWID)            FROM TEMP1 X WHERE X.TEMP_NO = E.TEMP_NO);</code></pre><p>删除重复的记录只保留一条</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">from</span> 表 <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> 表 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">AND</span> ROWID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>ROWID<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表 <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>10、减少对表的查询： </p><p> 在含有子查询的SQL语句中,要特别注意减少对表的查询。 </p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> TAB_NAME <span class="token keyword">FROM</span> <span class="token keyword">TABLES</span> <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>TAB_NAME<span class="token punctuation">,</span>DB_VER<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span>  TAB_NAME<span class="token punctuation">,</span>DB_VER <span class="token keyword">FROM</span>  TAB_COLUMNS  <span class="token keyword">WHERE</span>  VERSION <span class="token operator">=</span> <span class="token number">604</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>11、避免使用耗费资源的操作: </p><pre class=" language-sql"><code class="language-sql"> 带有<span class="token keyword">DISTINCT</span>、<span class="token keyword">UNION</span>、MINUS、<span class="token keyword">INTERSECT</span>、<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>的SQL语句会启动SQL引擎执行耗费资源的排序<span class="token punctuation">(</span>SORT<span class="token punctuation">)</span>功能。<span class="token keyword">DISTINCT</span>需要一次排序操作<span class="token punctuation">,</span>而其他的至少需要执行两次排序。通常<span class="token punctuation">,</span>带有<span class="token keyword">UNION</span>、MINUS、<span class="token keyword">INTERSECT</span>的SQL语句都可以用其他方式重写。 如果数据库的SORT_AREA_SIZE调配得好<span class="token punctuation">,</span>使用<span class="token keyword">UNION</span><span class="token punctuation">,</span>MINUS<span class="token punctuation">,</span><span class="token keyword">INTERSECT</span>也是可以考虑。 </code></pre><p>12、优化GROUP BY: </p><p> 提高GROUP BY 语句的效率,可以通过将不需要的记录在GROUP BY之前过滤掉。</p><p>下面两个查询返回相同结果但明显第二个效率更高。 </p><p>低效: </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> JOB<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>AGE<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">TEMP</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> JOB <span class="token keyword">HAVING</span> JOB <span class="token operator">=</span> <span class="token string">'STUDENT'</span> <span class="token operator">OR</span> JOB <span class="token operator">=</span> <span class="token string">'MANAGER'</span><span class="token punctuation">;</span>高效: <span class="token keyword">SELECT</span> JOB<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>AGE<span class="token punctuation">)</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> JOB <span class="token operator">=</span> <span class="token string">'STUDENT'</span> <span class="token operator">OR</span> JOB <span class="token operator">=</span> <span class="token string">'MANAGER'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> JOB<span class="token punctuation">;</span></code></pre><p>13、根据需要用UNION ALL替换UNION： </p><p> 当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并,</p><p>然后在输出最终结果前进行排序。如果用UNION ALL替代UNION, 这样排序就不是必要了。</p><p>效率就会因此得到提高。需要注意UNION ALL将重复输出两个结果集合中相同记录。因此要</p><p>从业务需求使用UNION ALL的可行性。UNION 将对结果集合排序,这个操作会使用到</p><p>SORT_AREA_SIZE这块内存。对于这块内存的优化也很重要。 </p><p>低效： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB1 <span class="token keyword">WHERE</span> AGE <span class="token operator">=</span> <span class="token string">'20'</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB2 <span class="token keyword">WHERE</span> AGE <span class="token operator">=</span> <span class="token string">'20'</span><span class="token punctuation">;</span> 高效: <span class="token keyword">SELECT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB1 <span class="token keyword">WHERE</span> AGE <span class="token operator">=</span> <span class="token string">'20'</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB2 <span class="token keyword">WHERE</span> AGE <span class="token operator">=</span> <span class="token string">'20'</span><span class="token punctuation">;</span></code></pre><p>14、用EXISTS替换DISTINCT： </p><p> 当SQL包含一对多表查询时,避免在SELECT子句中使用DISTINCT,一般用EXIST替换,EXISTS</p><p>查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果。</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">(</span>低效<span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB1 D<span class="token punctuation">,</span>USER_TAB2 E <span class="token keyword">WHERE</span> D<span class="token punctuation">.</span>USER_ID<span class="token operator">=</span> E<span class="token punctuation">.</span>USER_ID<span class="token punctuation">;</span><span class="token punctuation">(</span>高效<span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> USER_ID<span class="token punctuation">,</span>BILL_ID <span class="token keyword">FROM</span> USER_TAB1 D <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span>     <span class="token keyword">FROM</span> USER_TAB2 E <span class="token keyword">WHERE</span> E<span class="token punctuation">.</span>USER_ID<span class="token operator">=</span> D<span class="token punctuation">.</span>USER_ID<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>15、尽量多使用COMMIT： </p><pre><code> 只要有可能,在程序中尽量多使用COMMIT,这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少。 COMMIT所释放的资源:  a. 回滚段上用于恢复数据的信息。  b. 被程序语句获得的锁。 c. redo log buffer 中的空间。  d. ORACLE为管理上述3种资源中的内部花销。</code></pre><p>16、用Where子句替换HAVING子句： </p><pre><code> 避免使用HAVING子句,HAVING只会在检索出所有记录之后才对结果集进行过滤。这个处理需要排序,总计等操作。最好能通过WHERE子句限制记录的数目。(非oracle中)on、where、having这三个都可以加条件的子句中,on是最先执行,where次之,having最后。a、on是先把不符合条件的记录过滤后才进行统计，可以减少中间运算要处理的数据，速度是 最快的；b、where比having快点，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，就剩下where跟having比较了。在单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，而having就不能，在速度上后者要慢。 如果要涉及到计算的字段，就表示在没计算之前，这个字段的值是不确定的，where的作用时间是在计算之前就完成的，而having就是在计算后才起作用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，on比where更早起作用。系统首先根据各个表之间的关联条件，把多个表合成一个临时表后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。</code></pre><p>17、用TRUNCATE替代DELETE： </p><pre><code> 当删除表中的记录时,在通常情况下, 回滚段(rollback segments)用来存放可以被恢复的信息。如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况)。而当运用TRUNCATE时,回滚段不再存放任何可被恢复的信息。当命令运行后,数据不能被恢复。因此很少的资源被调用,执行时间也会很短。注:TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML。</code></pre><p>18、使用DECODE函数来减少处理时间： </p><p> <code>使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表。</code></p><p>19、用EXISTS替代IN、用NOT EXISTS替代 NOT IN： </p><pre><code> 在基于基础表的查询中经常需要对另一个表进行联接。在这种情况下, 使用EXISTS(或NOTEXISTS)通常将提高查询的效率。在子查询中,NOT IN子句将执行一个内部的排序和合并。无论在哪种情况下,NOT IN都是最低效的(要对子查询中的表执行了一个全表遍历)。所以尽量将NOT IN改写成外连接(Outer Joins)或NOT EXISTS。 （高效）SELECT A.* FROM TEMP(基础表) A WHERE AGE &gt; 0 AND EXISTS(SELECT 1 FROM TEMP1 WHERE A.ID= ID AND NAME=&#39;TOM&#39;);(低效)SELECT A.* FROM TEMP(基础表) A WHERE AGE &gt; 0 AND A.ID IN(SELECT ID FROM TEMP1 WHERE NAME =&#39;TOM&#39;); </code></pre><p>20、用索引提高效率： </p><pre class=" language-sql"><code class="language-sql"> 索引是表的一个概念部分<span class="token punctuation">,</span>用来提高检索数据的效率，ORACLE使用了复杂的自平衡B<span class="token operator">-</span>tree结构。通常通过索引查询数据比全表扫描要快。当ORACLE找出执行查询和<span class="token keyword">Update</span>语句的最佳路径时<span class="token punctuation">,</span> ORACLE优化器将使用索引。同样在联结多个表时使用索引也可以提高效率。 另一个使用索引的好处是<span class="token punctuation">,</span>它提供了主键<span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span>的唯一性验证。那些LONG或LONG RAW数据类型<span class="token punctuation">,</span> 你可以索引几乎所有的列。通常在大型表中使用索引特别有效。在扫描小表时<span class="token punctuation">,</span>使用索引同样能提高效率。 使用索引虽能得到查询效率的提高<span class="token punctuation">,</span>但也必须注意到它的代价。索引需要空间来存储<span class="token punctuation">,</span>也需要定期维护<span class="token punctuation">,</span> 每当有记录在表中增减或索引列被修改时<span class="token punctuation">,</span> 索引本身也会被修改。这意味着每条记录的<span class="token keyword">INSERT</span>、<span class="token keyword">DELETE</span>、<span class="token keyword">UPDATE</span>将为此多付出<span class="token number">4</span>、<span class="token number">5</span> 次的磁盘I<span class="token operator">/</span>O。因为索引需要额外的存储空间和处理<span class="token punctuation">,</span>一些不必要的索引反而会使查询反应时间变慢。定期的重构索引: <span class="token keyword">ALTER</span> <span class="token keyword">INDEX</span> <span class="token operator">&lt;</span>INDEXNAME<span class="token operator">></span> REBUILD <span class="token operator">&lt;</span>TABLESPACENAME<span class="token operator">></span></code></pre><p>21、用&gt;=替代&gt;： </p><pre class=" language-sql"><code class="language-sql">高效: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">TEMP</span> <span class="token keyword">WHERE</span> ID <span class="token operator">>=</span><span class="token number">4</span><span class="token punctuation">;</span>低效: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">TEMP</span> <span class="token keyword">WHERE</span> ID <span class="token operator">></span><span class="token number">3</span><span class="token punctuation">;</span>区别:前者DBMS将直接跳到第一个ID等于<span class="token number">4</span>的记录而后者将首先定位到ID<span class="token operator">=</span><span class="token number">3</span>的记录并且向前扫描到第一个ID大于<span class="token number">3</span>的记录。  </code></pre><p>22、避免在索引列上使用NOT：　 </p><pre class=" language-sql"><code class="language-sql"> <span class="token operator">NOT</span>会产生在和在索引列上使用函数相同的影响。当ORACLE遇到<span class="token operator">NOT</span><span class="token punctuation">,</span>就会停止使用索引转 而执行全表扫描。</code></pre><p>23、避免在索引列上使用计算： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">WHERE</span>子句中，如果索引列是函数的一部分，优化器将不使用索引而使用全表扫描。 低效： <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span> <span class="token keyword">TEMP</span> <span class="token keyword">WHERE</span> SAL <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">></span> <span class="token number">25000</span><span class="token punctuation">;</span>高效: <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span> <span class="token keyword">TEMP</span> <span class="token keyword">WHERE</span> SAL <span class="token operator">></span> <span class="token number">25000</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token number">24</span>、用<span class="token keyword">UNION</span>替换<span class="token operator">OR</span><span class="token punctuation">(</span>适用于索引列<span class="token punctuation">)</span>:  用<span class="token keyword">UNION</span>替换<span class="token keyword">WHERE</span>子句中的<span class="token operator">OR</span>将会起到较好的效果。对索引列使用<span class="token operator">OR</span>将造成全表扫描。注意<span class="token punctuation">,</span>以上规则只针对多个索引列有效。如果有<span class="token keyword">column</span>没有被索引<span class="token punctuation">,</span> 查询效率可能会因为你没有选择<span class="token operator">OR</span>而降低。高效: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USER_TAB1 <span class="token keyword">WHERE</span> USER_ID <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USER_TAB1 <span class="token keyword">WHERE</span> AGE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>低效: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USER_TAB1 <span class="token keyword">WHERE</span> USER_ID <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">OR</span> AGE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  </code></pre><p>25、避免在索引列上使用IS NULL和IS NOT NULL </p><pre class=" language-sql"><code class="language-sql"> 避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引。对于单列索引，如果列包含空值，索引中将不存在此记录。对于复合索引，如果每个列都为空，索引中同样不存在此记录。如果至少有一个列不为空，则记录存在于索引中。 如果唯一性索引建立在表的A列和B列上<span class="token punctuation">,</span> 并且表中存在一条记录的A<span class="token punctuation">,</span>B值为<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ORACLE将不接受下一条具有相同A<span class="token punctuation">,</span>B值（<span class="token number">123</span><span class="token punctuation">,</span><span class="token boolean">null</span>）的记录<span class="token punctuation">(</span>插入<span class="token punctuation">)</span>。然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空。因此你可以插入<span class="token number">10000</span>条具有相同键值的记录<span class="token punctuation">,</span>当然它们都是空<span class="token operator">!</span> 因为空值不存在于索引列中<span class="token punctuation">,</span>所以<span class="token keyword">WHERE</span>子句中对索引列进行空值比较将使ORACLE停用该索引。低效: <span class="token punctuation">(</span>索引失效<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPARTMENT <span class="token keyword">WHERE</span> DEPT_CODE <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>高效: <span class="token punctuation">(</span>索引有效<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPARTMENT <span class="token keyword">WHERE</span> DEPT_CODE <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>26、总是使用索引的第一个列： </p><pre class=" language-sql"><code class="language-sql"> 如果索引是建立在多个列上<span class="token punctuation">,</span>只有在它的第一个列<span class="token punctuation">(</span>leading <span class="token keyword">column</span><span class="token punctuation">)</span>被<span class="token keyword">where</span>子句引用时<span class="token punctuation">,</span>优化器才会选择使用该索引。 当引用索引的第二个列时<span class="token punctuation">,</span>优化器使用了全表扫描而忽略了索引。</code></pre><p>27、用WHERE替代ORDER BY： </p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 子句只在以下两种严格的条件下使用索引： <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>中所有的列必须包含在相同的索引中并保持在索引中的排列顺序。  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>中所有的列必须定义为非空。 <span class="token keyword">WHERE</span>子句使用的索引和<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>子句中所使用的索引不能并列。例如:   USER_ID PK <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  USER_DESC <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  USER_TYPE <span class="token boolean">NULL</span> 低效: <span class="token punctuation">(</span>索引不被使用<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> USER_ID <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> USER_TYPE<span class="token punctuation">;</span> 高效: <span class="token punctuation">(</span>使用索引<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> USER_ID <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> USER_TYPE<span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>28、避免改变索引列的类型: </p><pre class=" language-sql"><code class="language-sql">当比较不同数据类型的数据时<span class="token punctuation">,</span> ORACLE自动对列进行简单的类型转换。 假设 USER_ID 是一个数值类型的索引列。 <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> USER_ID <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>实际上<span class="token punctuation">,</span>经过ORACLE类型转换<span class="token punctuation">,</span> 语句转化为: <span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> USER_ID <span class="token operator">=</span> TO_NUMBER<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 幸运的是<span class="token punctuation">,</span>类型转换没有发生在索引列上<span class="token punctuation">,</span>索引的用途没有被改变。现在<span class="token punctuation">,</span>假设USER_TYPE是一个字符类型的索引列。<span class="token keyword">SELECT</span> …  <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> USER_TYPE <span class="token operator">=</span> <span class="token number">123</span> <span class="token punctuation">;</span>这个语句被ORACLE转换为: <span class="token keyword">SELECT</span> …  <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> TO_NUMBER<span class="token punctuation">(</span>USER_TYPE<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>因为内部发生的类型转换<span class="token punctuation">,</span> 这个索引将不会被用到<span class="token operator">!</span> 为了避免ORACLE对你的SQL进行隐式的类型转换<span class="token punctuation">,</span> 最好把类型转换用显式表现出来。注：当字符和数值比较时<span class="token punctuation">,</span> ORACLE会优先转换数值类型到字符类型。<span class="token keyword">SELECT</span> …  <span class="token keyword">FROM</span> USER_TAB <span class="token keyword">WHERE</span> TO_NUMBER<span class="token punctuation">(</span>USER_TYPE<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>29、WHERE子句: </p><pre class=" language-sql"><code class="language-sql"> 某些<span class="token keyword">SELECT</span> 语句中的<span class="token keyword">WHERE</span>子句不使用索引。  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'!='</span>不走索引。索引只能告诉我们什么存在于表中<span class="token punctuation">,</span> 而不能告诉你什么不在表中。 <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'||'</span>是字符连接函数。就象其他函数那样<span class="token punctuation">,</span> 停用了索引。 <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'+'</span>是数学函数。和其他数学函数一样<span class="token punctuation">,</span> 停用了索引。 <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>相同的索引列不能互相比较<span class="token punctuation">,</span>这将会启用全表扫描。</code></pre><p>30、 a.如果检索数据量超过30%的表中记录数，使用索引将没有显著的效率提高。 </p><pre><code>b.在特定情况下,使用索引也许会比全表扫描更慢,但这是同一个数量级上的区别。`    `而通常情况下,使用索引比全表扫描要块几倍乃至几千倍。`</code></pre><p>31、查’低效执行’的SQL语句：  </p><pre class=" language-SQL"><code class="language-SQL"> SELECT EXECUTIONS,DISK_READS,BUFFER_GETS,       ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) HIT_RADIO,      ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run,SQL_TEXT  FROM V$SQLAREA  WHERE EXECUTIONS > 0 AND BUFFER_GETS > 0  AND (BUFFER_GETS-DISK_READS)/BUFFER_GETS < 0.8  ORDER BY 4 DESC;</code></pre><p>-——————– </p><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 常用命令</title>
      <link href="/2018/12/03/linux-chang-yong-ming-ling/"/>
      <url>/2018/12/03/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>用户命令</p><p><code>pwd</code></p><p>显示当前目录</p><p><code>cd</code></p><p>后面不加东西就回到家目录（/home/用户），加的话就到某地址，绝对路径则从/开始，.表示当前目录，..到上一级目录，-表示上一个目录（比如原来我从A切换到B目录，用-则从B回到A目录），/表示回到根目录，~表示家目录</p><p>tail 查看文件末尾多少行 </p><p><code>tail -100f 日志文件名</code> </p><p><code>hostname</code></p><p>查看主机名，后面如果加新名字则修改当前主机名，但只是暂时修改，重开命令行则主机名又变回去了</p><p><code>id</code></p><p>显示当前用户信息</p><p><code>whoami</code></p><p>当前登录用户名，举例：</p><p><code>dawson@dawson-PC:/home/dawson/Desktop$ whoami dawson who</code> </p><p>查看有哪些登录了的用户及其终端名和注册到系统的时间等，举例：</p><p><code>dawson@dawson-PC:/home/dawson/Desktop$ who dawson   tty7         2018-05-08 15:56 (:0)</code> </p><p><code>w</code></p><p>查看哪些用户登录并且在干什么，举例：</p><p>dawson@dawson-PC:/home/dawson/Desktop$ w  17:14:27 up  1:18,  1 user,  load average: 0.11, 0.13, 0.17 USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT dawson   tty7     :0               15:56    1:18m 35.22s  2.12s /usr/bi </p><p><code>useradd 用户名</code></p><p>新建用户，-g指定用户所在组名或登录时的初始组标志号，-G指定新用户的附加组，-P指定用户密码，-u指定用户标志号的数值</p><p><code>userdel 用户名</code></p><p>删除用户</p><p><code>groupadd</code></p><p>添加新的用户组，-g指定GID（要大于500），-o表示该组GID可以不唯一，-r添加一个系统账号组（要小于499）</p><p><code>groupdel</code></p><p>删除用户组</p><p><code>groupmod</code></p><p>修改组属性</p><p><code>more 文件名 /cat 文件名 | more</code></p><p>用于特别多内容的文件将其一页一页显示，但只能向下翻页，如果想上下翻页都可以用-less，如果只看头几行可以head -n，如果想看末尾几行可以tail -n（默认都是10行），如果想动态看文件更新可以加-f</p><p><code>sort 文件名</code></p><p>给文件内容排序输出（不改变源文件内容），默认按每行首字母排序，如果-k加数字范围代表从每行的第某个字符到某个字符之间作为关键字排序，-r代表逆向排序，举例：</p><p>sort -k 2,3 abc     #以每行第三个字段作为关键字排序 </p><p><code>uniq 文件</code></p><p>删除内容的重复行后输出（不改变源文件内容），举例：</p><p>uniq abc </p><p><code>diff 文件1 文件2</code></p><p>比较两个文件的不同，文件内容不需要排序</p><p><code>comm 文件1 文件2</code></p><p>比较两个文件，显示他们共有的行，但是要求文件内容排好序先</p><p><code>ln 文件1 文件2</code></p><p>对文件1创建一个硬链接，名字为文件2，只能对文件创建，删除源文件对其没有影响，内容还在，可以继续使用；如果加上-s，就是创建符号链接，实质是保存了要链接文件的绝对路径及文件名，会建立一个新文件，可以对文件/目录进行创建，但是一旦源文件删除，这个也就不能用了，相当于创建一个快捷方式</p><p><code>ls</code></p><p>查看当前目录文件：</p><pre class=" language-sh"><code class="language-sh">-a          显示所有文件（包括隐藏文件） -l          显示详细信息 -R          递归显示子结构目录 -ld 文件名  显示该文件目录和链接信息 -t          以文件最后修改时间排序显示 -S          以文件大小递降排序显示 su -什么都不加将切换入root模式，加用户名切换至某用户，输入exit退出用户</code></pre><p><code>passwd</code></p><p>修改用户密码，如果修改想不用原密码可以前面加sudo</p><p><code>history</code></p><p>查看输入命令历史，并且可以通过：！数字，来运行对应命令，举例：</p><pre class=" language-sh"><code class="language-sh">dawson@dawson-PC:~/Desktop$ history | tail -3   565  tail -3 history    566  ls   567  history | tail -3 dawson@dawson-PC:~/Desktop$ !566 ls aaa  abc  cba  网页前端.txt     #运行第566条命令ls </code></pre><p><code>clear</code></p><p>清屏</p><p>alias 别名=”命令”</p><p>给命令设置别名，举例：</p><p><code>alias ll=&quot;ls -l&quot;</code> </p><p>则输入ll和输入ls -l就一样了，要取消别名时就输入unalias别名就行了，比如取消上面的ll，就：</p><p><code>unalias ll</code> </p><p><code>whereis 命令名</code></p><p>告诉你命令存放的位置，举例：</p><p>dawson@dawson-PC:~$ whereis ls ls: /bin/ls /usr/share/man/man1/ls.1.gz </p><p>basename</p><p>取你指令中的最后一个文件名，例如：</p><p><code>basename /home/dawson/Desktop</code> </p><p>则结果就是Desktop（这个目录下/home/dawson是目录，Desktop是文件），然后dirname是取目录名，对前面那个就是/home/dawson</p><p><code>type 命令名</code></p><p>显示这个指令信息，加-t参数会显示这个指令是外部指令还是内置指令，加-a会显示PATH下所有有其的路径</p><p>网络配置命令</p><p><code>ifconfig</code></p><p>查看网络配置，后面-a则查看所有接口，如果后面输入的是某个接口名则只查看该接口，例如eth0则查看eth0接口，激活接口用up参数，关闭用down，如启用网卡eth0：ifconfig eth0 up，还有设置ip地址和子网掩码以及广播地址等，举例：</p><p>ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255 </p><p>route</p><p>不带参数显示当前路由表内容，可以设置网关，如：</p><p>route add default gw 192.168.120.240 </p><p>删除就把add改成del；也可以设置路由，如：</p><p>route add -net 221.56.76.0 netmask 255.255.255.0 eth0 </p><p><code>setup</code></p><p>直接进入网络配置界面</p><p><code>host 网址</code></p><p><code>测试DNS解</code>析是否正常，如果返回ip地址则正常，dig命令也可以解析，并且返回的内容更详细</p><p><code>ip route</code></p><p>显示路由表</p><p><code>traceroute url</code></p><p>追踪到达目标地址的网络路径</p><p><code>nslookup</code></p><p>检测DNS服务器，输入后会进入一个&gt;提示符的界面，里面可以输入域名或ip地址检测DNS，或者直接：</p><p>nslookup ip/域名 </p><p><code>mtr url</code></p><p>对达到目标地址进行网络测试（结合ping和traceroute），会动态更新路由信息，loss表示丢失率，snt表示发了多少包，</p><p>任务进程命令</p><p>后面加&amp;</p><p>如果直接打开一个文件，将会使当前命令行在占用当中，加了&amp;可以在后台打开某文件，从而继续使用命令行，例如后台打开火狐：</p><p><code>firefox &amp;</code> </p><p>sleep 时间</p><p>让某个任务停止多长时间、</p><p><code>bg 数字</code></p><p>让第几个任务继续在后台运行</p><p><code>fg 数字</code></p><p>让第几个任务在前台运行</p><p><code>jobs</code></p><p>查看后台作业情况，例如上面命令把火狐放后台运行，则jobs后会看到火狐</p><p><code>ps</code></p><p>查看当前系统中运行的进程信息</p><pre class=" language-sh"><code class="language-sh">-e      显示所有进程信息 -f      显示详细信息 -数字 显示某一id进程信息 r       （没有-）只显示正在运行的进程 u       （没有-）以偏用户风格样式显示 </code></pre><p><code>kill pid</code></p><p>终止某一个进程，进程可以用ps查看</p><p>解压缩命令</p><p><code>zip 压缩后文件名 文件名</code></p><p>压缩某文件并命名，还有用gzip压缩，把zip改成gzip就行了</p><p><code>unzip 压缩文件名</code></p><p>解压某文件</p><p><code>tar -cvf 归档后文件名 文件名</code></p><p>归档某文件（只打包不压缩），-c创建归档，如果想归档的同时也压缩则用-cvzf（gzip压缩），f是指定压缩文件，z是按gzip压缩，v是显示操作过程，如果是按bzip2压缩就是j，如果是按compress压缩是Z</p><p><code>tar -xvf 归档文件名</code></p><p>解放某归档文件，如果是.tar.gz文件（即经过gzip压缩的）就要-xvzf，如果是.tar.bz2就要-xvjf</p><p>文件管理命令</p><p><code>cp 源文件名 目标文件名</code></p><p>复制某文件，并赋予新文件名，如果源文件名后面加的只是地址，则将源文件复制到某目录下，名字不变</p><p><code>cp -r 源文件夹 目标文件夹</code></p><p>复制文件夹，如果要查看详细信息则-v</p><p><code>mv 源文件名 目标文件夹/目标文件名</code></p><p>移动文件到目标文件夹/文件重命名</p><p><code>touch</code></p><p>后面加个文件名，创建一个新文件或者修改指定文件的时间标签</p><p><code>rm 文件名</code></p><p>删除某个文件，如果是文件夹要加个-r在前面，如果删除的内容要自己确认哪个删哪个不删则加-i，如果要强制删除则-f</p><p><code>cat</code></p><p>查看某文件内容，但主要是文本文件，假如是二进制文件可能就会都是乱码，所以可以用od来读取二进制（od 文件名）</p><p><code>tee</code></p><p>将某文件重定向的同时还输出在屏幕上</p><p><code>mkdir 文件夹名（目录）</code></p><p>创建一个文件夹（目录），如果加-p，则可以循环创建目录，举例：</p><p><code>mkdir a/b/c</code> </p><p>则依次创建这三个目录，如果想创建时就确定他的权限就可以用-m参数，举例：</p><p>mkdir -m 777 abc </p><p>rmdir 文件夹名（目录）</p><p>删除一个空文件夹（空目录），要删除非空的就用前面的rm -r</p><p><code>file 文件名</code></p><p>查看文件类型</p><pre class=" language-sh"><code class="language-sh">directory：目录文件 -：普通文件，或更准确地说，不属于以上几种类型的文件 l：符号链接(指向另一个文件,类似于瘟下的快捷方式) s：套接字文件 b：块设备文件,二进制文件 c：字符设备文件 p：命名管道文件 </code></pre><p><code>locate 关键词</code></p><p>快速搜索带某关键字文件，因为是直接查数据库所以查的快，但有时可能不能实时查到最新的文件，需要updatedb更新数据库，可能会花点时间</p><p><code>find 查找位置 查找参数 参数数据</code></p><p>查找位置如果在当前目录则.，如果根分区则/，查找参数如果按名字则-name，参数数据可以参考通配符（例如查找所有配置文件：*.conf）</p><p><code>grep 关键字 目录</code></p><p>基于某个关键字在该目录下搜索文本</p><p>-I      忽略大小写 -n      显示结果所在行数 -v      输出不带关键字的行 -Ax     输出包含结果开始之后的内容 -Bx     输出包含结果所在行之前的内容 </p><p><code>wc 文件名</code></p><p>统计文本信息</p><p>-l      只统计行数 -w      只统计单词 -c      只统计字节数 -m      只统计字符数 </p><p><code>sort 文件名</code></p><p>对文本内容进行排序</p><p>-r      倒序排序 -n      基于数字排序 -f      忽略大小写 -u      删除重复行 </p><p><code>diff 文件名1 文件名2</code></p><p>比较两文件信息</p><p>-I      忽略大小写 -b      忽略空格数量的改变 -u      统一显示比较信息 </p><p>sed ‘s/搜索内容/替换成的内容/g’ 文件名</p><p>用于搜索某文件里的内容并对该内容进行替换，g如果不写则只替换第一个，有g则全部替换</p><p><code>vim/vi 文件名</code></p><p>用vim编辑器编辑</p><p>i           当前位置开始插入 I           当前行的行首开始插入 o           在当前行回车进入下一行 dd          删除整行 yy          复制当前行 n+yy        复制n行当前行 P           粘贴 u           撤销 r           替换当前字符 /           查找关键字 :w          保存 :q          退出 :q!         直接退出不保存 :wq         保存并退出 :x          只有当内容被修改过后才保存并退出，否则直接退出 :ZZ         和x一样 number      显示行号 :!系统命令  运行系统命令并显示结果 :sh         切换回命令行（要再切换回来则ctrl+d），每次用快捷键需要按下esc退出前个模式 </p><p>特殊</p><p><code>sz 文件名</code></p><p>将linux文件保存到windows本地，需要安装，然后一般在windows远程终端（如xshell）运行（在linux命令行里运行会卡住）</p><p>系统命令</p><p><code>init 数字</code></p><p>1-单用户模式（进来就只能是root模式，密码都不用输，如果要修改root的密码必须得进这里面改） 2-不带网络的多用户模式（进来输入用户名密码登录），只有命令行界面 3-多用户模式，只有命令行界面（常用） 5-图形界面，就是正常开机的（常用） 6-重启 </p><p><code>shutdown -h/-r 时间</code></p><p>-h则多久后关机，-r多久后重启（时间可以是now、+10代表10分钟后、23:30代表那时候关）如果想立即关机则poweroff，如果要立即重启则reboot，举例：</p><p><code>shutdown -h now     #立刻关机</code> </p><p><code>date</code></p><p>查看当前系统时间，可以后面加显示格式，例如：</p><p>date +%Y/%m/%d </p><p><code>cal</code></p><p>看日历时间，想看某月某日则：cal month year，例如：</p><p>cal 3 2018 </p><p>bc</p><p>计算器，输入后即可输入计算语句（例如：1+1等），默认整数精度，要精确小数则先输入：scale=精确度数（例如：scale=3），输入quit离开</p><p><code>uptime</code></p><p>看系统使用时间</p><p><code>lspci</code></p><p>看PCI设备，-v看详细信息</p><p><code>lsusb</code></p><p>看USB设备，-v看详细信息</p><p><code>lsmod</code></p><p>看加载模块，驱动信息</p><p>uname -r</p><p>查看系统内核信息，举例：</p><p>dawson@dawson-PC:~$ uname -r 4.9.0-deepin9-amd64 </p><p>lsb_release -a</p><p>查看LSB(Linux Standard Base)信息，举例：</p><p>dawson@dawson-PC:~$ lsb_release -a No LSB modules are available. Distributor ID: Deepin Description:    Deepin 15.4.1 Release:    15.4.1 Codename:   unstable </p><p><code>top</code></p><p>性能分析</p><p><code>fdisk</code></p><p>磁盘操作命令，需要root权限</p><p><code>-h/--help</code></p><p>查看该命令下的帮助</p><p><code>man 命令名</code></p><p>列出某一命令的完整说明</p><p><code>info 命令名</code></p><p>列出更详细的命令说明</p><p><code>which 命令名</code></p><p>找到命令存放的位置，whereis也是查找命令存放的位置，但假如一个命令在/bin和/root都有，which只有输出第一个找到的位置，而whereis会把所有找到的位置都输出</p><p><code>chmod 模式 文件名</code></p><p>修改文件权限，模式可以用+、-来加减权限，如给用户加读、写权限则chmod u+rw 文件名，还有一种数字方式，其中权限r=4，w=2，x=1，例如UGO都可读写则为chmod 666 文件名</p><p><code>sync</code></p><p>将数据同步写入磁盘</p><p><code>df</code></p><p>查看磁盘使用量，加-h可以️以较易阅读的KB/GB等格式显示</p><p><code>dump</code></p><p>备份文件系统</p><p><code>restore</code></p><p>恢复备份</p><p>RPM软件包管理</p><p>rpm -i 文件名（包括版本后缀名rpm）</p><p>安装软件（一般会加上详细信息v和显示进度条h，即-ivh）</p><p><code>rpm -e 文件名（就前面文件名）</code></p><p>卸载软件</p><p><code>rpm -U 文件名（包括新版本号和后缀名）</code></p><p>更新软件</p><p><code>rpm -K 文件名（包括版本后缀名）</code></p><p>验证该安装包是否被恶意修改，ok则说明没问题</p><p><code>rpm -V 文件名（就前面文件名）</code></p><p>查看该文件安装后是否修改过</p><p><code>rpm -qa</code></p><p>显示所有rpm包安装的文件</p><p><code>rpm -qi 文件名（就前面文件名）</code></p><p><code>显示该软件详细信息</code>，如果是为安装的软件想要查看其详细信息就加个p，即-qip</p><p><code>rpm -ql 文件名（就前面文件名）</code></p><p>列出属于这个软件的文件，未安装的就-qlp</p><p>yum软件管理</p><p>yum install 软件名（就软件名）</p><p>安装软件</p><p><code>yum remove 软件名</code></p><p>删除软件</p><p><code>yum update 软件名</code></p><p>更新软件</p><p>yum search 关键字</p><p>搜索包含该关键字的软件</p><p><code>yum list all/installed/recent/updates</code></p><p>列出所有/安装/最近/更新的软件信息</p><p><code>yum info 软件名</code></p><p>查看该软件详细信息</p><blockquote><p>引用作者：dawsonenjoy</p></blockquote><blockquote><p>引用链接：<a href="https://www.jianshu.com/p/042593bd1bb6" target="_blank" rel="noopener">https://www.jianshu.com/p/042593bd1bb6</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linxu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle取月份-不带前面的0</title>
      <link href="/2018/12/03/oracle-qu-yue-fen-bu-dai-qian-mian-de-0/"/>
      <url>/2018/12/03/oracle-qu-yue-fen-bu-dai-qian-mian-de-0/</url>
      
        <content type="html"><![CDATA[<p>第一： 利用to_number的函数转换自动截0 </p><pre class=" language-SQL"><code class="language-SQL">select to_number(to_char(sysdate,'mm'))||'-'||to_number(to_char(sysdate,'dd')) from dual; </code></pre><p>第二： 利用ltrim函数加固定参数去掉0 </p><pre class=" language-SQL"><code class="language-SQL">select ltrim(to_char(sysdate,'mm'),'0')||'-'||ltrim(to_char(sysdate,'dd'),'0') from dual; </code></pre><p>上面两种方法实现了我们所需要的，共同的特点是都用到两个函数了，但有没有更简单的方法呢 ？ 我猜有的人肯定就想到了oracle是不是有这样的格式呢 select to_char(sysdate,’m-d’) from dual; 很可惜，提示错误，日期格式不存在 。不要灰心，我们继续… </p><p>第三：利用函数的特性。 </p><p>我们知道 select sysdate from dual ; 得到的值是：2010-1-8 11:06:18 那有没有函数直接获取到月份1和日8，  <a href="http://www.2cto.com" target="_blank" rel="noopener">www.2cto.com</a>  </p><p>我们的猜测是正确的，确实有这样的函数，出现了下面的函数， </p><pre class=" language-SQL"><code class="language-SQL">select extract(month from sysdate) ||'-'|| extract(day from sysdate) month from dual; </code></pre><p>注意： extract 具体的用法找’google’吧 ，不会让你失望的。 又近了一步，满足了吧，不要满足了，下面还有。 </p><p>上面的方法有一个共同的特征，就是月和日都是分开取的，怎么样才能 合并到一起去，这样多好啊 ！ </p><p>看我们的第四种方法： </p><p>第四：巧用oracle自带的格式 </p><p><code>select to_char(sysdate,&#39;fmmm-dd&#39;) from dual;</code> </p><p>ps：the format_mask parameter begins with “FM”. This means that zeros and blanks are suppressed</p>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>oracle  ora00600错误代码</title>
      <link href="/2018/12/03/oracle-ora00600-cuo-wu-dai-ma/"/>
      <url>/2018/12/03/oracle-ora00600-cuo-wu-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>方法/步骤</p><p>进入CMD ,执行  set oracle_sid=orcl</p><p>运行  sqlplus scott/tiger as sysdba 2/2 分步阅读 最简单的解决方式： 1、shutdown immediate; 2、startup mount; 3、alter database open;  </p><p><img src="D:/YDYnotePad/qqA9A38C93AA41FA51E993A33E4E148182/69635811f9764d8badadfd92d6a62d1b/8a82b9011486.png" alt="img"></p><p> 2/2 如果第一步没解决，再进行下面的操作 1、shutdown immediate; 2、startup mount; 3、recover database using backup controlfile; 4、指定日志：输入你的最新的日志文件位置。 5、alter database open resetlogs; 6、shutdown immediate; 7、startup;</p><p><img src="D:/YDYnotePad/qqA9A38C93AA41FA51E993A33E4E148182/7d98a7b986074a1ea0b83f12eac9924e/3912b31bee58.png" alt="img"></p><p><a href="https://jingyan.baidu.com/article/90bc8fc89f3a5ff653640c27.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/90bc8fc89f3a5ff653640c27.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件测试</title>
      <link href="/2018/12/03/ruan-jian-ce-shi/"/>
      <url>/2018/12/03/ruan-jian-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>1，测试的划分</p><p><img src="D:/YDYnotePad/qqA9A38C93AA41FA51E993A33E4E148182/0efece6febee413bbae17aeeb3907595/clipboard.png" alt="img"></p><p>单元测试：</p><p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。</p><p>集成测试（也叫组装测试，联合测试）是单元测试的逻辑扩展。它最简单的形式是：把两个已经测试过的单元组合成一个组件，测试它们之间的接口。</p><p>系统测试是针对整个产品系统进行的测试，目的是验证系统是否满足了需求规格的定义，找出与需求规格不符或与之矛盾的地方，从而提出更加完善的方案。系统测试发现问题之后要经过调试找出错误原因和位置，然后进行改正。</p><p>验收测试是部署软件之前的最后一个测试操作。</p><p>2，静态测试和动态测试</p><p>静态测试:静态方法是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。对需求规格说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找错。</p><p>动态测试:实际的执行被测对象的程序代码，输入实现设计好的测试用例，检查程序代码运行得到的结果与测试用例中设计的预期结果之间是否有差异，判定实际结果与预测结果是否一致。</p><p>动态测试有四部分组成：设计测试用例，执行测试用例，分析比较输出结果，输出测试报告。</p><p>按是否运行程序划分</p><p>静态测试</p><p>静态方法是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。对需求规格说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找错。静态测试结果可用于进一步的查错，并为测试用例选取提供指导。</p><p>动态测试</p><p>实际的执行被测对象的程序代码，输入实现设计好的测试用例，检查程序代码运行得到的结果与测试用例中设计的预期结果之间是否有差异，判定实际结果与预测结果是否一致。</p><p>动态测试有四部分组成：设计测试用例，执行测试用例，分析比较输出结果，输出测试报告。</p><p>需求说明书、需求规格说明书</p><p>按照是否查看源代码分</p><p>白盒测试</p><p>基于软件内部设计和程序实现的测试方式。</p><p>黑盒测试</p><p>基于软件需求，而不是基于软件内部设计和程序实现的测试方式。</p><p>黑盒测试—功能测试</p><p>Functional testing（功能测试），也称为behavioral testing（行为测试），根据产品特性、操作描述和用户方案，测试一个产品的特性和可操作行为以确定它们满足设计需求。</p><p>黑盒测试—性能测试</p><p>通常验证软件的性能在正常环境和系统条件下重复使用是否还能满足性能指标同时发现系统中存在的性能瓶颈，起到优化系统的目的。</p><p>3,白盒测试和黑盒测试?</p><p>白盒测试:基于软件内部设计和程序实现的测试方式</p><p>黑盒测试:基于需求设计，不根据软件内部设计和程序实现的测试方法。</p><p>4，测试的项目周期</p><p>v模型</p><p><img src="D:/YDYnotePad/qqA9A38C93AA41FA51E993A33E4E148182/4474b97e61f2422bbc475dc9c6f0de49/clipboard.png" alt="img"></p><p>V模型即包含了底层测试又包含了高层测试；</p><p>底层测试：检验源代码质量的测试，如：单元测试。</p><p>高层测试：检验整个系统的需要，如：系统测试。</p><p>V模型清楚地标识出了软件开发的阶段。</p><p>它采用自顶向下逐步求精的方式把整个开发过程分成不同的阶段，每个阶段的工作都很明确，因此便于控制开发过程。当所有的阶段都完成之后，该软件的开发过程也随之结束。</p><p>V模型仅仅把测试过程作为在需求分析、概要设计、详细设计以及编码之后的一个阶段，容易使人误解测试是软件开发的最后一个阶段，是软件开发的从属。</p><p>V模型的另一个大缺点正是它自身的顺序性所导致的。到了测试阶段，程序已经完成，错误已经产生，很多前期的错误一直到测试阶段才发现，甚至无法发现，往往无从修改了。</p><p>同时实际的开发过程中，在需求阶段很难把用户的需求完全明确下来，因此，当需求变更时将会导致阶段反复，而且都要重复需求、设计、编码、测试等过程，返工量非常大，模型灵活性比较低。</p><p>V模型仅仅把测试过程作为在需求分析、概要设计、详细设计以及编码之后的一个阶段，容易使人误解测试是软件开发的最后一个阶段，是软件开发的从属。</p><p>V模型的另一个大缺点正是它自身的顺序性所导致的。到了测试阶段，程序已经完成，错误已经产生，很多前期的错误一直到测试阶段才发现，甚至无法发现，往往无从修改了。</p><p>同时实际的开发过程中，在需求阶段很难把用户的需求完全明确下来，因此，当需求变更时将会导致阶段反复，而且都要重复需求、设计、编码、测试等过程，返工量非常大，模型灵活性比较低。</p><p>等价类  划分等价的原则</p><p>定义：将输入的数据划分成若干类，从每类选取数据。选取的测试数据的测试结果代表这个类别。</p><p>分类：</p><p>有效等价类：对于程序来说，是合理的、有意义的数据。</p><p>无效等价类：对于程序来说，是不合理的、没有意义的数据。</p><p>划分等价类的原则</p><p>如果输入条件规定了取值范围或者取值个数，则可以确定一个有效等价类和</p><p>两个无效等价类。</p><p>如果输入条件规定了输入的集合，或规定了“必须如何”的条件，则可以确</p><p>定一个有效等价类和一个无效等价类。</p><p>如果输入条件是一个布尔值，可以确定一个有效等价类和一个无效等价类。</p><p>如果规定了输入一组n个数据，且程序对每个输入值分别进行处理，则为每一</p><p>个输入值确定一个有效等价类，共n个有效等价类，在这组值以外确定一个无效等价类。</p><p>如果规定了输入的数据必须遵守的n条规则，则可以确定满足所有需求的一个</p><p>有效等价类，和违反每条规则的n条无效等价类。</p><p>设计一个新的测试用例，使其尽量多的覆盖已经列出的尚未被覆盖的有效等价类，直到所有的有效等价类都被覆盖为止。</p><p>设计一个新的测试用例，使其仅覆盖一个已经列出的尚未被覆盖的无效等价类，重复这一步，直到所有列出的无效等价类都被覆盖为止。</p><p>边界值-基础概念</p><p>场景法</p><p>判定表</p><p>因果图 选择题</p><p>用逻辑判断来</p><p>测试单元的需求分析</p><p>描绘单元，分解单元， 单元细化</p><p>分析需求测试的原则</p><p>完整的 ，正确性 ，一致性 可行性</p><p>软件测试中的风险以及风险管理</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark-Hadoop、Hive、Spark 之间是什么关系？</title>
      <link href="/2018/12/03/spark-hadoop-hive-spark-zhi-jian-shi-shi-me-guan-xi/"/>
      <url>/2018/12/03/spark-hadoop-hive-spark-zhi-jian-shi-shi-me-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>作者：Xiaoyu Ma</p><p>链接：<a href="https://www.zhihu.com/question/27974418/answer/38965760" target="_blank" rel="noopener">https://www.zhihu.com/question/27974418/answer/38965760</a></p><p>来源：知乎</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>大数据本身是个很宽泛的概念，Hadoop生态圈（或者泛生态圈）基本上都是为了处理超过单机尺度的数据处理而诞生的。你可以把它比作一个厨房所以需要的各种工具。锅碗瓢盆，各有各的用处，互相之间又有重合。你可以用汤锅直接当碗吃饭喝汤，你可以用小刀或者刨子去皮。但是每个工具有自己的特性，虽然奇怪的组合也能工作，但是未必是最佳选择。</p><p>大数据，首先你要能存的下大数据。</p><p>传统的文件系统是单机的，不能横跨不同的机器。HDFS（Hadoop Distributed FileSystem）的设计本质上是为了大量的数据能横跨成百上千台机器，但是你看到的是一个文件系统而不是很多文件系统。比如你说我要获取/hdfs/tmp/file1的数据，你引用的是一个文件路径，但是实际的数据存放在很多不同的机器上。你作为用户，不需要知道这些，就好比在单机上你不关心文件分散在什么磁道什么扇区一样。HDFS为你管理这些数据。</p><p>存的下数据之后，你就开始考虑怎么处理数据。虽然HDFS可以为你整体管理不同机器上的数据，但是这些数据太大了。一台机器读取成T上P的数据（很大的数据哦，比如整个东京热有史以来所有高清电影的大小甚至更大），一台机器慢慢跑也许需要好几天甚至好几周。对于很多公司来说，单机处理是不可忍受的，比如微博要更新24小时热博，它必须在24小时之内跑完这些处理。那么我如果要用很多台机器处理，我就面临了如何分配工作，如果一台机器挂了如何重新启动相应的任务，机器之间如何互相通信交换数据以完成复杂的计算等等。这就是MapReduce / Tez / Spark的功能。MapReduce是第一代计算引擎，Tez和Spark是第二代。MapReduce的设计，采用了很简化的计算模型，只有Map和Reduce两个计算过程（中间用Shuffle串联），用这个模型，已经可以处理大数据领域很大一部分问题了。</p><p>那什么是Map什么是Reduce？</p><p>考虑如果你要统计一个巨大的文本文件存储在类似HDFS上，你想要知道这个文本里各个词的出现频率。你启动了一个MapReduce程序。Map阶段，几百台机器同时读取这个文件的各个部分，分别把各自读到的部分分别统计出词频，产生类似</p><p>（hello, 12100次），（world，15214次）等等这样的Pair（我这里把Map和Combine放在一起说以便简化）；这几百台机器各自都产生了如上的集合，然后又有几百台机器启动Reduce处理。Reducer机器A将从Mapper机器收到所有以A开头的统计结果，机器B将收到B开头的词汇统计结果（当然实际上不会真的以字母开头做依据，而是用函数产生Hash值以避免数据串化。因为类似X开头的词肯定比其他要少得多，而你不希望数据处理各个机器的工作量相差悬殊）。然后这些Reducer将再次汇总，（hello，12100）＋（hello，12311）＋（hello，345881）= （hello，370292）。每个Reducer都如上处理，你就得到了整个文件的词频结果。</p><p>这看似是个很简单的模型，但很多算法都可以用这个模型描述了。</p><p>Map＋Reduce的简单模型很黄很暴力，虽然好用，但是很笨重。第二代的Tez和Spark除了内存Cache之类的新feature，本质上来说，是让Map/Reduce模型更通用，让Map和Reduce之间的界限更模糊，数据交换更灵活，更少的磁盘读写，以便更方便地描述复杂算法，取得更高的吞吐量。</p><p>有了MapReduce，Tez和Spark之后，程序员发现，MapReduce的程序写起来真麻烦。他们希望简化这个过程。这就好比你有了汇编语言，虽然你几乎什么都能干了，但是你还是觉得繁琐。你希望有个更高层更抽象的语言层来描述算法和数据处理流程。于是就有了Pig和Hive。Pig是接近脚本方式去描述MapReduce，Hive则用的是SQL。它们把脚本和SQL语言翻译成MapReduce程序，丢给计算引擎去计算，而你就从繁琐的MapReduce程序中解脱出来，用更简单更直观的语言去写程序了。</p><p>有了Hive之后，人们发现SQL对比Java有巨大的优势。一个是它太容易写了。刚才词频的东西，用SQL描述就只有一两行，MapReduce写起来大约要几十上百行。而更重要的是，非计算机背景的用户终于感受到了爱：我也会写SQL！于是数据分析人员终于从乞求工程师帮忙的窘境解脱出来，工程师也从写奇怪的一次性的处理程序中解脱出来。大家都开心了。Hive逐渐成长成了大数据仓库的核心组件。甚至很多公司的流水线作业集完全是用SQL描述，因为易写易改，一看就懂，容易维护。</p><p>自从数据分析人员开始用Hive分析数据之后，它们发现，Hive在MapReduce上跑，真鸡巴慢！流水线作业集也许没啥关系，比如24小时更新的推荐，反正24小时内跑完就算了。但是数据分析，人们总是希望能跑更快一些。比如我希望看过去一个小时内多少人在充气娃娃页面驻足，分别停留了多久，对于一个巨型网站海量数据下，这个处理过程也许要花几十分钟甚至很多小时。而这个分析也许只是你万里长征的第一步，你还要看多少人浏览了跳蛋多少人看了拉赫曼尼诺夫的CD，以便跟老板汇报，我们的用户是猥琐男闷骚女更多还是文艺青年／少女更多。你无法忍受等待的折磨，只能跟帅帅的工程师蝈蝈说，快，快，再快一点！</p><p>于是Impala，Presto，Drill诞生了（当然还有无数非著名的交互SQL引擎，就不一一列举了）。三个系统的核心理念是，MapReduce引擎太慢，因为它太通用，太强壮，太保守，我们SQL需要更轻量，更激进地获取资源，更专门地对SQL做优化，而且不需要那么多容错性保证（因为系统出错了大不了重新启动任务，如果整个处理时间更短的话，比如几分钟之内）。这些系统让用户更快速地处理SQL任务，牺牲了通用性稳定性等特性。如果说MapReduce是大砍刀，砍啥都不怕，那上面三个就是剔骨刀，灵巧锋利，但是不能搞太大太硬的东西。</p><p>这些系统，说实话，一直没有达到人们期望的流行度。因为这时候又两个异类被造出来了。他们是Hive on Tez / Spark和SparkSQL。它们的设计理念是，MapReduce慢，但是如果我用新一代通用计算引擎Tez或者Spark来跑SQL，那我就能跑的更快。而且用户不需要维护两套系统。这就好比如果你厨房小，人又懒，对吃的精细程度要求有限，那你可以买个电饭煲，能蒸能煲能烧，省了好多厨具。</p><p>上面的介绍，基本就是一个数据仓库的构架了。底层HDFS，上面跑MapReduce／Tez／Spark，在上面跑Hive，Pig。或者HDFS上直接跑Impala，Drill，Presto。这解决了中低速数据处理的要求。</p><p>那如果我要更高速的处理呢？</p><p>如果我是一个类似微博的公司，我希望显示不是24小时热博，我想看一个不断变化的热播榜，更新延迟在一分钟之内，上面的手段都将无法胜任。于是又一种计算模型被开发出来，这就是Streaming（流）计算。Storm是最流行的流计算平台。流计算的思路是，如果要达到更实时的更新，我何不在数据流进来的时候就处理了？比如还是词频统计的例子，我的数据流是一个一个的词，我就让他们一边流过我就一边开始统计了。流计算很牛逼，基本无延迟，但是它的短处是，不灵活，你想要统计的东西必须预先知道，毕竟数据流过就没了，你没算的东西就无法补算了。因此它是个很好的东西，但是无法替代上面数据仓库和批处理系统。</p><p>还有一个有些独立的模块是KV Store，比如Cassandra，HBase，MongoDB以及很多很多很多很多其他的（多到无法想象）。所以KV Store就是说，我有一堆键值，我能很快速滴获取与这个Key绑定的数据。比如我用身份证号，能取到你的身份数据。这个动作用MapReduce也能完成，但是很可能要扫描整个数据集。而KV Store专用来处理这个操作，所有存和取都专门为此优化了。从几个P的数据中查找一个身份证号，也许只要零点几秒。这让大数据公司的一些专门操作被大大优化了。比如我网页上有个根据订单号查找订单内容的页面，而整个网站的订单数量无法单机数据库存储，我就会考虑用KV Store来存。KV Store的理念是，基本无法处理复杂的计算，大多没法JOIN，也许没法聚合，没有强一致性保证（不同数据分布在不同机器上，你每次读取也许会读到不同的结果，也无法处理类似银行转账那样的强一致性要求的操作）。但是丫就是快。极快。</p><p>每个不同的KV Store设计都有不同取舍，有些更快，有些容量更高，有些可以支持更复杂的操作。必有一款适合你。</p><p>除此之外，还有一些更特制的系统／组件，比如Mahout是分布式机器学习库，Protobuf是数据交换的编码和库，ZooKeeper是高一致性的分布存取协同系统，等等。</p><p>有了这么多乱七八糟的工具，都在同一个集群上运转，大家需要互相尊重有序工作。所以另外一个重要组件是，调度系统。现在最流行的是Yarn。你可以把他看作中央管理，好比你妈在厨房监工，哎，你妹妹切菜切完了，你可以把刀拿去杀鸡了。只要大家都服从你妈分配，那大家都能愉快滴烧菜。</p><p>你可以认为，大数据生态圈就是一个厨房工具生态圈。为了做不同的菜，中国菜，日本菜，法国菜，你需要各种不同的工具。而且客人的需求正在复杂化，你的厨具不断被发明，也没有一个万用的厨具可以处理所有情况，因此它会变的越来越复杂。</p>]]></content>
      
      
      
        <tags>
            
            <tag> BIGDATA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ORACLE 加强学习</title>
      <link href="/2018/12/03/oracle-jia-qiang-xue-xi/"/>
      <url>/2018/12/03/oracle-jia-qiang-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="本次知识点"><a href="#本次知识点" class="headerlink" title="本次知识点"></a>本次知识点</h3><p><strong>1,掌握 oracle中把一张表中的数据复制到另一张表中去</strong></p><p><strong>2,oraclhe中创建索引</strong></p><p><strong>3, oracle中临时表的创建</strong></p><p><strong>4,oracle中创建视图</strong></p><p><strong>5,oracle中删除drop truncate delete 的区别</strong></p><p> <strong>6,oracle中创建储存过程</strong> </p><p><strong>7,oracle中创建游标</strong></p><p><strong>8,oracle中创建触发器</strong></p><p><strong>9,oracle 中的 恢复 表数据</strong></p><p><strong>10,oracle 中的导入导出操作</strong></p><h4 id="1，复制表"><a href="#1，复制表" class="headerlink" title="1，复制表"></a>1，复制表</h4><pre class=" language-sql"><code class="language-sql"><span class="token number">001</span>，如果没有表结构创建表结构<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 新表 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 旧表 <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">002</span>，向新表中复制数据<span class="token keyword">insert</span> <span class="token keyword">into</span> 新表 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 旧表<span class="token punctuation">;</span> <span class="token number">003</span>，同一个表中 将表中的<span class="token number">a</span>字段的值 赋给 <span class="token number">b</span>字段<span class="token keyword">update</span> 表名<span class="token keyword">set</span> A<span class="token operator">=</span>B<span class="token punctuation">;</span></code></pre><h4 id="2，索引"><a href="#2，索引" class="headerlink" title="2，索引"></a>2，索引</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>column_name<span class="token punctuation">[</span><span class="token punctuation">,</span>column_name…<span class="token punctuation">]</span><span class="token punctuation">)</span>；语法解析:<span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">unique</span> 指定索引列上的值必须是唯一的 称为 唯一索引（例如 主键）<span class="token number">2</span>，index_name 索引名称<span class="token number">3</span>，table_name 索引作用于的表<span class="token number">4</span><span class="token punctuation">,</span> colunm_name 指定对那个列 进行索引 如果是多个列 就称为 组合索引删除索引 <span class="token keyword">drop</span> <span class="token keyword">index</span> index_name</code></pre><p>3，临时表</p><pre class=" language-sql"><code class="language-sql">创建临时表有两种方式：     <span class="token number">1</span>、会话级临时表 <span class="token keyword">on</span> <span class="token keyword">commit</span> preserve <span class="token keyword">rows</span><span class="token punctuation">;</span>      当<span class="token keyword">COMMIT</span>的时候保留数据      <span class="token number">2</span>、事务级临时表  <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span>   当<span class="token keyword">COMMIT</span>的时候删除数据（默认情况） <span class="token number">1</span><span class="token punctuation">.</span>会话级临时表<span class="token punctuation">(</span>会话级临时表是指临时表中的数据只在会话生命周期之中存在<span class="token punctuation">)</span>格式:<span class="token keyword">Create</span> <span class="token keyword">Global</span> <span class="token keyword">Temporary</span> <span class="token keyword">Table</span> Temp_Name<span class="token punctuation">(</span>Col1 Type1<span class="token punctuation">,</span>Col2 Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">On</span> <span class="token keyword">Commit</span> Preserve <span class="token keyword">Rows</span><span class="token punctuation">;</span>eg:<span class="token keyword">create</span> <span class="token keyword">global</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> temp_tb <span class="token punctuation">(</span>col1 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> preserve <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> temp_tb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> temp_tb<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>事务级临时表<span class="token punctuation">(</span> 事务级临时表是指临时表中的数据只在事务生命周期中存在<span class="token punctuation">)</span>格式:<span class="token keyword">Create</span> <span class="token keyword">Global</span> <span class="token keyword">Temporary</span> <span class="token keyword">Table</span> Temp_Name<span class="token punctuation">(</span>Col1 Type1<span class="token punctuation">,</span>Col2 Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">On</span> <span class="token keyword">Commit</span> <span class="token keyword">Delete</span> <span class="token keyword">Rows</span><span class="token punctuation">;</span>例子<span class="token keyword">create</span> <span class="token keyword">global</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> temp_tb <span class="token punctuation">(</span>col1 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  temp_tb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  temp_tb<span class="token punctuation">;</span></code></pre><p>4，视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span>  <span class="token operator">or</span> repacle <span class="token keyword">view</span> view_name <span class="token punctuation">[</span><span class="token keyword">with</span> <span class="token keyword">read</span> only<span class="token punctuation">]</span>   <span class="token keyword">as</span>语法解析:<span class="token keyword">with</span> <span class="token keyword">read</span> only 加上的话 意为 创建只读视图查询：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_emp1<span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_emp1 <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%M%'</span><span class="token punctuation">;</span>修改：<span class="token keyword">update</span> v_emp1 <span class="token keyword">set</span> job<span class="token operator">=</span><span class="token string">'销售'</span> <span class="token keyword">where</span> ename<span class="token operator">=</span><span class="token string">'sb'</span><span class="token punctuation">;</span>添加：<span class="token keyword">insert</span> <span class="token keyword">into</span> v_emp2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2222'</span><span class="token punctuation">,</span><span class="token string">'sb2'</span><span class="token punctuation">,</span><span class="token string">'技术'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>删除：<span class="token keyword">delete</span> <span class="token keyword">from</span> v_emp2 <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">2222</span></code></pre><p>5，删除表drop delete truncate 区别</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span>：属于DML语句，删除数据库中指定条件的数据，相应语法：  <span class="token keyword">DELETE</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">;</span>        执行该语句后，需要使用<span class="token keyword">commit</span>进行提交才能反映到数据库中<span class="token keyword">truncate</span>：（不是trancate）属于DDL语句，快速的删除指定表的所有数据，         <span class="token keyword">TRUNCATE</span>在各种表上无论是大的还是小的都非常快，同其它DDL语句一样，都显示的有提交操作，因此，执                              行之后是无法进行回滚操作的。<span class="token keyword">TRUNCATE</span>将重新设置高水平线和所有的索引。在对整个表和索引进行完全浏览时，经过<span class="token keyword">TRUNCATE</span>操作后的表比<span class="token keyword">Delete</span>操作后的表要快得多。<span class="token keyword">TRUNCATE</span>不能触发任何<span class="token keyword">Delete</span>触发器。当表被清空后表和表的                            索引将重新设置成初始大小，而<span class="token keyword">delete</span>则不能。          语法：<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">drop</span>： 属于DDL语句，作用是删除整个表、删除指定的用户、删除指定的存储空间等等</code></pre><p>6，储存过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">procedure</span> 存储过程名称 <span class="token keyword">as</span><span class="token keyword">Begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">End</span> 存储过程名称；<span class="token operator">In</span> 只进不出<span class="token keyword">Out</span> 只出不进<span class="token operator">In</span> <span class="token keyword">out</span> 可进可出eg:<span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> proc1<span class="token punctuation">(</span> para1 varchar2<span class="token punctuation">,</span> para2 <span class="token keyword">out</span> varchar2<span class="token punctuation">,</span> para3 <span class="token operator">in</span> <span class="token keyword">out</span> varchar2 <span class="token punctuation">)</span> <span class="token keyword">as</span> v_name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">begin</span>  v_name :<span class="token operator">=</span><span class="token string">'zhangsf'</span><span class="token punctuation">;</span>  para3 :<span class="token operator">=</span> v_name<span class="token punctuation">;</span> dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'para3:'</span><span class="token operator">||</span>para3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>7,游标</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">cursor</span> cursor_name <span class="token keyword">as</span>显示游标隐式游标的属性 返回值类型 意 义SQL<span class="token operator">%</span><span class="token keyword">ROWCOUNT</span> 整型 代表 DML 语句成功执行的数据行数SQL<span class="token operator">%</span>FOUND 布尔型 值为 <span class="token boolean">TRUE</span> 代表插入、删除、更新或单行查询操作成功SQL<span class="token operator">%</span>NOTFOUND 布尔型 与 SQL<span class="token operator">%</span>FOUND 属性返回值相反SQL<span class="token operator">%</span>ISOPEN 布尔型 DML 执行过程中为真，结束后为假动态游标 强类型动态游标 弱类型动态游标eg：<span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>e_no number<span class="token punctuation">;</span>e_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e_sal number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span>e_no<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span>e_name<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span>e_sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>e_no emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>e_name emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>e_sal emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span>e_no<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span>e_name<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span>e_sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span> <span class="token operator">and</span> sal<span class="token operator">&lt;</span><span class="token number">3000</span><span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span>isopen <span class="token keyword">then</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'sql游标已打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'sql游标未打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> e_count number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'游标捕获的记录数：'</span><span class="token operator">||</span>sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> e_count number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'游标捕获的记录数：'</span><span class="token operator">||</span>sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">update</span> emp <span class="token keyword">set</span> ename<span class="token operator">=</span><span class="token string">'sb3'</span> <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'已更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'未更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">update</span> emp <span class="token keyword">set</span> ename<span class="token operator">=</span><span class="token string">'sb3'</span> <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span>found <span class="token keyword">then</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'已更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'未更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> emptype <span class="token operator">is</span> ref <span class="token keyword">cursor</span> <span class="token keyword">return</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>cu_emp emptype<span class="token punctuation">;</span>e_count number<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT1'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> e_count<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">open</span> cu_emp <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">open</span> cu_emp <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> customType <span class="token operator">is</span> ref <span class="token keyword">cursor</span><span class="token punctuation">;</span>e_count number<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>s salgrade<span class="token operator">%</span>rowType<span class="token punctuation">;</span>cType customType<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT1'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> e_count<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">open</span> cType <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> cType<span class="token operator">%</span>found loop      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'等级：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>grade<span class="token operator">||</span><span class="token string">'，最低薪资：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>losal<span class="token operator">||</span><span class="token string">'，最高薪资：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>hisal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> s<span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">close</span> cType<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">open</span> cType <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT'</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> cType<span class="token operator">%</span>found loop      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">close</span> cType<span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>8,触发器</p><pre class=" language-sql"><code class="language-sql">触发器的禁用和开启禁用触发器： <span class="token keyword">alter</span> <span class="token keyword">trigger</span> 触发器名称 <span class="token keyword">disable</span>启用触发器： <span class="token keyword">alter</span> <span class="token keyword">trigger</span> 触发器名称 <span class="token keyword">enable</span>行触发器针对行记录。语法结构：<span class="token keyword">Create</span> <span class="token keyword">trigger</span> 触发器名称Before<span class="token operator">/</span><span class="token keyword">after</span> 触发动作<span class="token keyword">For each row</span><span class="token keyword">On</span> 作用对象触发器内置变量 :old :new语句触发器针对整个表，作用整个表操作；语法结构：<span class="token keyword">Create</span> <span class="token keyword">trigger</span> 触发器名称Before<span class="token operator">/</span><span class="token keyword">after</span> 触发动作<span class="token keyword">On</span> 作用对象触发器谓词：INSERTING、UPDATING、DELETING</code></pre><p>9,恢复数据</p><pre class=" language-sql"><code class="language-sql">分为两种方法：scn和时间戳两种方法恢复。一、通过scn恢复删除且已提交的数据　　<span class="token number">1</span>、获得当前数据库的scn号　　　　<span class="token keyword">select</span> current_scn <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>切换到sys用户或system用户查询<span class="token punctuation">)</span> 　　　　查询到的scn号为：<span class="token number">1499223</span>　　<span class="token number">2</span>、查询当前scn号之前的scn　　　　<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">as</span> <span class="token keyword">of</span> scn <span class="token number">1499220</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>确定删除的数据是否存在，如果存在，则恢复数据；如果不是，则继续缩小scn号<span class="token punctuation">)</span>　　<span class="token number">3</span>、恢复删除且已提交的数据　　　　flashback <span class="token keyword">table</span> 表名 <span class="token keyword">to</span> scn <span class="token number">1499220</span><span class="token punctuation">;</span>二、通过时间恢复删除且已提交的数据　　<span class="token number">1</span>、查询当前系统时间　　　　<span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>　　<span class="token number">2</span>、查询删除数据的时间点的数据　　　　<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">as</span> <span class="token keyword">of</span> <span class="token keyword">timestamp</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2013-05-29 15:29:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>如果不是，则继续缩小范围<span class="token punctuation">)</span>　　<span class="token number">3</span>、恢复删除且已提交的数据　　　　flashback <span class="token keyword">table</span> 表名 <span class="token keyword">to</span> <span class="token keyword">timestamp</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2013-05-29 15:29:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　注意：如果在执行上面的语句，出现错误。可以尝试执行 <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">enable</span> <span class="token keyword">row</span> movement<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//允许更改时间戳</span></code></pre><p>10,导入导出数据</p><pre class=" language-sql"><code class="language-sql">Oracle的备份（是Oracle的版本只能是相邻的，不能垮版本。）备份方案有：逻辑备份（IMP<span class="token operator">&amp;</span>EXP命令进行备份）、物理文件备份（脱机及联机备份）、利用RMAN<span class="token punctuation">(</span>Recovery Manager<span class="token punctuation">)</span>的增量物理文件系统备份。逻辑备份分为四种模式：表空间备份<span class="token punctuation">(</span><span class="token keyword">tablespace</span><span class="token punctuation">)</span>、表备份<span class="token punctuation">(</span><span class="token keyword">table</span><span class="token punctuation">)</span>、用户备份<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">)</span>和完全备份<span class="token punctuation">(</span><span class="token keyword">full</span><span class="token punctuation">)</span>。exp导出，imp导出命令<span class="token comment" spellcheck="true">-- 全量导出 exp system/manager@TEST file=d:\daochu.dmp full=y  -- 将数据库中system用户与sys用户的表导出 exp system/manager@TEST file=d:\daochu.dmp owner=(system,sys)  -- 将数据库中的表table1中的字段filed1以"00"打头的数据导出 exp system/manager@TEST file=d:\daochu.dmp tables=(table1) query=\" where filed1 like '00%'\"  -- 将数据库中的表table1/table2导出 exp system/manager@TEST file=d:\daochu.dmp tables=(table1,table2)</span>导入imp system<span class="token operator">/</span>manager<span class="token variable">@TEST</span> <span class="token keyword">file</span><span class="token operator">=</span><span class="token number">d</span>:\daochu<span class="token punctuation">.</span>dmp <span class="token keyword">tables</span><span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span><span class="token number">4</span>，将一个用户所属的数据导入另一个用户imp system<span class="token operator">/</span>manager <span class="token keyword">file</span><span class="token operator">=</span>tank log<span class="token operator">=</span>tank fromuser<span class="token operator">=</span>seapark touser<span class="token operator">=</span>seapark_copyimp system<span class="token operator">/</span>manager <span class="token keyword">file</span><span class="token operator">=</span>tank log<span class="token operator">=</span>tank fromuser<span class="token operator">=</span>seapark<span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span> touser<span class="token operator">=</span>seapark_copy<span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span><span class="token punctuation">;</span>（imp mk<span class="token operator">/</span>mk <span class="token keyword">file</span><span class="token operator">=</span><span class="token number">d</span>:\daochu<span class="token punctuation">.</span>dmp fromuser<span class="token operator">=</span>mk touser<span class="token operator">=</span>cyll）（导出 导入的话 要是由执行导出的用户进行导入操作）exp help<span class="token operator">=</span>y 导入帮助imp help<span class="token operator">=</span>y 导出帮助</code></pre><p>用户 表空间</p><pre class=" language-sh"><code class="language-sh">--显示  用户下面的所有表select * from tab;--- 查看用户下面的永久表空间select default_tablespace from user_users;---查看临时表空间  和用户状态 select *from user_users--更改用户的 永久表空间alter user user(操作的用户) default tablespace tablespacename(将要设置的默认表空间名称)--修改 新添加用户的默认表空间alter database default tablespace tablespaceName--如果默认表空间不存在  则下面有创建表空间的语句create tablespace tablepaceName datafile datafile size 500m autoextend on;--删除  一个用户drop user cyll cascade;eg:create tablespace tjsgbb DATAFILE 'tjsgbb.ora' size 500M AUTOEXTEND ON;create user tom identified by cat default tablespace tjsgbb;grant connect to tom;grant resource to tom;grant dba to tom;</code></pre><p>oracle 用户</p><pre class=" language-sql"><code class="language-sql">Oracle 用户分两种，一种是系统用户 sys system ；另外一种是普通用户；视图 dba_users 存储着所有用户信息；创建用户：<span class="token keyword">Create</span> <span class="token keyword">user</span> 用户名 identified <span class="token keyword">by</span> 密码 <span class="token keyword">default</span> <span class="token keyword">tablespace</span> 表空间授予 <span class="token keyword">session</span> 权限：<span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">session</span> <span class="token keyword">to</span> TEST<span class="token punctuation">;</span>锁定和开启帐号：<span class="token keyword">alter</span> <span class="token keyword">user</span> TEST account <span class="token keyword">lock</span> <span class="token operator">/</span> unlock <span class="token punctuation">;</span>修改用户密码：<span class="token keyword">alter</span> <span class="token keyword">user</span> TEST identified <span class="token keyword">by</span> <span class="token number">123</span> <span class="token punctuation">;</span>删除用户： <span class="token keyword">drop</span> <span class="token keyword">user</span> TEST <span class="token keyword">cascade</span> <span class="token punctuation">;</span> 删除用户，并且把用户下的对象删除，比如表，视图，触发器等。</code></pre><p>oracle 权限</p><pre class=" language-sql"><code class="language-sql">Oracle 权限分为系统权限和对象权限；系统权限是 Oracle 内置的，与具体对象无关的权限，比如创建表的权限，连接数据库权限；对象权限就是对具体对象，比如表，视图，触发器等的操作权限；系统权限视图：system_privilege_map权限分配视图：dba_sys_privs回收系统权限 <span class="token keyword">revoke</span> 权限 <span class="token keyword">from</span> 用户对象权限分配用户表权限视图：dba_tab_privs给对象授权 <span class="token keyword">grant</span> 权限 <span class="token keyword">on</span> 对象 <span class="token keyword">to</span> 用户 <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>回收权限：<span class="token keyword">revoke</span> 对象权限 <span class="token keyword">on</span> 对象 <span class="token keyword">from</span> 用户；</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 安装 oracle </title>
      <link href="/2018/10/31/docker-an-zhuang-oracle/"/>
      <url>/2018/10/31/docker-an-zhuang-oracle/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装docker并启动docker服务"><a href="#1-安装docker并启动docker服务" class="headerlink" title="1. 安装docker并启动docker服务"></a>1. 安装docker并启动docker服务</h4><pre class=" language-shell"><code class="language-shell"> sudo yum install docker（安装 docker） sudo systemctl start docker 或者 service docker start</code></pre><h4 id="2-下载oracle-xe-11g镜像"><a href="#2-下载oracle-xe-11g镜像" class="headerlink" title="2. 下载oracle-xe-11g镜像"></a>2. 下载oracle-xe-11g镜像</h4><pre class=" language-sh"><code class="language-sh">sudo docker pull sath89/oracle-xe-11g  </code></pre><p>下载后执行 sudo docker ps –a 查看本地存在的所有镜像</p><h4 id="3-运行oracle镜像为容器-并将oracle容器的8080-和1521端口映射到本机的8080-和1521端口"><a href="#3-运行oracle镜像为容器-并将oracle容器的8080-和1521端口映射到本机的8080-和1521端口" class="headerlink" title="3. 运行oracle镜像为容器,并将oracle容器的8080 和1521端口映射到本机的8080 和1521端口."></a>3. 运行oracle镜像为容器,并将oracle容器的8080 和1521端口映射到本机的8080 和1521端口.</h4><pre class=" language-sh"><code class="language-sh">sudo docker run -p 8080:8080 -p 1521:1521 --name oracle-xe-11g -d sath89/oracle-xe-11g</code></pre><p>在阿里云服务器  上进行的部署 部署完 记得开放相应的端口号</p><h4 id="4-启动oracle-xe-11g容器"><a href="#4-启动oracle-xe-11g容器" class="headerlink" title="4.启动oracle-xe-11g容器"></a>4.启动oracle-xe-11g容器</h4><pre class=" language-sh"><code class="language-sh">sudo docker start oracle-xe-11g</code></pre><p>至此配置完毕 ,浏览器访问localhost:8080/apex</p><h4 id="5-登录oracle容器-然后执行sqlplus命令"><a href="#5-登录oracle容器-然后执行sqlplus命令" class="headerlink" title="5.登录oracle容器,然后执行sqlplus命令"></a>5.登录oracle容器,然后执行sqlplus命令</h4><p>账号<strong><em>,密码</em></strong></p><pre class=" language-sh"><code class="language-sh">sudo docker  exec -it oracle-xe-11g /bin/bash</code></pre><h4 id="5-plsql-远程连接-库"><a href="#5-plsql-远程连接-库" class="headerlink" title="5.plsql 远程连接 库"></a>5.plsql 远程连接 库</h4><p>docker 查看</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> parameter service_names</code></pre><p>新建的admin目录下创建一个tnsnames.ora的文件，写入文件配置：</p><pre class=" language-sql"><code class="language-sql">MyDB<span class="token operator">=</span>    <span class="token punctuation">(</span>DESCRIPTION <span class="token operator">=</span>        <span class="token punctuation">(</span>ADDRESS <span class="token operator">=</span> <span class="token punctuation">(</span>PROTOCOL <span class="token operator">=</span> TCP<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span> xxx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT <span class="token operator">=</span> <span class="token number">1521</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>CONNECT_DATA <span class="token operator">=</span>            <span class="token punctuation">(</span>SERVER <span class="token operator">=</span> DEDICATED<span class="token punctuation">)</span>            <span class="token punctuation">(</span>SERVICE_NAME <span class="token operator">=</span> xe<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span></code></pre><h4 id="创建表空间-创建用户-授权操作"><a href="#创建表空间-创建用户-授权操作" class="headerlink" title="创建表空间 创建用户 授权操作"></a>创建表空间 创建用户 授权操作</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> tjsgbb DATAFILE <span class="token string">'tjsgbb.ora'</span> size 500M AUTOEXTEND <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> tom identified <span class="token keyword">by</span> cat <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tjsgbb<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">connect</span> <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">grant</span> resource <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">create</span> yzh identified <span class="token keyword">by</span> nice <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tjsgbb<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">connect</span> <span class="token keyword">to</span> yzh<span class="token punctuation">;</span><span class="token keyword">grant</span> resource <span class="token keyword">to</span> yzh<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> yzh<span class="token punctuation">;</span></code></pre><blockquote><p>可能会用到的命令</p><pre class=" language-sh"><code class="language-sh">docker stop [容器id]docker rm [容器id]</code></pre></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>崔永元还是输了...</title>
      <link href="/2018/10/31/cui-yong-yuan-huan-shi-shu-liao/"/>
      <url>/2018/10/31/cui-yong-yuan-huan-shi-shu-liao/</url>
      
        <content type="html"><![CDATA[<h3 id="崔永元还是输了"><a href="#崔永元还是输了" class="headerlink" title="崔永元还是输了"></a>崔永元还是输了</h3><p>大囯魂<br>01<br>这是一个娱乐至死的时代。<br>昨天上午10点，可以支撑逾亿人次同时访问的微博，竟然一时间系统瘫痪。<br>背后的原因，只是因为娱乐圈当红小花赵丽颖发了一条微博。<br>她结婚了，对象是同为娱乐明星的冯绍峰。<br>短短的40多分钟，赵丽颖结婚的微博，转发量就超过了20万次，评论36万条，点赞接近130万。</p><p>明星结婚，八方来贺。<br>回想起来，整个10月，充斥我们眼球的范冰冰、张雨绮、李湘……无一例外，都是唱歌演戏的明星。<br>信息爆炸的今天，其实每个人的时间都很有限，每一双眼睛的焦点都很宝贵。<br>给了范冰冰，给了赵丽颖，就给不了那些站在时代的背光面，迎着千军万马，也要逆流而上的真正英雄们。<br>哪有什么岁月静好，不过有人在替你负重前行。<br>正是他们，为我们撑起了一片现世安稳的蓝天，让我们可以怡然自得地嗑着瓜子刷微博，聊着八卦追明星。<br>是的，这也是一个全民健忘的时代。<br>同样是在微博上，爆出范冰冰丑闻，引发娱乐圈地震的孤胆英雄崔永元，发表了一篇文章：《一声长叹一声雷》。<br>整整10天过去了，转发量至今也没突破2万。<br>英雄枯骨无人问，明星家事天下知。<br>这不是时代的悲哀，因为这个时代和过去五千年的每个时代都一样，不知悲欢，不问冷暖。<br>赋予一个时代温度的，是身处其中的人。是你、是我、是他，是你们、是我们、是他们。<br>没错，这就是你我的悲哀，是身处这个时代的每一个人的悲哀。<br>02<br>如果问：21世纪的第一个十年，全中国最火的电视节目是什么？<br>毫无疑问，答案只能是崔永元的《实话实说》。<br>央视纪录片之父陈虻说：中国所有的主持人，没有一个能超过崔永元。<br>崔永元曾经有多火？<br>如果你不清楚，问问你们的父母就知道了。<br>他是当年全中国所有男人的人生偶像，所有女人的梦中情人。<br>但是忽然有一天，身边的人都说他疯了。<br>因为他放着好好的主持人不做，自费100万跑到美国去拍纪录片，跑到微博上怼方舟子，只为了解开转基因背后的真相。<br>一夜之间，他成了“病人崔永元。”<br>人们都说小崔得了抑郁症，精神已经不正常了。<br>可吊诡的是，暗地里一波又一波的神秘说客，却找上了门。<br>他们劝小崔放弃对转基因的调查，封口费高达2亿！<br>背后的真相，不言而喻。<br>2亿是多少？范冰冰偷税漏税那么多年，也才罚了9个亿。<br>崔永元只要动一下嘴皮子，2亿就到手了。<br>可是他没有。<br>他说：“做男人要有骨气，饿死也不答应他们！”<br>骨气，一个多么熟悉的词，一个多么陌生的词。<br>熟悉，是因为我们自小就听过：“富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。”<br>陌生，是因为上一次见到这种骨气，还要回溯到120年前。<br>北京宣武门外的菜市口刑场上，33岁的谭嗣同对着屠刀高喊：我自横刀向天笑，去留肝胆两昆仑。<br>在中国人血液里冷却了120年的骨气，终于在崔永元身上又沸腾了。<br>03<br>故事还没有结束，因为在这个朗朗乾坤下，仍然有数不清的污秽浊流。<br>这一次，崔永元决意以一己之力，单挑整个娱乐圈。<br>一纸阴阳合同，多少影视公司的股价应声跌停，多少光鲜亮丽的明星，露出了丑陋罪恶的真面目。<br>可是还不够，在微博长文《一声叹息一声雷》中，更大的利益集团浮出水面。</p><p>崔永元不是病了，他是“疯了”。<br>这个今年已经55岁的“老疯子”，妄想以一人之力，对抗国际巨星，对抗上市公司，对抗世家大族，对抗某局某所……<br>蚍蜉撼树，凭的是一腔孤勇！<br>螳臂挡车，端的是一副肉躯！<br>危险吗？当然危险。<br>崔永元不知道吗？当然知道。</p><p>一个连死都不怕的人，真的就无懈可击了吗？<br>不，是人就有软肋。<br>崔永元的软肋，就是他的女儿。她的信息被不法分子公开，她的人身安全岌岌可危。<br>我们无法想象崔永元的内心，经过了何种的天人交战。我们能看见的，只是他在《一声叹息一声雷》里写道：<br>“昨晚，梦见了远在天堂的父亲，他说，记住三个字：不能退。”<br>想起柴静写过的一个关于崔永元的片段：<br>某年央视评论部的年会，他亲自张罗，请了赵本山、郭德纲、罗大佑……年会进行到一半，陆陆续续台下的人有些走了，或是打着手机出去了。<br>最后一个节目，他请来罗大佑。<br>罗大佑一直坐在场下，喝了两瓶酒，一直到11点多上场。<br>大佑也不登台，踩支凳子抱住吉它。一束光，对着话筒说“小崔，不怕，我也抑郁过，不是我们有病，是这个时代有病。”<br>是的，这个时代病了。<br>病在一边是歌舞升平，戏子们浓妆艳抹、粉饰太平，你方唱罢我登场；一边是暗流涌动，孤胆英雄扛着全世界的重量逆流而上，在悬崖边缘举步维艰。<br>而大众的目光，竟然全被明星所吸引，舍不得在英雄的身上多停留片刻。<br>只是，又有多少人还记得那句古训：“大厦将颠，非一木所支也。”<br>04<br>很多人都在问，崔永元最近怎么样了？<br>前两天，崔永元任教的中国传媒大学，传出了一家面馆开业的消息。<br>面馆就开在传媒大学的食堂里，名字叫做“崔永元真面”。<br>面馆不大，菜色也普通，就是市面上常见的重庆小面、牛肉面……可是份量却很足，均价只在10元左右。<br>这个价格在北京这样的一线城市，可以说绝无仅有。因为面馆不为盈利，开设的初衷，就是资助在校的贫困学生。<br>消息传出以后，很多人慕名前往。有人说：<br>吃着吃着，眼泪就禁不住掉进碗里。因为小崔在此时，连个人安危都不保的情况下，还张罗着在学校开个良心面馆，资助贫困学生……<br>总有一种力量，让我们泪流满面。<br>今天，提起崔永元，总是让人想起作家今何在的成名小说《悟空传》。<br>“大圣，此去欲何?”<br>“踏南天，碎凌霄。”<br>“若一去不回？”<br>“便一去不回！”<br>时代需要英雄，英雄需要承担。<br>我们做不到，没关系。<br>但是有人替我们做到了，我们的目光，能不能从灯红酒绿的娱乐圈挪开一会儿，在他们的身上多停留一会儿？<br>为众人抱薪者, 不可使其冻毙于风雪；<br>为自由开路者, 不可使其困顿于荆棘！<br>崔永元的父亲，是一名参加过解放战争和抗美援朝的老兵。他曾在一篇回忆父亲的文章里写道：<br>“小时候很羡慕父亲只要上台讲话，底下就不断有掌声。那时，他的理想就是长大要做一个像父亲这样的人，到台上讲话台下就热烈鼓掌。”<br>成为父亲那样的人，崔永元做到了。<br>给予崔永元掌声，我们做到了吗？</p><p>作者：诗之源<br>链接：<a href="https://www.jianshu.com/p/2f836c1ccc16" target="_blank" rel="noopener">https://www.jianshu.com/p/2f836c1ccc16</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总有那么一些人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何看待 S8 RNG 2:3 G2</title>
      <link href="/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/"/>
      <url>/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/</url>
      
        <content type="html"><![CDATA[<h3 id="从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队"><a href="#从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队" class="headerlink" title="从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队"></a>从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队</h3><h4 id="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"><a href="#怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。" class="headerlink" title="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"></a>怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。</h4><h4 id="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"><a href="#提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。" class="headerlink" title="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"></a>提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。</h4><h4 id="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"><a href="#但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧" class="headerlink" title="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"></a>但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧</h4><blockquote><blockquote><blockquote><p>我是真的心疼mlxg。永远都在临危救主，永远接锅就上，可惜今天却捞不动这迷一样的队友和教练组。你尽管膨胀，不吸取教训，明年rng还是这个b样，觉得自己能续杯，结果反向拿个八强游泳回来。</p></blockquote></blockquote></blockquote><p>我只想说  没有输给别人 纯粹输给了自己 </p><p><a href="https://www.zhihu.com/question/299320524/answer/514794733" target="_blank" rel="noopener">引用知乎作者：我说海盗才有营养</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 英雄联盟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell 脚本学习</title>
      <link href="/2018/10/15/shell-jiao-ben-xue-xi/"/>
      <url>/2018/10/15/shell-jiao-ben-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="shell命令-是一种运行在linux系统上的语言-便于直接操作文件"><a href="#shell命令-是一种运行在linux系统上的语言-便于直接操作文件" class="headerlink" title="shell命令  是一种运行在linux系统上的语言  便于直接操作文件"></a>shell命令  是一种运行在linux系统上的语言  便于直接操作文件</h2><h3 id="脚本的格式"><a href="#脚本的格式" class="headerlink" title="脚本的格式"></a>脚本的格式</h3><pre class=" language-shell"><code class="language-shell">  　vim shell.sh　　　　　　#!/bin/bash　　　　　　　　//声明脚本解释器，这个‘#’号不是注释，其余是注释　　　　　　#Program:　　　　　　　　　//程序内容说明　　　　　　#History:　　　　　　　　　　//时间和作者</code></pre><h3 id="shell变量的种类"><a href="#shell变量的种类" class="headerlink" title="shell变量的种类"></a>shell变量的种类</h3><blockquote><blockquote><blockquote><p>　　用户自定义变量：由用户自己定义、修改和使用</p></blockquote></blockquote></blockquote><p>　　　　与定义变量：Bash与定义的特殊变量，不能直接修改</p><p>　　　　位置变量：通过命令行给程序传递执行的参数</p><p>　　　　1、定义变量：</p><p>　　　　　　　　变量名要以英文字母或下划线开头，区分大小写。</p><p>　　　　　　　　格式：变量名=值</p><p>　　　　　　　　输出变量：echo $变量名</p><p>　　　　2、键盘输入为变量内容：</p><p>　　　　　　　　格式：read [-p “信息”] 变量名</p><p>　　　　　　　　　　　如：read -p “pewase input your name:” name</p><p>　　　　3、不同引号对变量的作用</p><p>　　　　　　双引号””：可解析变量，$符号为变量前缀。</p><p>　　　　　　单引号’’：不解析变量，$为普通字符。</p><p>　　　　　　反引号<code></code>：将命令执行的结果输出给变量。</p><h3 id="shell-条件测试"><a href="#shell-条件测试" class="headerlink" title="shell 条件测试"></a>shell 条件测试</h3><p>1、test命令：</p><p>　　　　　　用途：测试特定的表达式是否成立，当条件成立时，命令执行后的返回值为0，否则为其他数字。</p><p>　　　　　　格式：test 条件表达式 [ 条件表达式 ]   (注意：[]与表达式之间存在空格)</p><p>　　　　2、常见的测试类型：</p><p>　　　　　　测试文件状态</p><p>　　　　　　　　格式：[ 操作符 文件或目录 ]</p><p>　　　　　　　　　　如：if [ -d /etc ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “exists”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “not exists”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　常见的测试操作符：</p><p>　　　　　　　　　　-d:测试是否为目录</p><p>　　　　　　　　　　-e:测试目录或文件是否存在</p><p>　　　　　　　　　　-f:测试是否为文件</p><p>　　　　　　　　　　-r:测试当前用户是否有读权限</p><p>　　　　　　　　　　-w:测试当前用户是否有写权限</p><p>　　　　　　　　　　-x:测试当前用户是否有执行权限</p><p>　　　　　　　　　　-L:测试是否为符号链接文件</p><p>　　　　　　字符串比较</p><p>　　　　　　　　格式：[ 字符串1 = 字符串2 ]</p><p>　　　　　　　　　　　[ 字符串1 != 字符串2 ]</p><p>　　　　　　　　　　　[ -z 字符串 ]</p><p>　　　　　　　　　　如：read -p ‘name:’ name</p><p>　　　　　　　　　　　　read -p ‘pass:’ pass</p><p>　　　　　　　　　　　　if [ $name = ‘admin’ ] &amp;&amp; [ $pass = ‘123’]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo ‘登录成功’</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo ‘登录失败’</p><p>　　　　　　　　　　　　if</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　=:字符串内容相同。</p><p>　　　　　　　　　　!=:字符串内容不同。</p><p>　　　　　　　　　　-z:字符串内容为空。</p><p>　　　　　　整数值比较</p><p>　　　　　　　　格式：[ 整数1 操作符 整数2 ]</p><p>　　　　　　　　　　如：age=30</p><p>　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　-eq:等于</p><p>　　　　　　　　　　-ne:不等于</p><p>　　　　　　　　　　-gt:大于</p><p>　　　　　　　　　　-lt:小于</p><p>　　　　　　　　　　-le:大于或等于</p><p>　　　　　　　　　　-ge:小于或等于</p><p>　　　　　　逻辑测试</p><p>　　　　　　　　格式：[ 表达式1 ] 操作符 [ 表达式2 ]</p><p>　　　　　　　　常用操作符：</p><p>　　　　　　　　　　-a或&amp;&amp;:逻辑与</p><p>　　　　　　　　　　-o或||:逻辑或</p><p>　　　　　　　　　　!:逻辑非</p><h3 id="流程判断"><a href="#流程判断" class="headerlink" title="流程判断"></a>流程判断</h3><p>　1、条件判断</p><p>　　　　　　　a、if语句</p><p>　　　　　　　格式：</p><p>　　　　　　　　　　单分支：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　fi</p><p><code>`</code>bash　　　　　　　　<br>　　　　如：age=30</p><p>　　　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　　　fi</p><p>　　　　　　　　　　多分枝：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　elif　命令序列</p><p>　　　　　　　　　　　　fi</p><pre><code>　　　　　　　　　　　　如：```bash                          score=87　　　　　　　　　　　　　　if [ $score -lt 60 ];then　　　　　　　　　　　　　　　　echo &#39;60以下&#39;　　　　　　　　　　　　　　elif [ $score -gt 60 ] &amp;&amp; [ $score -lt 70 ];then　　　　　　　　　　　　　　　　echo &#39;60~70之间&#39;　　　　　　　　　　　　　　elif [ $score -ge 70 ] &amp;&amp; [ $score -lt 80 ];then　　　　　　　　　　　　　　　　echo &#39;70～ 80之间&#39;　　　　　　　　　　　　　　else　　　　　　　　　　　　　　　　echo &#39;优秀&#39;　　　　　　　　　　　　　　fi　　　　　　　　　　b、case　　　　　　　　　　格式：case $变量名称 in　　　　　　　　　　　　　　　&quot;第一个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　　　&quot;第二个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　*)　　　　　　//最后一个变量内容都会用*来代表其它值，不包含前面的变量内容　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　esac</code></pre><p>　　　　　　　　　　　　如：</p><pre class=" language-bash"><code class="language-bash">                            <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>　　　　　　　　　　　　　　　　start<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　 <span class="token keyword">echo</span> <span class="token string">'start MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　stop<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">'stop MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　*<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> start|stop"</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　esac</code></pre><p>　　　　2、循环控制</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　跳出本次循环：continue　　　　　　　　结束循环：break　　　　　　　　a、while循环　　　　　　　　格式：while <span class="token punctuation">[</span> 条件表达式 <span class="token punctuation">]</span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段落　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：num<span class="token operator">=</span>3　　　　　　　　　　　　<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> -gt 0 <span class="token punctuation">]</span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$num</span>　　　　　　　　　　　　　　num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$num<span class="token number">-1</span><span class="token variable">))</span></span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　b、for循环　　　　　　　　格式：for var <span class="token keyword">in</span> con1 con2 con3　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　如：　　　　　　　　　　　<span class="token keyword">for</span> i <span class="token keyword">in</span> user0 user1 user2 user3　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　格式：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token function">useradd</span> user<span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> 123 <span class="token operator">|</span> password --stdin_user<span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　3、函数使用　　　　　　　　定义一个函数：在程序的最前面　　　　　　　　　　<span class="token keyword">function</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>或者function 函数名<span class="token punctuation">{</span><span class="token punctuation">}</span>　　　　　　　　　　　　如：function printit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"your choice is <span class="token variable">$1</span>"</span>　　　　　　　　　　　　　　<span class="token punctuation">}</span>　　　　　　　　调用：直接使用函数名　　　　　　　　　　　　如：printit 1　　　　　　　　传递参数：函数名 参数1 参数1　　　　　　　　　　　　如：printit 2</code></pre><h3 id="五、Shell文本操作"><a href="#五、Shell文本操作" class="headerlink" title="五、Shell文本操作"></a>五、Shell文本操作</h3><p>　1、Find查找命令的使用</p><pre class=" language-sh"><code class="language-sh">　　　　　　　　find . -name "*.text"　　　　　　//在当前目录下查找已txt为后缀的文件　　　　　　　　fing .-name "[a-z]*"　　　　　　//在当前目录下查找开头字母的文件　　　　　　　　find /etc -name "host*"　　　　//查找/etc目录下以host开头的文件　　　　　　　　find . -perm 755　　　　　　　　//在当前目录下查找属性为755的文件　　　　　　　　find -user root　　　　　　　　//在当前目录下查找属主为root的文件　　　　　　　　find /var -mtime -5　　　　　　//在/var下查找更改时间在5天内的文件　　　　　　　　find /var -mtime +3　　　　　　//在/var下查找更改时间在3天以前的文件　　　　　　　　find /etc -type d　　　　　　　　//查找文件类型为d的目录文件　　　　　　　　find /etc -typt l　　　　　　　　//查找文件类型为l的链接文件　　　　　　　　find . -size +1000000c　　　　　//查找文件大小在1M的文件</code></pre><p>　　　　2、正则表达式</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　^linux　　　　　　　　//以linux开头的　　　　　　　　<span class="token variable">$php</span>　　　　　　　　//以php结尾的　　　　　　　　<span class="token keyword">.</span>　　　　　　　　　　//匹配任意单字符　　　　　　　　.+　　　　　　　　　　//匹配任意多个字符　　　　　　　　.*　　　　　　　　　　//匹配0个或多个字符　　　　　　　　<span class="token punctuation">[</span>0-9a-z<span class="token punctuation">]</span>　　　　　　　//匹配<span class="token punctuation">[</span><span class="token punctuation">]</span>内任意一个字符　　　　　　　　<span class="token punctuation">(</span>linux<span class="token punctuation">)</span>+　　　　　　　　//出现多次linux单词　　　　　　　　<span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span>　　　　　　　//web出现了2次以上　　　　　　　　\　　　　　　　　　　//转译</code></pre><p>　　　　3、grep详解</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　<span class="token function">grep</span> <span class="token string">"li qq"</span>*　　　　　　　　　　//在所有文件中查找li qq文件　　　　　　　　<span class="token function">grep</span> -c <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配到file　　　　　　　　<span class="token function">grep</span> -n <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配file，同时显示行和行号　　　　　　　　<span class="token function">grep</span> -i <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找file，并不区分大小写　　　　　　　　<span class="token function">grep</span> -v <span class="token string">"file"</span> a　　　　　　　　　　//在文件中过滤掉file所在的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"2017:22:5[0-9]"</span> a　　　　　//在文件中查找在时间在2017:22:50到59的所在行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^210]"</span> a　　　　　　　　//在文件中查找不号寒210的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"h*p"</span> a　　　　　　　　　　//查找包含h和p的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"[5-8][6-9][0-3]"</span> a　　　　//查找大于560小于893的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^d"</span> a　　　　　　　　　　//在文件中查找以d开头的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^d]"</span> a　　　　　　　　　　//在文件中查找不是以d开头的行</code></pre><p>####　　　　4、awk命令：</p><p>　　　　　　　　简介：awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>　　　　　　　　　　　　awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p><p>　　　　　　　　格式：awk ‘{pattern + action}’ {filenames}</p><p>　　　　　　　　　　　　pattern:查找内容</p><p>　　　　　　　　　　　　action:匹配规则</p><p>　　　　　　　　　　awk ‘{pring $0}’ access.log　　　　　　　　　　　　　　//查找文件中的每一列</p><p>　　　　　　　　　　awk ‘{print $1”\t”$7}’ access.log　　　　　　　　　　　//查找文件中第一列和第七列</p><p>　　　　　　　　　　cat file | awk ‘$0 !~ /192.168.31.25/‘|grep “php”　　　　//匹配Ip 地址的统计，!~为不匹配</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　　　例：for i <span class="token keyword">in</span> `cat /etc/passwd <span class="token operator">|</span> <span class="token function">head</span> <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print <span class="token variable">$1</span>}'</span>`　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　　　　-F---以什么符号分割　　　　　　　　　　　　　　head---去前多少行，默认是10行</code></pre><p>　　　　5、sed行定位使用<br>　　　　　　　　简介：sed是非交互式的编辑器。它不会修改文件，除非使用shell重定向来保存结果。默认情况下，所有的输出行都被打印到屏幕上。<br> 选项     功能<br> -e     进行多项编辑，即对输入行应用多条sed命令时使用<br> -n     取消默认的输出<br> -f     指定sed脚本的文件名<br><code>`</code>bash　　<br>　　　　　　sed -n ‘2’p file　　　　　　　　//只打印第二行，不打印其他行</p><p>　　　　　　　　sed -n ‘1,4’p file　　　　　　　//从第一行到第四行的记录</p><p>　　　　　　　　sed -n ‘/los/‘p file　　　　　　//打印匹配los的行</p><p>　　　　　　　　sed -n ‘4,/los/‘p file　　　　　//打印从第四行到匹配los的之间所有行</p><p>　　　　　　　　sed ‘1,2’d file　　　　　　　　//吧第一行和第二行全部删除</p><p>　　　　6、Uniq行定位使用</p><p>　　　　　　　　简介：uniq命令用于报告或忽略文件中的重复行，一般与sort命令结合使用。</p><p>　　　　　　　　语法 uniq(选项)(参数)</p><p>　　　　　　　　选项 ：</p><p>　　　　　　　　　　　-c或——count：在每列旁边显示该行重复出现的次数；</p><p>　　　　　　　　　　　-d或–repeated：仅显示重复出现的行列；</p><p>　　　　　　　　　　　-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</p><p>　　　　　　　　　　　-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</p><p>　　　　　　　　　　　-u或——unique：仅显示出一次的行列；</p><p>　　　　　　　　　　　-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</p><p>　　　　　　　　uniq -c file　　　　　　　　　　//打印紧挨的重复行出现的次数</p><p>　　　　　　　　uniq -d file　　　　　　　　　　//只打印重复的行</p><p>　　　　　　　　awk ‘{print $1}’ /var/log/httpd/access_log | sort|uniq -c　　　　　　　　//把apache网站的所有访问ip全部统计出来，并打印出统计次数。</p><p>　　　　7、spli行定位</p><p>　　　　　　　　简介：可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志。</p><p>　　　　　　　　语法：split（选项）（file）PREFIX</p><p>　　　　　　　　选项：</p><p>　　<br>　　-b：值为每一输出档案的大小，单位为 byte。<br>　　　　　　　　　　-C：每一输出档中，单行的最大 byte 数。<br>　　　　　　　　　　-d：使用数字作为后缀。<br>　　　　　　　　　　-l：值为每一输出档的列数大小。<br>　　　　　　　　　　PREFIX:代表前导符，可作为切割文件的前导文件。</p><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 命令 学习</title>
      <link href="/2018/09/19/git-ming-ling-xue-xi/"/>
      <url>/2018/09/19/git-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash">刚开始 初始化 一个 目录的时候 （注意编写文件的时候  选择  其他编辑工具  ue 或者 notepaid 格式选择utf-8）然后<span class="token function">cd</span> d:/github<span class="token function">git</span> init创建一个叫做  readme.txt 的文件<span class="token function">git</span> add 把文件添加到本地git库  （先进行 add）<span class="token function">git</span> commit -m <span class="token string">"wrote a readme file"</span> <span class="token punctuation">(</span>然后进行commit<span class="token punctuation">)</span></code></pre><pre class=" language-sh"><code class="language-sh">可以同时add  多个  然后一次性 commit然后  修改  一个 readme.txt 文件git statusgit diffgit addgit status</code></pre><blockquote><p><a href="https://blog.csdn.net/r8l8q8/article/details/80015330" target="_blank" rel="noopener">https://blog.csdn.net/r8l8q8/article/details/80015330</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何发布hexo 的 博客</title>
      <link href="/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/"/>
      <url>/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！"><a href="#在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！" class="headerlink" title="在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！"></a>在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！</h5><h3 id="创建-一个-博客"><a href="#创建-一个-博客" class="headerlink" title="创建 一个 博客"></a>创建 一个 博客</h3><pre class=" language-bash"><code class="language-bash"> hexo n <span class="token string">"my article"</span> <span class="token comment" spellcheck="true">#完整命令为hexo new,用于新建一篇名为“my article”的文章</span></code></pre><h2 id="Markdown-语法-常用命令"><a href="#Markdown-语法-常用命令" class="headerlink" title="Markdown 语法 常用命令"></a>Markdown 语法 常用命令</h2><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span></code></pre><h3 id="一、字体"><a href="#一、字体" class="headerlink" title="一、字体"></a>一、字体</h3><pre><code>**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><hr><blockquote><p>这是引用的内容</p><blockquote><blockquote><p>不信你看</p><blockquote><p>hello beijing  hello  shanghai   </p></blockquote></blockquote></blockquote></blockquote><hr><h3 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h3><blockquote><blockquote><p>三个或者三个以上的 - 或者 * 都可以。<br><code>`</code></p></blockquote></blockquote><hr><hr><hr><hr><pre><code>###  五、图片```java![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><pre class=" language-java"><code class="language-java">语法<span class="token operator">:</span><span class="token punctuation">[</span>超链接名<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span>title可加可不加<span class="token punctuation">[</span>简书<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jianshu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"超链接地址"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>超链接名<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>例<span class="token operator">:</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://doudouchen.cn"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>豆豆陈<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><a href="https://doudouchen.cn" target="_blank" rel="noopener">个人博客</a></p><h3 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h3><pre class=" language-java"><code class="language-java">语法：单行代码：代码之间分别用一个反引号包起来    `代码内容`代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre class=" language-bash"><code class="language-bash">在使用代码快的时候 注意要 在 ``` 后边加上 对应的编程 语言 感谢 </code></pre><p><a href="https://github.com/blinkfox">blinkfox</a>  的指导</p><p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h2><pre class=" language-sh"><code class="language-sh">hexo s</code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><ul><li>hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li></ul><h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a><strong>hexo new</strong></h2><pre><code>hexo new &quot;学习笔记  六&quot;</code></pre><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><ul><li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li></ul><h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a><strong>hexo d</strong></h2><pre><code>hexo d</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><ul><li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li></ul><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h2><pre><code>hexo clean</code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a><strong>hexo g</strong></h2><pre><code>hexo g</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><ul><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令；</li><li>hexo g 是 hexo generate 的缩写，命令效果一致。</li></ul><h2 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a><strong>hexo new page</strong></h2><pre><code>hexo new page aboutme</code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p><ul><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样可以随意修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ul><hr><blockquote><p>学习于简书 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/2018/09/11/docker/"/>
      <url>/2018/09/11/docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a> 机器上，也可以实现虚拟化。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><h2 id="hello-docker"><a href="#hello-docker" class="headerlink" title="hello docker !!!"></a>hello docker !!!</h2><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><pre class=" language-bash"><code class="language-bash">docker version</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="显示docker系统的信息"><a href="#显示docker系统的信息" class="headerlink" title="显示docker系统的信息"></a>显示docker系统的信息</h3><pre class=" language-bash"><code class="language-bash">docker info</code></pre><h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><pre class=" language-sh"><code class="language-sh">docker logs</code></pre><h3 id="故障检查"><a href="#故障检查" class="headerlink" title="故障检查"></a>故障检查</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker status</code></pre><h3 id="启动关闭docker"><a href="#启动关闭docker" class="headerlink" title="启动关闭docker"></a>启动关闭docker</h3><pre class=" language-sh"><code class="language-sh"> sudo service docker start|stop</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/10/hello-world/"/>
      <url>/2018/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo !!!"></a>hello hexo !!!</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">  hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">  hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash"> hexo generate 或者 hexo g</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash"> hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
