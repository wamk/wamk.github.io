<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>如何看待 S8 RNG 2:3 G2</title>
      <link href="/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/"/>
      <url>/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/</url>
      
        <content type="html"><![CDATA[<h3 id="从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队"><a href="#从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队" class="headerlink" title="从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队"></a>从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队</h3><h4 id="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"><a href="#怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。" class="headerlink" title="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"></a>怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。</h4><h4 id="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"><a href="#提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。" class="headerlink" title="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"></a>提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。</h4><h4 id="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"><a href="#但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧" class="headerlink" title="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"></a>但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧</h4><blockquote><blockquote><blockquote><p>我是真的心疼mlxg。永远都在临危救主，永远接锅就上，可惜今天却捞不动这迷一样的队友和教练组。你尽管膨胀，不吸取教训，明年rng还是这个b样，觉得自己能续杯，结果反向拿个八强游泳回来。</p></blockquote></blockquote></blockquote><p>我只想说  没有输给别人 纯粹输给了自己 </p><p><a href="https://www.zhihu.com/question/299320524/answer/514794733" target="_blank" rel="noopener">引用知乎作者：我说海盗才有营养</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 英雄联盟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell 脚本学习</title>
      <link href="/2018/10/15/shell-jiao-ben-xue-xi/"/>
      <url>/2018/10/15/shell-jiao-ben-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="shell命令-是一种运行在linux系统上的语言-便于直接操作文件"><a href="#shell命令-是一种运行在linux系统上的语言-便于直接操作文件" class="headerlink" title="shell命令  是一种运行在linux系统上的语言  便于直接操作文件"></a>shell命令  是一种运行在linux系统上的语言  便于直接操作文件</h2><h3 id="脚本的格式"><a href="#脚本的格式" class="headerlink" title="脚本的格式"></a>脚本的格式</h3><pre class=" language-shell"><code class="language-shell">  　vim shell.sh　　　　　　#!/bin/bash　　　　　　　　//声明脚本解释器，这个‘#’号不是注释，其余是注释　　　　　　#Program:　　　　　　　　　//程序内容说明　　　　　　#History:　　　　　　　　　　//时间和作者</code></pre><h3 id="shell变量的种类"><a href="#shell变量的种类" class="headerlink" title="shell变量的种类"></a>shell变量的种类</h3><blockquote><blockquote><blockquote><p>　　用户自定义变量：由用户自己定义、修改和使用</p></blockquote></blockquote></blockquote><p>　　　　与定义变量：Bash与定义的特殊变量，不能直接修改</p><p>　　　　位置变量：通过命令行给程序传递执行的参数</p><p>　　　　1、定义变量：</p><p>　　　　　　　　变量名要以英文字母或下划线开头，区分大小写。</p><p>　　　　　　　　格式：变量名=值</p><p>　　　　　　　　输出变量：echo $变量名</p><p>　　　　2、键盘输入为变量内容：</p><p>　　　　　　　　格式：read [-p “信息”] 变量名</p><p>　　　　　　　　　　　如：read -p “pewase input your name:” name</p><p>　　　　3、不同引号对变量的作用</p><p>　　　　　　双引号””：可解析变量，$符号为变量前缀。</p><p>　　　　　　单引号’’：不解析变量，$为普通字符。</p><p>　　　　　　反引号<code></code>：将命令执行的结果输出给变量。</p><h3 id="shell-条件测试"><a href="#shell-条件测试" class="headerlink" title="shell 条件测试"></a>shell 条件测试</h3><p>1、test命令：</p><p>　　　　　　用途：测试特定的表达式是否成立，当条件成立时，命令执行后的返回值为0，否则为其他数字。</p><p>　　　　　　格式：test 条件表达式 [ 条件表达式 ]   (注意：[]与表达式之间存在空格)</p><p>　　　　2、常见的测试类型：</p><p>　　　　　　测试文件状态</p><p>　　　　　　　　格式：[ 操作符 文件或目录 ]</p><p>　　　　　　　　　　如：if [ -d /etc ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “exists”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “not exists”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　常见的测试操作符：</p><p>　　　　　　　　　　-d:测试是否为目录</p><p>　　　　　　　　　　-e:测试目录或文件是否存在</p><p>　　　　　　　　　　-f:测试是否为文件</p><p>　　　　　　　　　　-r:测试当前用户是否有读权限</p><p>　　　　　　　　　　-w:测试当前用户是否有写权限</p><p>　　　　　　　　　　-x:测试当前用户是否有执行权限</p><p>　　　　　　　　　　-L:测试是否为符号链接文件</p><p>　　　　　　字符串比较</p><p>　　　　　　　　格式：[ 字符串1 = 字符串2 ]</p><p>　　　　　　　　　　　[ 字符串1 != 字符串2 ]</p><p>　　　　　　　　　　　[ -z 字符串 ]</p><p>　　　　　　　　　　如：read -p ‘name:’ name</p><p>　　　　　　　　　　　　read -p ‘pass:’ pass</p><p>　　　　　　　　　　　　if [ $name = ‘admin’ ] &amp;&amp; [ $pass = ‘123’]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo ‘登录成功’</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo ‘登录失败’</p><p>　　　　　　　　　　　　if</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　=:字符串内容相同。</p><p>　　　　　　　　　　!=:字符串内容不同。</p><p>　　　　　　　　　　-z:字符串内容为空。</p><p>　　　　　　整数值比较</p><p>　　　　　　　　格式：[ 整数1 操作符 整数2 ]</p><p>　　　　　　　　　　如：age=30</p><p>　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　-eq:等于</p><p>　　　　　　　　　　-ne:不等于</p><p>　　　　　　　　　　-gt:大于</p><p>　　　　　　　　　　-lt:小于</p><p>　　　　　　　　　　-le:大于或等于</p><p>　　　　　　　　　　-ge:小于或等于</p><p>　　　　　　逻辑测试</p><p>　　　　　　　　格式：[ 表达式1 ] 操作符 [ 表达式2 ]</p><p>　　　　　　　　常用操作符：</p><p>　　　　　　　　　　-a或&amp;&amp;:逻辑与</p><p>　　　　　　　　　　-o或||:逻辑或</p><p>　　　　　　　　　　!:逻辑非</p><h3 id="流程判断"><a href="#流程判断" class="headerlink" title="流程判断"></a>流程判断</h3><p>　1、条件判断</p><p>　　　　　　　a、if语句</p><p>　　　　　　　格式：</p><p>　　　　　　　　　　单分支：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　fi</p><p><code>`</code>bash　　　　　　　　<br>　　　　如：age=30</p><p>　　　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　　　fi</p><p>　　　　　　　　　　多分枝：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　elif　命令序列</p><p>　　　　　　　　　　　　fi</p><pre><code>　　　　　　　　　　　　如：```bash                          score=87　　　　　　　　　　　　　　if [ $score -lt 60 ];then　　　　　　　　　　　　　　　　echo &#39;60以下&#39;　　　　　　　　　　　　　　elif [ $score -gt 60 ] &amp;&amp; [ $score -lt 70 ];then　　　　　　　　　　　　　　　　echo &#39;60~70之间&#39;　　　　　　　　　　　　　　elif [ $score -ge 70 ] &amp;&amp; [ $score -lt 80 ];then　　　　　　　　　　　　　　　　echo &#39;70～ 80之间&#39;　　　　　　　　　　　　　　else　　　　　　　　　　　　　　　　echo &#39;优秀&#39;　　　　　　　　　　　　　　fi　　　　　　　　　　b、case　　　　　　　　　　格式：case $变量名称 in　　　　　　　　　　　　　　　&quot;第一个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　　　&quot;第二个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　*)　　　　　　//最后一个变量内容都会用*来代表其它值，不包含前面的变量内容　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　esac</code></pre><p>　　　　　　　　　　　　如：</p><pre class=" language-bash"><code class="language-bash">                            <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>　　　　　　　　　　　　　　　　start<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　 <span class="token keyword">echo</span> <span class="token string">'start MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　stop<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">'stop MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　*<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> start|stop"</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　esac</code></pre><p>　　　　2、循环控制</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　跳出本次循环：continue　　　　　　　　结束循环：break　　　　　　　　a、while循环　　　　　　　　格式：while <span class="token punctuation">[</span> 条件表达式 <span class="token punctuation">]</span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段落　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：num<span class="token operator">=</span>3　　　　　　　　　　　　<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> -gt 0 <span class="token punctuation">]</span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$num</span>　　　　　　　　　　　　　　num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$num<span class="token number">-1</span><span class="token variable">))</span></span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　b、for循环　　　　　　　　格式：for var <span class="token keyword">in</span> con1 con2 con3　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　如：　　　　　　　　　　　<span class="token keyword">for</span> i <span class="token keyword">in</span> user0 user1 user2 user3　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　格式：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token function">useradd</span> user<span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> 123 <span class="token operator">|</span> password --stdin_user<span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　3、函数使用　　　　　　　　定义一个函数：在程序的最前面　　　　　　　　　　<span class="token keyword">function</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>或者function 函数名<span class="token punctuation">{</span><span class="token punctuation">}</span>　　　　　　　　　　　　如：function printit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"your choice is <span class="token variable">$1</span>"</span>　　　　　　　　　　　　　　<span class="token punctuation">}</span>　　　　　　　　调用：直接使用函数名　　　　　　　　　　　　如：printit 1　　　　　　　　传递参数：函数名 参数1 参数1　　　　　　　　　　　　如：printit 2</code></pre><h3 id="五、Shell文本操作"><a href="#五、Shell文本操作" class="headerlink" title="五、Shell文本操作"></a>五、Shell文本操作</h3><p>　1、Find查找命令的使用</p><pre class=" language-sh"><code class="language-sh">　　　　　　　　find . -name "*.text"　　　　　　//在当前目录下查找已txt为后缀的文件　　　　　　　　fing .-name "[a-z]*"　　　　　　//在当前目录下查找开头字母的文件　　　　　　　　find /etc -name "host*"　　　　//查找/etc目录下以host开头的文件　　　　　　　　find . -perm 755　　　　　　　　//在当前目录下查找属性为755的文件　　　　　　　　find -user root　　　　　　　　//在当前目录下查找属主为root的文件　　　　　　　　find /var -mtime -5　　　　　　//在/var下查找更改时间在5天内的文件　　　　　　　　find /var -mtime +3　　　　　　//在/var下查找更改时间在3天以前的文件　　　　　　　　find /etc -type d　　　　　　　　//查找文件类型为d的目录文件　　　　　　　　find /etc -typt l　　　　　　　　//查找文件类型为l的链接文件　　　　　　　　find . -size +1000000c　　　　　//查找文件大小在1M的文件</code></pre><p>　　　　2、正则表达式</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　^linux　　　　　　　　//以linux开头的　　　　　　　　<span class="token variable">$php</span>　　　　　　　　//以php结尾的　　　　　　　　<span class="token keyword">.</span>　　　　　　　　　　//匹配任意单字符　　　　　　　　.+　　　　　　　　　　//匹配任意多个字符　　　　　　　　.*　　　　　　　　　　//匹配0个或多个字符　　　　　　　　<span class="token punctuation">[</span>0-9a-z<span class="token punctuation">]</span>　　　　　　　//匹配<span class="token punctuation">[</span><span class="token punctuation">]</span>内任意一个字符　　　　　　　　<span class="token punctuation">(</span>linux<span class="token punctuation">)</span>+　　　　　　　　//出现多次linux单词　　　　　　　　<span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span>　　　　　　　//web出现了2次以上　　　　　　　　\　　　　　　　　　　//转译</code></pre><p>　　　　3、grep详解</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　<span class="token function">grep</span> <span class="token string">"li qq"</span>*　　　　　　　　　　//在所有文件中查找li qq文件　　　　　　　　<span class="token function">grep</span> -c <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配到file　　　　　　　　<span class="token function">grep</span> -n <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配file，同时显示行和行号　　　　　　　　<span class="token function">grep</span> -i <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找file，并不区分大小写　　　　　　　　<span class="token function">grep</span> -v <span class="token string">"file"</span> a　　　　　　　　　　//在文件中过滤掉file所在的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"2017:22:5[0-9]"</span> a　　　　　//在文件中查找在时间在2017:22:50到59的所在行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^210]"</span> a　　　　　　　　//在文件中查找不号寒210的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"h*p"</span> a　　　　　　　　　　//查找包含h和p的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"[5-8][6-9][0-3]"</span> a　　　　//查找大于560小于893的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^d"</span> a　　　　　　　　　　//在文件中查找以d开头的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^d]"</span> a　　　　　　　　　　//在文件中查找不是以d开头的行</code></pre><p>####　　　　4、awk命令：</p><p>　　　　　　　　简介：awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>　　　　　　　　　　　　awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p><p>　　　　　　　　格式：awk ‘{pattern + action}’ {filenames}</p><p>　　　　　　　　　　　　pattern:查找内容</p><p>　　　　　　　　　　　　action:匹配规则</p><p>　　　　　　　　　　awk ‘{pring $0}’ access.log　　　　　　　　　　　　　　//查找文件中的每一列</p><p>　　　　　　　　　　awk ‘{print $1”\t”$7}’ access.log　　　　　　　　　　　//查找文件中第一列和第七列</p><p>　　　　　　　　　　cat file | awk ‘$0 !~ /192.168.31.25/‘|grep “php”　　　　//匹配Ip 地址的统计，!~为不匹配</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　　　例：for i <span class="token keyword">in</span> `cat /etc/passwd <span class="token operator">|</span> <span class="token function">head</span> <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print <span class="token variable">$1</span>}'</span>`　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　　　　-F---以什么符号分割　　　　　　　　　　　　　　head---去前多少行，默认是10行</code></pre><p>　　　　5、sed行定位使用<br>　　　　　　　　简介：sed是非交互式的编辑器。它不会修改文件，除非使用shell重定向来保存结果。默认情况下，所有的输出行都被打印到屏幕上。<br> 选项     功能<br> -e     进行多项编辑，即对输入行应用多条sed命令时使用<br> -n     取消默认的输出<br> -f     指定sed脚本的文件名<br><code>`</code>bash　　<br>　　　　　　sed -n ‘2’p file　　　　　　　　//只打印第二行，不打印其他行</p><p>　　　　　　　　sed -n ‘1,4’p file　　　　　　　//从第一行到第四行的记录</p><p>　　　　　　　　sed -n ‘/los/‘p file　　　　　　//打印匹配los的行</p><p>　　　　　　　　sed -n ‘4,/los/‘p file　　　　　//打印从第四行到匹配los的之间所有行</p><p>　　　　　　　　sed ‘1,2’d file　　　　　　　　//吧第一行和第二行全部删除</p><p>　　　　6、Uniq行定位使用</p><p>　　　　　　　　简介：uniq命令用于报告或忽略文件中的重复行，一般与sort命令结合使用。</p><p>　　　　　　　　语法 uniq(选项)(参数)</p><p>　　　　　　　　选项 ：</p><p>　　　　　　　　　　　-c或——count：在每列旁边显示该行重复出现的次数；</p><p>　　　　　　　　　　　-d或–repeated：仅显示重复出现的行列；</p><p>　　　　　　　　　　　-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</p><p>　　　　　　　　　　　-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</p><p>　　　　　　　　　　　-u或——unique：仅显示出一次的行列；</p><p>　　　　　　　　　　　-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</p><p>　　　　　　　　uniq -c file　　　　　　　　　　//打印紧挨的重复行出现的次数</p><p>　　　　　　　　uniq -d file　　　　　　　　　　//只打印重复的行</p><p>　　　　　　　　awk ‘{print $1}’ /var/log/httpd/access_log | sort|uniq -c　　　　　　　　//把apache网站的所有访问ip全部统计出来，并打印出统计次数。</p><p>　　　　7、spli行定位</p><p>　　　　　　　　简介：可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志。</p><p>　　　　　　　　语法：split（选项）（file）PREFIX</p><p>　　　　　　　　选项：</p><p>　　<br>　　-b：值为每一输出档案的大小，单位为 byte。<br>　　　　　　　　　　-C：每一输出档中，单行的最大 byte 数。<br>　　　　　　　　　　-d：使用数字作为后缀。<br>　　　　　　　　　　-l：值为每一输出档的列数大小。<br>　　　　　　　　　　PREFIX:代表前导符，可作为切割文件的前导文件。</p><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 命令 学习</title>
      <link href="/2018/09/19/git-ming-ling-xue-xi/"/>
      <url>/2018/09/19/git-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash">刚开始 初始化 一个 目录的时候 （注意编写文件的时候  选择  其他编辑工具  ue 或者 notepaid 格式选择utf-8）然后<span class="token function">cd</span> d:/github<span class="token function">git</span> init创建一个叫做  readme.txt 的文件<span class="token function">git</span> add 把文件添加到本地git库  （先进行 add）<span class="token function">git</span> commit -m <span class="token string">"wrote a readme file"</span> <span class="token punctuation">(</span>然后进行commit<span class="token punctuation">)</span></code></pre><pre class=" language-sh"><code class="language-sh">可以同时add  多个  然后一次性 commit然后  修改  一个 readme.txt 文件git statusgit diffgit addgit status</code></pre><blockquote><p><a href="https://blog.csdn.net/r8l8q8/article/details/80015330" target="_blank" rel="noopener">https://blog.csdn.net/r8l8q8/article/details/80015330</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>如何发布hexo 的 博客</title>
      <link href="/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/"/>
      <url>/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！"><a href="#在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！" class="headerlink" title="在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！"></a>在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！</h5><h3 id="创建-一个-博客"><a href="#创建-一个-博客" class="headerlink" title="创建 一个 博客"></a>创建 一个 博客</h3><pre class=" language-bash"><code class="language-bash"> hexo n <span class="token string">"my article"</span> <span class="token comment" spellcheck="true">#完整命令为hexo new,用于新建一篇名为“my article”的文章</span></code></pre><h2 id="Markdown-语法-常用命令"><a href="#Markdown-语法-常用命令" class="headerlink" title="Markdown 语法 常用命令"></a>Markdown 语法 常用命令</h2><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span></code></pre><h3 id="一、字体"><a href="#一、字体" class="headerlink" title="一、字体"></a>一、字体</h3><pre><code>**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><hr><blockquote><p>这是引用的内容</p><blockquote><blockquote><p>不信你看</p><blockquote><p>hello beijing  hello  shanghai   </p></blockquote></blockquote></blockquote></blockquote><hr><h3 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h3><blockquote><blockquote><p>三个或者三个以上的 - 或者 * 都可以。<br><code>`</code></p></blockquote></blockquote><hr><hr><hr><hr><pre><code>###  五、图片```java![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><pre class=" language-java"><code class="language-java">语法<span class="token operator">:</span><span class="token punctuation">[</span>超链接名<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span>title可加可不加<span class="token punctuation">[</span>简书<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jianshu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"超链接地址"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>超链接名<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>例<span class="token operator">:</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://doudouchen.cn"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>豆豆陈<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><a href="https://doudouchen.cn" target="_blank" rel="noopener">个人博客</a></p><h3 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h3><pre class=" language-java"><code class="language-java">语法：单行代码：代码之间分别用一个反引号包起来    `代码内容`代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre class=" language-bash"><code class="language-bash">在使用代码快的时候 注意要 在 ``` 后边加上 对应的编程 语言 感谢 </code></pre><p><a href="https://github.com/blinkfox">blinkfox</a>  的指导</p><hr><blockquote><p>学习于简书 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/2018/09/11/docker/"/>
      <url>/2018/09/11/docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a> 机器上，也可以实现虚拟化。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><h2 id="hello-docker"><a href="#hello-docker" class="headerlink" title="hello docker !!!"></a>hello docker !!!</h2><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><pre class=" language-bash"><code class="language-bash">docker version</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="显示docker系统的信息"><a href="#显示docker系统的信息" class="headerlink" title="显示docker系统的信息"></a>显示docker系统的信息</h3><pre class=" language-bash"><code class="language-bash">docker info</code></pre><h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><pre class=" language-sh"><code class="language-sh">docker logs</code></pre><h3 id="故障检查"><a href="#故障检查" class="headerlink" title="故障检查"></a>故障检查</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker status</code></pre><h3 id="启动关闭docker"><a href="#启动关闭docker" class="headerlink" title="启动关闭docker"></a>启动关闭docker</h3><pre class=" language-sh"><code class="language-sh"> sudo service docker start|stop</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/10/hello-world/"/>
      <url>/2018/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo !!!"></a>hello hexo !!!</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">  hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">  hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash"> hexo generate 或者 hexo g</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash"> hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
