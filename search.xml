<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ORACLE 加强学习</title>
      <link href="/2018/12/03/oracle-jia-qiang-xue-xi/"/>
      <url>/2018/12/03/oracle-jia-qiang-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="本次知识点"><a href="#本次知识点" class="headerlink" title="本次知识点"></a>本次知识点</h3><p><strong>1,掌握 oracle中把一张表中的数据复制到另一张表中去</strong></p><p><strong>2,oraclhe中创建索引</strong></p><p><strong>3, oracle中临时表的创建</strong></p><p><strong>4,oracle中创建视图</strong></p><p><strong>5,oracle中删除drop truncate delete 的区别</strong></p><p> <strong>6,oracle中创建储存过程</strong> </p><p><strong>7,oracle中创建游标</strong></p><p><strong>8,oracle中创建触发器</strong></p><p><strong>9,oracle 中的 恢复 表数据</strong></p><p><strong>10,oracle 中的导入导出操作</strong></p><h4 id="1，复制表"><a href="#1，复制表" class="headerlink" title="1，复制表"></a>1，复制表</h4><pre class=" language-sql"><code class="language-sql"><span class="token number">001</span>，如果没有表结构创建表结构<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 新表 <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 旧表 <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">002</span>，向新表中复制数据<span class="token keyword">insert</span> <span class="token keyword">into</span> 新表 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 旧表<span class="token punctuation">;</span> <span class="token number">003</span>，同一个表中 将表中的<span class="token number">a</span>字段的值 赋给 <span class="token number">b</span>字段<span class="token keyword">update</span> 表名<span class="token keyword">set</span> A<span class="token operator">=</span>B<span class="token punctuation">;</span></code></pre><h4 id="2，索引"><a href="#2，索引" class="headerlink" title="2，索引"></a>2，索引</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>column_name<span class="token punctuation">[</span><span class="token punctuation">,</span>column_name…<span class="token punctuation">]</span><span class="token punctuation">)</span>；语法解析:<span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">unique</span> 指定索引列上的值必须是唯一的 称为 唯一索引（例如 主键）<span class="token number">2</span>，index_name 索引名称<span class="token number">3</span>，table_name 索引作用于的表<span class="token number">4</span><span class="token punctuation">,</span> colunm_name 指定对那个列 进行索引 如果是多个列 就称为 组合索引删除索引 <span class="token keyword">drop</span> <span class="token keyword">index</span> index_name</code></pre><p>3，临时表</p><pre class=" language-sql"><code class="language-sql">创建临时表有两种方式：     <span class="token number">1</span>、会话级临时表 <span class="token keyword">on</span> <span class="token keyword">commit</span> preserve <span class="token keyword">rows</span><span class="token punctuation">;</span>      当<span class="token keyword">COMMIT</span>的时候保留数据      <span class="token number">2</span>、事务级临时表  <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span>   当<span class="token keyword">COMMIT</span>的时候删除数据（默认情况） <span class="token number">1</span><span class="token punctuation">.</span>会话级临时表<span class="token punctuation">(</span>会话级临时表是指临时表中的数据只在会话生命周期之中存在<span class="token punctuation">)</span>格式:<span class="token keyword">Create</span> <span class="token keyword">Global</span> <span class="token keyword">Temporary</span> <span class="token keyword">Table</span> Temp_Name<span class="token punctuation">(</span>Col1 Type1<span class="token punctuation">,</span>Col2 Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">On</span> <span class="token keyword">Commit</span> Preserve <span class="token keyword">Rows</span><span class="token punctuation">;</span>eg:<span class="token keyword">create</span> <span class="token keyword">global</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> temp_tb <span class="token punctuation">(</span>col1 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> preserve <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> temp_tb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> temp_tb<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>事务级临时表<span class="token punctuation">(</span> 事务级临时表是指临时表中的数据只在事务生命周期中存在<span class="token punctuation">)</span>格式:<span class="token keyword">Create</span> <span class="token keyword">Global</span> <span class="token keyword">Temporary</span> <span class="token keyword">Table</span> Temp_Name<span class="token punctuation">(</span>Col1 Type1<span class="token punctuation">,</span>Col2 Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">On</span> <span class="token keyword">Commit</span> <span class="token keyword">Delete</span> <span class="token keyword">Rows</span><span class="token punctuation">;</span>例子<span class="token keyword">create</span> <span class="token keyword">global</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> temp_tb <span class="token punctuation">(</span>col1 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span>  temp_tb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  temp_tb<span class="token punctuation">;</span></code></pre><p>4，视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span>  <span class="token operator">or</span> repacle <span class="token keyword">view</span> view_name <span class="token punctuation">[</span><span class="token keyword">with</span> <span class="token keyword">read</span> only<span class="token punctuation">]</span>   <span class="token keyword">as</span>语法解析:<span class="token keyword">with</span> <span class="token keyword">read</span> only 加上的话 意为 创建只读视图查询：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_emp1<span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_emp1 <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%M%'</span><span class="token punctuation">;</span>修改：<span class="token keyword">update</span> v_emp1 <span class="token keyword">set</span> job<span class="token operator">=</span><span class="token string">'销售'</span> <span class="token keyword">where</span> ename<span class="token operator">=</span><span class="token string">'sb'</span><span class="token punctuation">;</span>添加：<span class="token keyword">insert</span> <span class="token keyword">into</span> v_emp2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2222'</span><span class="token punctuation">,</span><span class="token string">'sb2'</span><span class="token punctuation">,</span><span class="token string">'技术'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>删除：<span class="token keyword">delete</span> <span class="token keyword">from</span> v_emp2 <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">2222</span></code></pre><p>5，删除表drop delete truncate 区别</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span>：属于DML语句，删除数据库中指定条件的数据，相应语法：  <span class="token keyword">DELETE</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">;</span>        执行该语句后，需要使用<span class="token keyword">commit</span>进行提交才能反映到数据库中<span class="token keyword">truncate</span>：（不是trancate）属于DDL语句，快速的删除指定表的所有数据，         <span class="token keyword">TRUNCATE</span>在各种表上无论是大的还是小的都非常快，同其它DDL语句一样，都显示的有提交操作，因此，执                              行之后是无法进行回滚操作的。<span class="token keyword">TRUNCATE</span>将重新设置高水平线和所有的索引。在对整个表和索引进行完全浏览时，经过<span class="token keyword">TRUNCATE</span>操作后的表比<span class="token keyword">Delete</span>操作后的表要快得多。<span class="token keyword">TRUNCATE</span>不能触发任何<span class="token keyword">Delete</span>触发器。当表被清空后表和表的                            索引将重新设置成初始大小，而<span class="token keyword">delete</span>则不能。          语法：<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">drop</span>： 属于DDL语句，作用是删除整个表、删除指定的用户、删除指定的存储空间等等</code></pre><p>6，储存过程</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">procedure</span> 存储过程名称 <span class="token keyword">as</span><span class="token keyword">Begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">End</span> 存储过程名称；<span class="token operator">In</span> 只进不出<span class="token keyword">Out</span> 只出不进<span class="token operator">In</span> <span class="token keyword">out</span> 可进可出eg:<span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> proc1<span class="token punctuation">(</span> para1 varchar2<span class="token punctuation">,</span> para2 <span class="token keyword">out</span> varchar2<span class="token punctuation">,</span> para3 <span class="token operator">in</span> <span class="token keyword">out</span> varchar2 <span class="token punctuation">)</span> <span class="token keyword">as</span> v_name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">begin</span>  v_name :<span class="token operator">=</span><span class="token string">'zhangsf'</span><span class="token punctuation">;</span>  para3 :<span class="token operator">=</span> v_name<span class="token punctuation">;</span> dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'para3:'</span><span class="token operator">||</span>para3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>7,游标</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">cursor</span> cursor_name <span class="token keyword">as</span>显示游标隐式游标的属性 返回值类型 意 义SQL<span class="token operator">%</span><span class="token keyword">ROWCOUNT</span> 整型 代表 DML 语句成功执行的数据行数SQL<span class="token operator">%</span>FOUND 布尔型 值为 <span class="token boolean">TRUE</span> 代表插入、删除、更新或单行查询操作成功SQL<span class="token operator">%</span>NOTFOUND 布尔型 与 SQL<span class="token operator">%</span>FOUND 属性返回值相反SQL<span class="token operator">%</span>ISOPEN 布尔型 DML 执行过程中为真，结束后为假动态游标 强类型动态游标 弱类型动态游标eg：<span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>e_no number<span class="token punctuation">;</span>e_name varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e_sal number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span>e_no<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span>e_name<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span>e_sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>e_no emp<span class="token punctuation">.</span>empno<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>e_name emp<span class="token punctuation">.</span>ename<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>e_sal emp<span class="token punctuation">.</span>sal<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span>e_no<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span>e_name<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span>e_sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> e_no<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_sal<span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">set</span> serverout <span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">cursor</span> cu_emp <span class="token operator">is</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span> <span class="token operator">and</span> sal<span class="token operator">&lt;</span><span class="token number">3000</span><span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">open</span> cu_emp<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span>isopen <span class="token keyword">then</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'sql游标已打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>     dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'sql游标未打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> e_count number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'游标捕获的记录数：'</span><span class="token operator">||</span>sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> e_count number<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'游标捕获的记录数：'</span><span class="token operator">||</span>sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">update</span> emp <span class="token keyword">set</span> ename<span class="token operator">=</span><span class="token string">'sb3'</span> <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span><span class="token keyword">rowcount</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'已更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'未更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">update</span> emp <span class="token keyword">set</span> ename<span class="token operator">=</span><span class="token string">'sb3'</span> <span class="token keyword">where</span> empno<span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> sql<span class="token operator">%</span>found <span class="token keyword">then</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'已更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'未更新'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> emptype <span class="token operator">is</span> ref <span class="token keyword">cursor</span> <span class="token keyword">return</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>cu_emp emptype<span class="token punctuation">;</span>e_count number<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT1'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> e_count<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">open</span> cu_emp <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">open</span> cu_emp <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> cu_emp<span class="token operator">%</span>found loop    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cu_emp <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> loop<span class="token punctuation">;</span>  <span class="token keyword">close</span> cu_emp<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> customType <span class="token operator">is</span> ref <span class="token keyword">cursor</span><span class="token punctuation">;</span>e_count number<span class="token punctuation">;</span><span class="token number">e</span> emp<span class="token operator">%</span>rowtype<span class="token punctuation">;</span>s salgrade<span class="token operator">%</span>rowType<span class="token punctuation">;</span>cType customType<span class="token punctuation">;</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> e_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT1'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> e_count<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">open</span> cType <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span> cType<span class="token operator">%</span>found loop      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'等级：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>grade<span class="token operator">||</span><span class="token string">'，最低薪资：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>losal<span class="token operator">||</span><span class="token string">'，最高薪资：'</span><span class="token operator">||</span>s<span class="token punctuation">.</span>hisal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> s<span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">close</span> cType<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">open</span> cType <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'PRESIDENT'</span><span class="token punctuation">;</span>    <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> cType<span class="token operator">%</span>found loop      dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'编号：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">||</span><span class="token string">'，姓名：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token operator">||</span><span class="token string">'，基本薪资：'</span><span class="token operator">||</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">fetch</span> cType <span class="token keyword">into</span> <span class="token number">e</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> loop<span class="token punctuation">;</span>    <span class="token keyword">close</span> cType<span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>8,触发器</p><pre class=" language-sql"><code class="language-sql">触发器的禁用和开启禁用触发器： <span class="token keyword">alter</span> <span class="token keyword">trigger</span> 触发器名称 <span class="token keyword">disable</span>启用触发器： <span class="token keyword">alter</span> <span class="token keyword">trigger</span> 触发器名称 <span class="token keyword">enable</span>行触发器针对行记录。语法结构：<span class="token keyword">Create</span> <span class="token keyword">trigger</span> 触发器名称Before<span class="token operator">/</span><span class="token keyword">after</span> 触发动作<span class="token keyword">For each row</span><span class="token keyword">On</span> 作用对象触发器内置变量 :old :new语句触发器针对整个表，作用整个表操作；语法结构：<span class="token keyword">Create</span> <span class="token keyword">trigger</span> 触发器名称Before<span class="token operator">/</span><span class="token keyword">after</span> 触发动作<span class="token keyword">On</span> 作用对象触发器谓词：INSERTING、UPDATING、DELETING</code></pre><p>9,恢复数据</p><pre class=" language-sql"><code class="language-sql">分为两种方法：scn和时间戳两种方法恢复。一、通过scn恢复删除且已提交的数据　　<span class="token number">1</span>、获得当前数据库的scn号　　　　<span class="token keyword">select</span> current_scn <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>切换到sys用户或system用户查询<span class="token punctuation">)</span> 　　　　查询到的scn号为：<span class="token number">1499223</span>　　<span class="token number">2</span>、查询当前scn号之前的scn　　　　<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">as</span> <span class="token keyword">of</span> scn <span class="token number">1499220</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>确定删除的数据是否存在，如果存在，则恢复数据；如果不是，则继续缩小scn号<span class="token punctuation">)</span>　　<span class="token number">3</span>、恢复删除且已提交的数据　　　　flashback <span class="token keyword">table</span> 表名 <span class="token keyword">to</span> scn <span class="token number">1499220</span><span class="token punctuation">;</span>二、通过时间恢复删除且已提交的数据　　<span class="token number">1</span>、查询当前系统时间　　　　<span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>　　<span class="token number">2</span>、查询删除数据的时间点的数据　　　　<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">as</span> <span class="token keyword">of</span> <span class="token keyword">timestamp</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2013-05-29 15:29:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>如果不是，则继续缩小范围<span class="token punctuation">)</span>　　<span class="token number">3</span>、恢复删除且已提交的数据　　　　flashback <span class="token keyword">table</span> 表名 <span class="token keyword">to</span> <span class="token keyword">timestamp</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2013-05-29 15:29:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　注意：如果在执行上面的语句，出现错误。可以尝试执行 <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">enable</span> <span class="token keyword">row</span> movement<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//允许更改时间戳</span></code></pre><p>10,导入导出数据</p><pre class=" language-sql"><code class="language-sql">Oracle的备份（是Oracle的版本只能是相邻的，不能垮版本。）备份方案有：逻辑备份（IMP<span class="token operator">&amp;</span>EXP命令进行备份）、物理文件备份（脱机及联机备份）、利用RMAN<span class="token punctuation">(</span>Recovery Manager<span class="token punctuation">)</span>的增量物理文件系统备份。逻辑备份分为四种模式：表空间备份<span class="token punctuation">(</span><span class="token keyword">tablespace</span><span class="token punctuation">)</span>、表备份<span class="token punctuation">(</span><span class="token keyword">table</span><span class="token punctuation">)</span>、用户备份<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">)</span>和完全备份<span class="token punctuation">(</span><span class="token keyword">full</span><span class="token punctuation">)</span>。exp导出，imp导出命令<span class="token comment" spellcheck="true">-- 全量导出 exp system/manager@TEST file=d:\daochu.dmp full=y  -- 将数据库中system用户与sys用户的表导出 exp system/manager@TEST file=d:\daochu.dmp owner=(system,sys)  -- 将数据库中的表table1中的字段filed1以"00"打头的数据导出 exp system/manager@TEST file=d:\daochu.dmp tables=(table1) query=\" where filed1 like '00%'\"  -- 将数据库中的表table1/table2导出 exp system/manager@TEST file=d:\daochu.dmp tables=(table1,table2)</span>导入imp system<span class="token operator">/</span>manager<span class="token variable">@TEST</span> <span class="token keyword">file</span><span class="token operator">=</span><span class="token number">d</span>:\daochu<span class="token punctuation">.</span>dmp <span class="token keyword">tables</span><span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span><span class="token number">4</span>，将一个用户所属的数据导入另一个用户imp system<span class="token operator">/</span>manager <span class="token keyword">file</span><span class="token operator">=</span>tank log<span class="token operator">=</span>tank fromuser<span class="token operator">=</span>seapark touser<span class="token operator">=</span>seapark_copyimp system<span class="token operator">/</span>manager <span class="token keyword">file</span><span class="token operator">=</span>tank log<span class="token operator">=</span>tank fromuser<span class="token operator">=</span>seapark<span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span> touser<span class="token operator">=</span>seapark_copy<span class="token punctuation">(</span>table1<span class="token punctuation">,</span>table2<span class="token punctuation">)</span><span class="token punctuation">;</span>（imp mk<span class="token operator">/</span>mk <span class="token keyword">file</span><span class="token operator">=</span><span class="token number">d</span>:\daochu<span class="token punctuation">.</span>dmp fromuser<span class="token operator">=</span>mk touser<span class="token operator">=</span>cyll）（导出 导入的话 要是由执行导出的用户进行导入操作）exp help<span class="token operator">=</span>y 导入帮助imp help<span class="token operator">=</span>y 导出帮助</code></pre><p>用户 表空间</p><pre class=" language-sh"><code class="language-sh">--显示  用户下面的所有表select * from tab;--- 查看用户下面的永久表空间select default_tablespace from user_users;---查看临时表空间  和用户状态 select *from user_users--更改用户的 永久表空间alter user user(操作的用户) default tablespace tablespacename(将要设置的默认表空间名称)--修改 新添加用户的默认表空间alter database default tablespace tablespaceName--如果默认表空间不存在  则下面有创建表空间的语句create tablespace tablepaceName datafile datafile size 500m autoextend on;--删除  一个用户drop user cyll cascade;eg:create tablespace tjsgbb DATAFILE 'tjsgbb.ora' size 500M AUTOEXTEND ON;create user tom identified by cat default tablespace tjsgbb;grant connect to tom;grant resource to tom;grant dba to tom;</code></pre><p>oracle 用户</p><pre class=" language-sql"><code class="language-sql">Oracle 用户分两种，一种是系统用户 sys system ；另外一种是普通用户；视图 dba_users 存储着所有用户信息；创建用户：<span class="token keyword">Create</span> <span class="token keyword">user</span> 用户名 identified <span class="token keyword">by</span> 密码 <span class="token keyword">default</span> <span class="token keyword">tablespace</span> 表空间授予 <span class="token keyword">session</span> 权限：<span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">session</span> <span class="token keyword">to</span> TEST<span class="token punctuation">;</span>锁定和开启帐号：<span class="token keyword">alter</span> <span class="token keyword">user</span> TEST account <span class="token keyword">lock</span> <span class="token operator">/</span> unlock <span class="token punctuation">;</span>修改用户密码：<span class="token keyword">alter</span> <span class="token keyword">user</span> TEST identified <span class="token keyword">by</span> <span class="token number">123</span> <span class="token punctuation">;</span>删除用户： <span class="token keyword">drop</span> <span class="token keyword">user</span> TEST <span class="token keyword">cascade</span> <span class="token punctuation">;</span> 删除用户，并且把用户下的对象删除，比如表，视图，触发器等。</code></pre><p>oracle 权限</p><pre class=" language-sql"><code class="language-sql">Oracle 权限分为系统权限和对象权限；系统权限是 Oracle 内置的，与具体对象无关的权限，比如创建表的权限，连接数据库权限；对象权限就是对具体对象，比如表，视图，触发器等的操作权限；系统权限视图：system_privilege_map权限分配视图：dba_sys_privs回收系统权限 <span class="token keyword">revoke</span> 权限 <span class="token keyword">from</span> 用户对象权限分配用户表权限视图：dba_tab_privs给对象授权 <span class="token keyword">grant</span> 权限 <span class="token keyword">on</span> 对象 <span class="token keyword">to</span> 用户 <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>回收权限：<span class="token keyword">revoke</span> 对象权限 <span class="token keyword">on</span> 对象 <span class="token keyword">from</span> 用户；</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ORACLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 安装 oracle </title>
      <link href="/2018/10/31/docker-an-zhuang-oracle/"/>
      <url>/2018/10/31/docker-an-zhuang-oracle/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装docker并启动docker服务"><a href="#1-安装docker并启动docker服务" class="headerlink" title="1. 安装docker并启动docker服务"></a>1. 安装docker并启动docker服务</h4><pre class=" language-shell"><code class="language-shell"> sudo yum install docker（安装 docker） sudo systemctl start docker 或者 service docker start</code></pre><h4 id="2-下载oracle-xe-11g镜像"><a href="#2-下载oracle-xe-11g镜像" class="headerlink" title="2. 下载oracle-xe-11g镜像"></a>2. 下载oracle-xe-11g镜像</h4><pre class=" language-sh"><code class="language-sh">sudo docker pull sath89/oracle-xe-11g  </code></pre><p>下载后执行 sudo docker ps –a 查看本地存在的所有镜像</p><h4 id="3-运行oracle镜像为容器-并将oracle容器的8080-和1521端口映射到本机的8080-和1521端口"><a href="#3-运行oracle镜像为容器-并将oracle容器的8080-和1521端口映射到本机的8080-和1521端口" class="headerlink" title="3. 运行oracle镜像为容器,并将oracle容器的8080 和1521端口映射到本机的8080 和1521端口."></a>3. 运行oracle镜像为容器,并将oracle容器的8080 和1521端口映射到本机的8080 和1521端口.</h4><pre class=" language-sh"><code class="language-sh">sudo docker run -p 8080:8080 -p 1521:1521 --name oracle-xe-11g -d sath89/oracle-xe-11g</code></pre><p>在阿里云服务器  上进行的部署 部署完 记得开放相应的端口号</p><h4 id="4-启动oracle-xe-11g容器"><a href="#4-启动oracle-xe-11g容器" class="headerlink" title="4.启动oracle-xe-11g容器"></a>4.启动oracle-xe-11g容器</h4><pre class=" language-sh"><code class="language-sh">sudo docker start oracle-xe-11g</code></pre><p>至此配置完毕 ,浏览器访问localhost:8080/apex</p><h4 id="5-登录oracle容器-然后执行sqlplus命令"><a href="#5-登录oracle容器-然后执行sqlplus命令" class="headerlink" title="5.登录oracle容器,然后执行sqlplus命令"></a>5.登录oracle容器,然后执行sqlplus命令</h4><p>账号<strong><em>,密码</em></strong></p><pre class=" language-sh"><code class="language-sh">sudo docker  exec -it oracle-xe-11g /bin/bash</code></pre><h4 id="5-plsql-远程连接-库"><a href="#5-plsql-远程连接-库" class="headerlink" title="5.plsql 远程连接 库"></a>5.plsql 远程连接 库</h4><p>docker 查看</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> parameter service_names</code></pre><p>新建的admin目录下创建一个tnsnames.ora的文件，写入文件配置：</p><pre class=" language-sql"><code class="language-sql">MyDB<span class="token operator">=</span>    <span class="token punctuation">(</span>DESCRIPTION <span class="token operator">=</span>        <span class="token punctuation">(</span>ADDRESS <span class="token operator">=</span> <span class="token punctuation">(</span>PROTOCOL <span class="token operator">=</span> TCP<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span> xxx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT <span class="token operator">=</span> <span class="token number">1521</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>CONNECT_DATA <span class="token operator">=</span>            <span class="token punctuation">(</span>SERVER <span class="token operator">=</span> DEDICATED<span class="token punctuation">)</span>            <span class="token punctuation">(</span>SERVICE_NAME <span class="token operator">=</span> xe<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span></code></pre><h4 id="创建表空间-创建用户-授权操作"><a href="#创建表空间-创建用户-授权操作" class="headerlink" title="创建表空间 创建用户 授权操作"></a>创建表空间 创建用户 授权操作</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> tjsgbb DATAFILE <span class="token string">'tjsgbb.ora'</span> size 500M AUTOEXTEND <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> tom identified <span class="token keyword">by</span> cat <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tjsgbb<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">connect</span> <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">grant</span> resource <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> tom<span class="token punctuation">;</span><span class="token keyword">create</span> yzh identified <span class="token keyword">by</span> nice <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tjsgbb<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">connect</span> <span class="token keyword">to</span> yzh<span class="token punctuation">;</span><span class="token keyword">grant</span> resource <span class="token keyword">to</span> yzh<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> yzh<span class="token punctuation">;</span></code></pre><blockquote><p>可能会用到的命令</p><pre class=" language-sh"><code class="language-sh">docker stop [容器id]docker rm [容器id]</code></pre></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>崔永元还是输了...</title>
      <link href="/2018/10/31/cui-yong-yuan-huan-shi-shu-liao/"/>
      <url>/2018/10/31/cui-yong-yuan-huan-shi-shu-liao/</url>
      
        <content type="html"><![CDATA[<h3 id="崔永元还是输了"><a href="#崔永元还是输了" class="headerlink" title="崔永元还是输了"></a>崔永元还是输了</h3><p>大囯魂<br>01<br>这是一个娱乐至死的时代。<br>昨天上午10点，可以支撑逾亿人次同时访问的微博，竟然一时间系统瘫痪。<br>背后的原因，只是因为娱乐圈当红小花赵丽颖发了一条微博。<br>她结婚了，对象是同为娱乐明星的冯绍峰。<br>短短的40多分钟，赵丽颖结婚的微博，转发量就超过了20万次，评论36万条，点赞接近130万。</p><p>明星结婚，八方来贺。<br>回想起来，整个10月，充斥我们眼球的范冰冰、张雨绮、李湘……无一例外，都是唱歌演戏的明星。<br>信息爆炸的今天，其实每个人的时间都很有限，每一双眼睛的焦点都很宝贵。<br>给了范冰冰，给了赵丽颖，就给不了那些站在时代的背光面，迎着千军万马，也要逆流而上的真正英雄们。<br>哪有什么岁月静好，不过有人在替你负重前行。<br>正是他们，为我们撑起了一片现世安稳的蓝天，让我们可以怡然自得地嗑着瓜子刷微博，聊着八卦追明星。<br>是的，这也是一个全民健忘的时代。<br>同样是在微博上，爆出范冰冰丑闻，引发娱乐圈地震的孤胆英雄崔永元，发表了一篇文章：《一声长叹一声雷》。<br>整整10天过去了，转发量至今也没突破2万。<br>英雄枯骨无人问，明星家事天下知。<br>这不是时代的悲哀，因为这个时代和过去五千年的每个时代都一样，不知悲欢，不问冷暖。<br>赋予一个时代温度的，是身处其中的人。是你、是我、是他，是你们、是我们、是他们。<br>没错，这就是你我的悲哀，是身处这个时代的每一个人的悲哀。<br>02<br>如果问：21世纪的第一个十年，全中国最火的电视节目是什么？<br>毫无疑问，答案只能是崔永元的《实话实说》。<br>央视纪录片之父陈虻说：中国所有的主持人，没有一个能超过崔永元。<br>崔永元曾经有多火？<br>如果你不清楚，问问你们的父母就知道了。<br>他是当年全中国所有男人的人生偶像，所有女人的梦中情人。<br>但是忽然有一天，身边的人都说他疯了。<br>因为他放着好好的主持人不做，自费100万跑到美国去拍纪录片，跑到微博上怼方舟子，只为了解开转基因背后的真相。<br>一夜之间，他成了“病人崔永元。”<br>人们都说小崔得了抑郁症，精神已经不正常了。<br>可吊诡的是，暗地里一波又一波的神秘说客，却找上了门。<br>他们劝小崔放弃对转基因的调查，封口费高达2亿！<br>背后的真相，不言而喻。<br>2亿是多少？范冰冰偷税漏税那么多年，也才罚了9个亿。<br>崔永元只要动一下嘴皮子，2亿就到手了。<br>可是他没有。<br>他说：“做男人要有骨气，饿死也不答应他们！”<br>骨气，一个多么熟悉的词，一个多么陌生的词。<br>熟悉，是因为我们自小就听过：“富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。”<br>陌生，是因为上一次见到这种骨气，还要回溯到120年前。<br>北京宣武门外的菜市口刑场上，33岁的谭嗣同对着屠刀高喊：我自横刀向天笑，去留肝胆两昆仑。<br>在中国人血液里冷却了120年的骨气，终于在崔永元身上又沸腾了。<br>03<br>故事还没有结束，因为在这个朗朗乾坤下，仍然有数不清的污秽浊流。<br>这一次，崔永元决意以一己之力，单挑整个娱乐圈。<br>一纸阴阳合同，多少影视公司的股价应声跌停，多少光鲜亮丽的明星，露出了丑陋罪恶的真面目。<br>可是还不够，在微博长文《一声叹息一声雷》中，更大的利益集团浮出水面。</p><p>崔永元不是病了，他是“疯了”。<br>这个今年已经55岁的“老疯子”，妄想以一人之力，对抗国际巨星，对抗上市公司，对抗世家大族，对抗某局某所……<br>蚍蜉撼树，凭的是一腔孤勇！<br>螳臂挡车，端的是一副肉躯！<br>危险吗？当然危险。<br>崔永元不知道吗？当然知道。</p><p>一个连死都不怕的人，真的就无懈可击了吗？<br>不，是人就有软肋。<br>崔永元的软肋，就是他的女儿。她的信息被不法分子公开，她的人身安全岌岌可危。<br>我们无法想象崔永元的内心，经过了何种的天人交战。我们能看见的，只是他在《一声叹息一声雷》里写道：<br>“昨晚，梦见了远在天堂的父亲，他说，记住三个字：不能退。”<br>想起柴静写过的一个关于崔永元的片段：<br>某年央视评论部的年会，他亲自张罗，请了赵本山、郭德纲、罗大佑……年会进行到一半，陆陆续续台下的人有些走了，或是打着手机出去了。<br>最后一个节目，他请来罗大佑。<br>罗大佑一直坐在场下，喝了两瓶酒，一直到11点多上场。<br>大佑也不登台，踩支凳子抱住吉它。一束光，对着话筒说“小崔，不怕，我也抑郁过，不是我们有病，是这个时代有病。”<br>是的，这个时代病了。<br>病在一边是歌舞升平，戏子们浓妆艳抹、粉饰太平，你方唱罢我登场；一边是暗流涌动，孤胆英雄扛着全世界的重量逆流而上，在悬崖边缘举步维艰。<br>而大众的目光，竟然全被明星所吸引，舍不得在英雄的身上多停留片刻。<br>只是，又有多少人还记得那句古训：“大厦将颠，非一木所支也。”<br>04<br>很多人都在问，崔永元最近怎么样了？<br>前两天，崔永元任教的中国传媒大学，传出了一家面馆开业的消息。<br>面馆就开在传媒大学的食堂里，名字叫做“崔永元真面”。<br>面馆不大，菜色也普通，就是市面上常见的重庆小面、牛肉面……可是份量却很足，均价只在10元左右。<br>这个价格在北京这样的一线城市，可以说绝无仅有。因为面馆不为盈利，开设的初衷，就是资助在校的贫困学生。<br>消息传出以后，很多人慕名前往。有人说：<br>吃着吃着，眼泪就禁不住掉进碗里。因为小崔在此时，连个人安危都不保的情况下，还张罗着在学校开个良心面馆，资助贫困学生……<br>总有一种力量，让我们泪流满面。<br>今天，提起崔永元，总是让人想起作家今何在的成名小说《悟空传》。<br>“大圣，此去欲何?”<br>“踏南天，碎凌霄。”<br>“若一去不回？”<br>“便一去不回！”<br>时代需要英雄，英雄需要承担。<br>我们做不到，没关系。<br>但是有人替我们做到了，我们的目光，能不能从灯红酒绿的娱乐圈挪开一会儿，在他们的身上多停留一会儿？<br>为众人抱薪者, 不可使其冻毙于风雪；<br>为自由开路者, 不可使其困顿于荆棘！<br>崔永元的父亲，是一名参加过解放战争和抗美援朝的老兵。他曾在一篇回忆父亲的文章里写道：<br>“小时候很羡慕父亲只要上台讲话，底下就不断有掌声。那时，他的理想就是长大要做一个像父亲这样的人，到台上讲话台下就热烈鼓掌。”<br>成为父亲那样的人，崔永元做到了。<br>给予崔永元掌声，我们做到了吗？</p><p>作者：诗之源<br>链接：<a href="https://www.jianshu.com/p/2f836c1ccc16" target="_blank" rel="noopener">https://www.jianshu.com/p/2f836c1ccc16</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总有那么一些人 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何看待 S8 RNG 2:3 G2</title>
      <link href="/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/"/>
      <url>/2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/</url>
      
        <content type="html"><![CDATA[<h3 id="从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队"><a href="#从高中开始玩英雄联盟，从高二开始做rng-的粉丝-只想说今天-rng-输给-g2-输的我莫名其妙-我不知道-教练组-在干什么-选的什么英雄-打的也太放飞自我了吧-试问进入8强的队伍-有哪一个是弱队" class="headerlink" title="从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队"></a>从高中开始玩英雄联盟，从高二开始做rng 的粉丝  只想说今天 rng 输给 g2 输的我莫名其妙 我不知道  教练组  在干什么 选的什么英雄 打的也太放飞自我了吧  试问进入8强的队伍 有哪一个是弱队</h3><h4 id="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"><a href="#怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。" class="headerlink" title="怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。"></a>怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。</h4><h4 id="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"><a href="#提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100-胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。" class="headerlink" title="提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。"></a>提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。</h4><h4 id="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"><a href="#但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧" class="headerlink" title="但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧"></a>但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧</h4><blockquote><blockquote><blockquote><p>我是真的心疼mlxg。永远都在临危救主，永远接锅就上，可惜今天却捞不动这迷一样的队友和教练组。你尽管膨胀，不吸取教训，明年rng还是这个b样，觉得自己能续杯，结果反向拿个八强游泳回来。</p></blockquote></blockquote></blockquote><p>我只想说  没有输给别人 纯粹输给了自己 </p><p><a href="https://www.zhihu.com/question/299320524/answer/514794733" target="_blank" rel="noopener">引用知乎作者：我说海盗才有营养</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 英雄联盟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell 脚本学习</title>
      <link href="/2018/10/15/shell-jiao-ben-xue-xi/"/>
      <url>/2018/10/15/shell-jiao-ben-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="shell命令-是一种运行在linux系统上的语言-便于直接操作文件"><a href="#shell命令-是一种运行在linux系统上的语言-便于直接操作文件" class="headerlink" title="shell命令  是一种运行在linux系统上的语言  便于直接操作文件"></a>shell命令  是一种运行在linux系统上的语言  便于直接操作文件</h2><h3 id="脚本的格式"><a href="#脚本的格式" class="headerlink" title="脚本的格式"></a>脚本的格式</h3><pre class=" language-shell"><code class="language-shell">  　vim shell.sh　　　　　　#!/bin/bash　　　　　　　　//声明脚本解释器，这个‘#’号不是注释，其余是注释　　　　　　#Program:　　　　　　　　　//程序内容说明　　　　　　#History:　　　　　　　　　　//时间和作者</code></pre><h3 id="shell变量的种类"><a href="#shell变量的种类" class="headerlink" title="shell变量的种类"></a>shell变量的种类</h3><blockquote><blockquote><blockquote><p>　　用户自定义变量：由用户自己定义、修改和使用</p></blockquote></blockquote></blockquote><p>　　　　与定义变量：Bash与定义的特殊变量，不能直接修改</p><p>　　　　位置变量：通过命令行给程序传递执行的参数</p><p>　　　　1、定义变量：</p><p>　　　　　　　　变量名要以英文字母或下划线开头，区分大小写。</p><p>　　　　　　　　格式：变量名=值</p><p>　　　　　　　　输出变量：echo $变量名</p><p>　　　　2、键盘输入为变量内容：</p><p>　　　　　　　　格式：read [-p “信息”] 变量名</p><p>　　　　　　　　　　　如：read -p “pewase input your name:” name</p><p>　　　　3、不同引号对变量的作用</p><p>　　　　　　双引号””：可解析变量，$符号为变量前缀。</p><p>　　　　　　单引号’’：不解析变量，$为普通字符。</p><p>　　　　　　反引号<code></code>：将命令执行的结果输出给变量。</p><h3 id="shell-条件测试"><a href="#shell-条件测试" class="headerlink" title="shell 条件测试"></a>shell 条件测试</h3><p>1、test命令：</p><p>　　　　　　用途：测试特定的表达式是否成立，当条件成立时，命令执行后的返回值为0，否则为其他数字。</p><p>　　　　　　格式：test 条件表达式 [ 条件表达式 ]   (注意：[]与表达式之间存在空格)</p><p>　　　　2、常见的测试类型：</p><p>　　　　　　测试文件状态</p><p>　　　　　　　　格式：[ 操作符 文件或目录 ]</p><p>　　　　　　　　　　如：if [ -d /etc ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “exists”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “not exists”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　常见的测试操作符：</p><p>　　　　　　　　　　-d:测试是否为目录</p><p>　　　　　　　　　　-e:测试目录或文件是否存在</p><p>　　　　　　　　　　-f:测试是否为文件</p><p>　　　　　　　　　　-r:测试当前用户是否有读权限</p><p>　　　　　　　　　　-w:测试当前用户是否有写权限</p><p>　　　　　　　　　　-x:测试当前用户是否有执行权限</p><p>　　　　　　　　　　-L:测试是否为符号链接文件</p><p>　　　　　　字符串比较</p><p>　　　　　　　　格式：[ 字符串1 = 字符串2 ]</p><p>　　　　　　　　　　　[ 字符串1 != 字符串2 ]</p><p>　　　　　　　　　　　[ -z 字符串 ]</p><p>　　　　　　　　　　如：read -p ‘name:’ name</p><p>　　　　　　　　　　　　read -p ‘pass:’ pass</p><p>　　　　　　　　　　　　if [ $name = ‘admin’ ] &amp;&amp; [ $pass = ‘123’]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo ‘登录成功’</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo ‘登录失败’</p><p>　　　　　　　　　　　　if</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　=:字符串内容相同。</p><p>　　　　　　　　　　!=:字符串内容不同。</p><p>　　　　　　　　　　-z:字符串内容为空。</p><p>　　　　　　整数值比较</p><p>　　　　　　　　格式：[ 整数1 操作符 整数2 ]</p><p>　　　　　　　　　　如：age=30</p><p>　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　fi</p><p>　　　　　　　　常用的测试操作符：</p><p>　　　　　　　　　　-eq:等于</p><p>　　　　　　　　　　-ne:不等于</p><p>　　　　　　　　　　-gt:大于</p><p>　　　　　　　　　　-lt:小于</p><p>　　　　　　　　　　-le:大于或等于</p><p>　　　　　　　　　　-ge:小于或等于</p><p>　　　　　　逻辑测试</p><p>　　　　　　　　格式：[ 表达式1 ] 操作符 [ 表达式2 ]</p><p>　　　　　　　　常用操作符：</p><p>　　　　　　　　　　-a或&amp;&amp;:逻辑与</p><p>　　　　　　　　　　-o或||:逻辑或</p><p>　　　　　　　　　　!:逻辑非</p><h3 id="流程判断"><a href="#流程判断" class="headerlink" title="流程判断"></a>流程判断</h3><p>　1、条件判断</p><p>　　　　　　　a、if语句</p><p>　　　　　　　格式：</p><p>　　　　　　　　　　单分支：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　fi</p><p><code>`</code>bash　　　　　　　　<br>　　　　如：age=30</p><p>　　　　　　　　　　　　　　if [ $age -ge 18 ]</p><p>　　　　　　　　　　　　　　then</p><p>　　　　　　　　　　　　　　　　echo “已成年”</p><p>　　　　　　　　　　　　　　else</p><p>　　　　　　　　　　　　　　　　echo “未成年”</p><p>　　　　　　　　　　　　　　fi</p><p>　　　　　　　　　　多分枝：</p><p>　　　　　　　　　　　　if 条件表达式</p><p>　　　　　　　　　　　　　　then 命令序列</p><p>　　　　　　　　　　　　elif　命令序列</p><p>　　　　　　　　　　　　fi</p><pre><code>　　　　　　　　　　　　如：```bash                          score=87　　　　　　　　　　　　　　if [ $score -lt 60 ];then　　　　　　　　　　　　　　　　echo &#39;60以下&#39;　　　　　　　　　　　　　　elif [ $score -gt 60 ] &amp;&amp; [ $score -lt 70 ];then　　　　　　　　　　　　　　　　echo &#39;60~70之间&#39;　　　　　　　　　　　　　　elif [ $score -ge 70 ] &amp;&amp; [ $score -lt 80 ];then　　　　　　　　　　　　　　　　echo &#39;70～ 80之间&#39;　　　　　　　　　　　　　　else　　　　　　　　　　　　　　　　echo &#39;优秀&#39;　　　　　　　　　　　　　　fi　　　　　　　　　　b、case　　　　　　　　　　格式：case $变量名称 in　　　　　　　　　　　　　　　&quot;第一个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　　　&quot;第二个变量内容&quot;)　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　*)　　　　　　//最后一个变量内容都会用*来代表其它值，不包含前面的变量内容　　　　　　　　　　　　　　　;;　　　　　　　　　　　　　esac</code></pre><p>　　　　　　　　　　　　如：</p><pre class=" language-bash"><code class="language-bash">                            <span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>　　　　　　　　　　　　　　　　start<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　 <span class="token keyword">echo</span> <span class="token string">'start MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　stop<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">'stop MYSQL service.'</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　*<span class="token punctuation">)</span>　　　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> start|stop"</span>　　　　　　　　　　　　　　　　　　<span class="token punctuation">;</span><span class="token punctuation">;</span>　　　　　　　　　　　　　　　　esac</code></pre><p>　　　　2、循环控制</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　跳出本次循环：continue　　　　　　　　结束循环：break　　　　　　　　a、while循环　　　　　　　　格式：while <span class="token punctuation">[</span> 条件表达式 <span class="token punctuation">]</span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段落　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：num<span class="token operator">=</span>3　　　　　　　　　　　　<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> -gt 0 <span class="token punctuation">]</span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$num</span>　　　　　　　　　　　　　　num<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$num<span class="token number">-1</span><span class="token variable">))</span></span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　b、for循环　　　　　　　　格式：for var <span class="token keyword">in</span> con1 con2 con3　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　如：　　　　　　　　　　　<span class="token keyword">for</span> i <span class="token keyword">in</span> user0 user1 user2 user3　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　格式：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　程序段　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　如：for <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token function">useradd</span> user<span class="token variable">$i</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> 123 <span class="token operator">|</span> password --stdin_user<span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　3、函数使用　　　　　　　　定义一个函数：在程序的最前面　　　　　　　　　　<span class="token keyword">function</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>或者function 函数名<span class="token punctuation">{</span><span class="token punctuation">}</span>　　　　　　　　　　　　如：function printit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token string">"your choice is <span class="token variable">$1</span>"</span>　　　　　　　　　　　　　　<span class="token punctuation">}</span>　　　　　　　　调用：直接使用函数名　　　　　　　　　　　　如：printit 1　　　　　　　　传递参数：函数名 参数1 参数1　　　　　　　　　　　　如：printit 2</code></pre><h3 id="五、Shell文本操作"><a href="#五、Shell文本操作" class="headerlink" title="五、Shell文本操作"></a>五、Shell文本操作</h3><p>　1、Find查找命令的使用</p><pre class=" language-sh"><code class="language-sh">　　　　　　　　find . -name "*.text"　　　　　　//在当前目录下查找已txt为后缀的文件　　　　　　　　fing .-name "[a-z]*"　　　　　　//在当前目录下查找开头字母的文件　　　　　　　　find /etc -name "host*"　　　　//查找/etc目录下以host开头的文件　　　　　　　　find . -perm 755　　　　　　　　//在当前目录下查找属性为755的文件　　　　　　　　find -user root　　　　　　　　//在当前目录下查找属主为root的文件　　　　　　　　find /var -mtime -5　　　　　　//在/var下查找更改时间在5天内的文件　　　　　　　　find /var -mtime +3　　　　　　//在/var下查找更改时间在3天以前的文件　　　　　　　　find /etc -type d　　　　　　　　//查找文件类型为d的目录文件　　　　　　　　find /etc -typt l　　　　　　　　//查找文件类型为l的链接文件　　　　　　　　find . -size +1000000c　　　　　//查找文件大小在1M的文件</code></pre><p>　　　　2、正则表达式</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　^linux　　　　　　　　//以linux开头的　　　　　　　　<span class="token variable">$php</span>　　　　　　　　//以php结尾的　　　　　　　　<span class="token keyword">.</span>　　　　　　　　　　//匹配任意单字符　　　　　　　　.+　　　　　　　　　　//匹配任意多个字符　　　　　　　　.*　　　　　　　　　　//匹配0个或多个字符　　　　　　　　<span class="token punctuation">[</span>0-9a-z<span class="token punctuation">]</span>　　　　　　　//匹配<span class="token punctuation">[</span><span class="token punctuation">]</span>内任意一个字符　　　　　　　　<span class="token punctuation">(</span>linux<span class="token punctuation">)</span>+　　　　　　　　//出现多次linux单词　　　　　　　　<span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span>　　　　　　　//web出现了2次以上　　　　　　　　\　　　　　　　　　　//转译</code></pre><p>　　　　3、grep详解</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　<span class="token function">grep</span> <span class="token string">"li qq"</span>*　　　　　　　　　　//在所有文件中查找li qq文件　　　　　　　　<span class="token function">grep</span> -c <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配到file　　　　　　　　<span class="token function">grep</span> -n <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找有多少行匹配file，同时显示行和行号　　　　　　　　<span class="token function">grep</span> -i <span class="token string">"file"</span> a　　　　　　　　　　//在文件中查找file，并不区分大小写　　　　　　　　<span class="token function">grep</span> -v <span class="token string">"file"</span> a　　　　　　　　　　//在文件中过滤掉file所在的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"2017:22:5[0-9]"</span> a　　　　　//在文件中查找在时间在2017:22:50到59的所在行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^210]"</span> a　　　　　　　　//在文件中查找不号寒210的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"h*p"</span> a　　　　　　　　　　//查找包含h和p的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"[5-8][6-9][0-3]"</span> a　　　　//查找大于560小于893的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^d"</span> a　　　　　　　　　　//在文件中查找以d开头的行　　　　　　　　<span class="token function">grep</span> -E <span class="token string">"^[^d]"</span> a　　　　　　　　　　//在文件中查找不是以d开头的行</code></pre><p>####　　　　4、awk命令：</p><p>　　　　　　　　简介：awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>　　　　　　　　　　　　awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p><p>　　　　　　　　格式：awk ‘{pattern + action}’ {filenames}</p><p>　　　　　　　　　　　　pattern:查找内容</p><p>　　　　　　　　　　　　action:匹配规则</p><p>　　　　　　　　　　awk ‘{pring $0}’ access.log　　　　　　　　　　　　　　//查找文件中的每一列</p><p>　　　　　　　　　　awk ‘{print $1”\t”$7}’ access.log　　　　　　　　　　　//查找文件中第一列和第七列</p><p>　　　　　　　　　　cat file | awk ‘$0 !~ /192.168.31.25/‘|grep “php”　　　　//匹配Ip 地址的统计，!~为不匹配</p><pre class=" language-bash"><code class="language-bash">　　　　　　　　　　例：for i <span class="token keyword">in</span> `cat /etc/passwd <span class="token operator">|</span> <span class="token function">head</span> <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print <span class="token variable">$1</span>}'</span>`　　　　　　　　　　　　<span class="token keyword">do</span>　　　　　　　　　　　　　　<span class="token keyword">echo</span> <span class="token variable">$i</span>　　　　　　　　　　　　<span class="token keyword">done</span>　　　　　　　　　　　　　　-F---以什么符号分割　　　　　　　　　　　　　　head---去前多少行，默认是10行</code></pre><p>　　　　5、sed行定位使用<br>　　　　　　　　简介：sed是非交互式的编辑器。它不会修改文件，除非使用shell重定向来保存结果。默认情况下，所有的输出行都被打印到屏幕上。<br> 选项     功能<br> -e     进行多项编辑，即对输入行应用多条sed命令时使用<br> -n     取消默认的输出<br> -f     指定sed脚本的文件名<br><code>`</code>bash　　<br>　　　　　　sed -n ‘2’p file　　　　　　　　//只打印第二行，不打印其他行</p><p>　　　　　　　　sed -n ‘1,4’p file　　　　　　　//从第一行到第四行的记录</p><p>　　　　　　　　sed -n ‘/los/‘p file　　　　　　//打印匹配los的行</p><p>　　　　　　　　sed -n ‘4,/los/‘p file　　　　　//打印从第四行到匹配los的之间所有行</p><p>　　　　　　　　sed ‘1,2’d file　　　　　　　　//吧第一行和第二行全部删除</p><p>　　　　6、Uniq行定位使用</p><p>　　　　　　　　简介：uniq命令用于报告或忽略文件中的重复行，一般与sort命令结合使用。</p><p>　　　　　　　　语法 uniq(选项)(参数)</p><p>　　　　　　　　选项 ：</p><p>　　　　　　　　　　　-c或——count：在每列旁边显示该行重复出现的次数；</p><p>　　　　　　　　　　　-d或–repeated：仅显示重复出现的行列；</p><p>　　　　　　　　　　　-f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位；</p><p>　　　　　　　　　　　-s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符；</p><p>　　　　　　　　　　　-u或——unique：仅显示出一次的行列；</p><p>　　　　　　　　　　　-w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。</p><p>　　　　　　　　uniq -c file　　　　　　　　　　//打印紧挨的重复行出现的次数</p><p>　　　　　　　　uniq -d file　　　　　　　　　　//只打印重复的行</p><p>　　　　　　　　awk ‘{print $1}’ /var/log/httpd/access_log | sort|uniq -c　　　　　　　　//把apache网站的所有访问ip全部统计出来，并打印出统计次数。</p><p>　　　　7、spli行定位</p><p>　　　　　　　　简介：可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志。</p><p>　　　　　　　　语法：split（选项）（file）PREFIX</p><p>　　　　　　　　选项：</p><p>　　<br>　　-b：值为每一输出档案的大小，单位为 byte。<br>　　　　　　　　　　-C：每一输出档中，单行的最大 byte 数。<br>　　　　　　　　　　-d：使用数字作为后缀。<br>　　　　　　　　　　-l：值为每一输出档的列数大小。<br>　　　　　　　　　　PREFIX:代表前导符，可作为切割文件的前导文件。</p><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 命令 学习</title>
      <link href="/2018/09/19/git-ming-ling-xue-xi/"/>
      <url>/2018/09/19/git-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash">刚开始 初始化 一个 目录的时候 （注意编写文件的时候  选择  其他编辑工具  ue 或者 notepaid 格式选择utf-8）然后<span class="token function">cd</span> d:/github<span class="token function">git</span> init创建一个叫做  readme.txt 的文件<span class="token function">git</span> add 把文件添加到本地git库  （先进行 add）<span class="token function">git</span> commit -m <span class="token string">"wrote a readme file"</span> <span class="token punctuation">(</span>然后进行commit<span class="token punctuation">)</span></code></pre><pre class=" language-sh"><code class="language-sh">可以同时add  多个  然后一次性 commit然后  修改  一个 readme.txt 文件git statusgit diffgit addgit status</code></pre><blockquote><p><a href="https://blog.csdn.net/r8l8q8/article/details/80015330" target="_blank" rel="noopener">https://blog.csdn.net/r8l8q8/article/details/80015330</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何发布hexo 的 博客</title>
      <link href="/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/"/>
      <url>/2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！"><a href="#在跟几个同学一起-搭建尝试-用hexo-搭建完博客-之后-又互相商业互呲了-一波-突然-发现自己不知道怎么从头发布一篇博客了有没有-赶紧打开我的-度娘-谷歌-找到了-一篇-知识点-废话-不多说-开始我的表演-！！！" class="headerlink" title="在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！"></a>在跟几个同学一起  搭建尝试 用hexo   搭建完博客 之后 又互相商业互呲了  一波 突然  发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的  度娘 谷歌  找到了 一篇 知识点 废话 不多说 开始我的表演  ！！！</h5><h3 id="创建-一个-博客"><a href="#创建-一个-博客" class="headerlink" title="创建 一个 博客"></a>创建 一个 博客</h3><pre class=" language-bash"><code class="language-bash"> hexo n <span class="token string">"my article"</span> <span class="token comment" spellcheck="true">#完整命令为hexo new,用于新建一篇名为“my article”的文章</span></code></pre><h2 id="Markdown-语法-常用命令"><a href="#Markdown-语法-常用命令" class="headerlink" title="Markdown 语法 常用命令"></a>Markdown 语法 常用命令</h2><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是一级标题</span><span class="token comment" spellcheck="true">## 这是二级标题</span><span class="token comment" spellcheck="true">### 这是三级标题</span><span class="token comment" spellcheck="true">#### 这是四级标题</span><span class="token comment" spellcheck="true">##### 这是五级标题</span><span class="token comment" spellcheck="true">###### 这是六级标题</span></code></pre><h3 id="一、字体"><a href="#一、字体" class="headerlink" title="一、字体"></a>一、字体</h3><pre><code>**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><hr><blockquote><p>这是引用的内容</p><blockquote><blockquote><p>不信你看</p><blockquote><p>hello beijing  hello  shanghai   </p></blockquote></blockquote></blockquote></blockquote><hr><h3 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h3><blockquote><blockquote><p>三个或者三个以上的 - 或者 * 都可以。<br><code>`</code></p></blockquote></blockquote><hr><hr><hr><hr><pre><code>###  五、图片```java![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><pre class=" language-java"><code class="language-java">语法<span class="token operator">:</span><span class="token punctuation">[</span>超链接名<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span>title可加可不加<span class="token punctuation">[</span>简书<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jianshu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token punctuation">[</span>百度<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"超链接地址"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>超链接名<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>例<span class="token operator">:</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://doudouchen.cn"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>豆豆陈<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><a href="https://doudouchen.cn" target="_blank" rel="noopener">个人博客</a></p><h3 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h3><pre class=" language-java"><code class="language-java">语法：单行代码：代码之间分别用一个反引号包起来    `代码内容`代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre class=" language-bash"><code class="language-bash">在使用代码快的时候 注意要 在 ``` 后边加上 对应的编程 语言 感谢 </code></pre><p><a href="https://github.com/blinkfox">blinkfox</a>  的指导</p><p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h2><pre class=" language-sh"><code class="language-sh">hexo s</code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><ul><li>hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li></ul><h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a><strong>hexo new</strong></h2><pre><code>hexo new &quot;学习笔记  六&quot;</code></pre><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><ul><li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li></ul><h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a><strong>hexo d</strong></h2><pre><code>hexo d</code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><ul><li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li></ul><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h2><pre><code>hexo clean</code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a><strong>hexo g</strong></h2><pre><code>hexo g</code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><ul><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令；</li><li>hexo g 是 hexo generate 的缩写，命令效果一致。</li></ul><h2 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a><strong>hexo new page</strong></h2><pre><code>hexo new page aboutme</code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p><ul><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样可以随意修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ul><hr><blockquote><p>学习于简书 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/2018/09/11/docker/"/>
      <url>/2018/09/11/docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/246339" target="_blank" rel="noopener">开源</a>的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a> 机器上，也可以实现虚拟化。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318" target="_blank" rel="noopener">沙箱</a>机制，相互之间不会有任何接口。</p><h2 id="hello-docker"><a href="#hello-docker" class="headerlink" title="hello docker !!!"></a>hello docker !!!</h2><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><pre class=" language-bash"><code class="language-bash">docker version</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="显示docker系统的信息"><a href="#显示docker系统的信息" class="headerlink" title="显示docker系统的信息"></a>显示docker系统的信息</h3><pre class=" language-bash"><code class="language-bash">docker info</code></pre><h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><pre class=" language-sh"><code class="language-sh">docker logs</code></pre><h3 id="故障检查"><a href="#故障检查" class="headerlink" title="故障检查"></a>故障检查</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker status</code></pre><h3 id="启动关闭docker"><a href="#启动关闭docker" class="headerlink" title="启动关闭docker"></a>启动关闭docker</h3><pre class=" language-sh"><code class="language-sh"> sudo service docker start|stop</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/10/hello-world/"/>
      <url>/2018/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo !!!"></a>hello hexo !!!</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">  hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">  hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash"> hexo generate 或者 hexo g</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash"> hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
