{"pages":[{"title":"categories","text":"","path":"categories/index.html","date":"10-13","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"10-13","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"10-13","excerpt":""},{"title":"搜索功能的必须步骤","text":"","path":"搜索功能的必须步骤/index.html","date":"09-10","excerpt":""}],"posts":[{"title":"docker 安装 oracle ","text":"1. 安装docker并启动docker服务 sudo yum install docker（安装 docker） sudo systemctl start docker 或者 service docker start 2. 下载oracle-xe-11g镜像sudo docker pull sath89/oracle-xe-11g 下载后执行 sudo docker ps –a 查看本地存在的所有镜像 3. 运行oracle镜像为容器,并将oracle容器的8080 和1521端口映射到本机的8080 和1521端口.sudo docker run -p 8080:8080 -p 1521:1521 --name oracle-xe-11g -d sath89/oracle-xe-11g 在阿里云服务器 上进行的部署 部署完 记得开放相应的端口号 4.启动oracle-xe-11g容器sudo docker start oracle-xe-11g 至此配置完毕 ,浏览器访问localhost:8080/apex 5.登录oracle容器,然后执行sqlplus命令账号,密码 sudo docker exec -it oracle-xe-11g /bin/bash 5.plsql 远程连接 库docker 查看 show parameter service_names 新建的admin目录下创建一个tnsnames.ora的文件，写入文件配置： MyDB= (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST= xxx.xx.xxx.xxx)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = xe) ) ) 创建表空间 创建用户 授权操作create tablespace tjsgbb DATAFILE 'tjsgbb.ora' size 500M AUTOEXTEND ON; create user tom identified by cat default tablespace tjsgbb; grant connect to tom; grant resource to tom; grant dba to tom; create yzh identified by nice default tablespace tjsgbb; grant connect to yzh; grant resource to yzh; grant dba to yzh; 可能会用到的命令 docker stop [容器id] docker rm [容器id]","path":"2018/10/31/docker-an-zhuang-oracle/","date":"10-31","excerpt":""},{"title":"崔永元还是输了...","text":"崔永元还是输了大囯魂01这是一个娱乐至死的时代。昨天上午10点，可以支撑逾亿人次同时访问的微博，竟然一时间系统瘫痪。背后的原因，只是因为娱乐圈当红小花赵丽颖发了一条微博。她结婚了，对象是同为娱乐明星的冯绍峰。短短的40多分钟，赵丽颖结婚的微博，转发量就超过了20万次，评论36万条，点赞接近130万。 明星结婚，八方来贺。回想起来，整个10月，充斥我们眼球的范冰冰、张雨绮、李湘……无一例外，都是唱歌演戏的明星。信息爆炸的今天，其实每个人的时间都很有限，每一双眼睛的焦点都很宝贵。给了范冰冰，给了赵丽颖，就给不了那些站在时代的背光面，迎着千军万马，也要逆流而上的真正英雄们。哪有什么岁月静好，不过有人在替你负重前行。正是他们，为我们撑起了一片现世安稳的蓝天，让我们可以怡然自得地嗑着瓜子刷微博，聊着八卦追明星。是的，这也是一个全民健忘的时代。同样是在微博上，爆出范冰冰丑闻，引发娱乐圈地震的孤胆英雄崔永元，发表了一篇文章：《一声长叹一声雷》。整整10天过去了，转发量至今也没突破2万。英雄枯骨无人问，明星家事天下知。这不是时代的悲哀，因为这个时代和过去五千年的每个时代都一样，不知悲欢，不问冷暖。赋予一个时代温度的，是身处其中的人。是你、是我、是他，是你们、是我们、是他们。没错，这就是你我的悲哀，是身处这个时代的每一个人的悲哀。02如果问：21世纪的第一个十年，全中国最火的电视节目是什么？毫无疑问，答案只能是崔永元的《实话实说》。央视纪录片之父陈虻说：中国所有的主持人，没有一个能超过崔永元。崔永元曾经有多火？如果你不清楚，问问你们的父母就知道了。他是当年全中国所有男人的人生偶像，所有女人的梦中情人。但是忽然有一天，身边的人都说他疯了。因为他放着好好的主持人不做，自费100万跑到美国去拍纪录片，跑到微博上怼方舟子，只为了解开转基因背后的真相。一夜之间，他成了“病人崔永元。”人们都说小崔得了抑郁症，精神已经不正常了。可吊诡的是，暗地里一波又一波的神秘说客，却找上了门。他们劝小崔放弃对转基因的调查，封口费高达2亿！背后的真相，不言而喻。2亿是多少？范冰冰偷税漏税那么多年，也才罚了9个亿。崔永元只要动一下嘴皮子，2亿就到手了。可是他没有。他说：“做男人要有骨气，饿死也不答应他们！”骨气，一个多么熟悉的词，一个多么陌生的词。熟悉，是因为我们自小就听过：“富贵不能淫，贫贱不能移，威武不能屈，此之谓大丈夫。”陌生，是因为上一次见到这种骨气，还要回溯到120年前。北京宣武门外的菜市口刑场上，33岁的谭嗣同对着屠刀高喊：我自横刀向天笑，去留肝胆两昆仑。在中国人血液里冷却了120年的骨气，终于在崔永元身上又沸腾了。03故事还没有结束，因为在这个朗朗乾坤下，仍然有数不清的污秽浊流。这一次，崔永元决意以一己之力，单挑整个娱乐圈。一纸阴阳合同，多少影视公司的股价应声跌停，多少光鲜亮丽的明星，露出了丑陋罪恶的真面目。可是还不够，在微博长文《一声叹息一声雷》中，更大的利益集团浮出水面。 崔永元不是病了，他是“疯了”。这个今年已经55岁的“老疯子”，妄想以一人之力，对抗国际巨星，对抗上市公司，对抗世家大族，对抗某局某所……蚍蜉撼树，凭的是一腔孤勇！螳臂挡车，端的是一副肉躯！危险吗？当然危险。崔永元不知道吗？当然知道。 一个连死都不怕的人，真的就无懈可击了吗？不，是人就有软肋。崔永元的软肋，就是他的女儿。她的信息被不法分子公开，她的人身安全岌岌可危。我们无法想象崔永元的内心，经过了何种的天人交战。我们能看见的，只是他在《一声叹息一声雷》里写道：“昨晚，梦见了远在天堂的父亲，他说，记住三个字：不能退。”想起柴静写过的一个关于崔永元的片段：某年央视评论部的年会，他亲自张罗，请了赵本山、郭德纲、罗大佑……年会进行到一半，陆陆续续台下的人有些走了，或是打着手机出去了。最后一个节目，他请来罗大佑。罗大佑一直坐在场下，喝了两瓶酒，一直到11点多上场。大佑也不登台，踩支凳子抱住吉它。一束光，对着话筒说“小崔，不怕，我也抑郁过，不是我们有病，是这个时代有病。”是的，这个时代病了。病在一边是歌舞升平，戏子们浓妆艳抹、粉饰太平，你方唱罢我登场；一边是暗流涌动，孤胆英雄扛着全世界的重量逆流而上，在悬崖边缘举步维艰。而大众的目光，竟然全被明星所吸引，舍不得在英雄的身上多停留片刻。只是，又有多少人还记得那句古训：“大厦将颠，非一木所支也。”04很多人都在问，崔永元最近怎么样了？前两天，崔永元任教的中国传媒大学，传出了一家面馆开业的消息。面馆就开在传媒大学的食堂里，名字叫做“崔永元真面”。面馆不大，菜色也普通，就是市面上常见的重庆小面、牛肉面……可是份量却很足，均价只在10元左右。这个价格在北京这样的一线城市，可以说绝无仅有。因为面馆不为盈利，开设的初衷，就是资助在校的贫困学生。消息传出以后，很多人慕名前往。有人说：吃着吃着，眼泪就禁不住掉进碗里。因为小崔在此时，连个人安危都不保的情况下，还张罗着在学校开个良心面馆，资助贫困学生……总有一种力量，让我们泪流满面。今天，提起崔永元，总是让人想起作家今何在的成名小说《悟空传》。“大圣，此去欲何?”“踏南天，碎凌霄。”“若一去不回？”“便一去不回！”时代需要英雄，英雄需要承担。我们做不到，没关系。但是有人替我们做到了，我们的目光，能不能从灯红酒绿的娱乐圈挪开一会儿，在他们的身上多停留一会儿？为众人抱薪者, 不可使其冻毙于风雪；为自由开路者, 不可使其困顿于荆棘！崔永元的父亲，是一名参加过解放战争和抗美援朝的老兵。他曾在一篇回忆父亲的文章里写道：“小时候很羡慕父亲只要上台讲话，底下就不断有掌声。那时，他的理想就是长大要做一个像父亲这样的人，到台上讲话台下就热烈鼓掌。”成为父亲那样的人，崔永元做到了。给予崔永元掌声，我们做到了吗？ 作者：诗之源链接：https://www.jianshu.com/p/2f836c1ccc16來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","path":"2018/10/31/cui-yong-yuan-huan-shi-shu-liao/","date":"10-31","excerpt":""},{"title":"如何看待 S8 RNG 2:3 G2","text":"从高中开始玩英雄联盟，从高二开始做rng 的粉丝 只想说今天 rng 输给 g2 输的我莫名其妙 我不知道 教练组 在干什么 选的什么英雄 打的也太放飞自我了吧 试问进入8强的队伍 有哪一个是弱队怎么能这就是我们lpl引以为傲的冠军之师吗？被我们口口声声说的欧美捞比赛前口嗨，bp阶段疯狂pickVN嘲讽，赛中被吊起来锤一顿。提几个问题。BP到底在干什么？G2的adc是世界第一adc吗，除了100%胜率的大头还值得给2个ban位？是你uzi打不过，还是对面用韦鲁斯和烬打得你出不了塔，连塔刀都不敢补，对线天然压40刀？以及塔姆这个点。可能头铁是值得骄傲的优点吧。但为什么亚运会KR下路设计的一级团陷阱你们能一直记着，换个塔姆被搞了这么多次还不长记性，非要放出来？是忘了faker教你的5把加里奥，还是觉得欧美队不当人只会口嗨？觉得对手不当人之前，看看你自己是不是人吧 我是真的心疼mlxg。永远都在临危救主，永远接锅就上，可惜今天却捞不动这迷一样的队友和教练组。你尽管膨胀，不吸取教训，明年rng还是这个b样，觉得自己能续杯，结果反向拿个八强游泳回来。 我只想说 没有输给别人 纯粹输给了自己 引用知乎作者：我说海盗才有营养","path":"2018/10/20/ru-he-kan-dai-s8-rng-2-3-g2/","date":"10-20","excerpt":""},{"title":"shell 脚本学习","text":"shell命令 是一种运行在linux系统上的语言 便于直接操作文件脚本的格式 vim shell.sh #!/bin/bash //声明脚本解释器，这个‘#’号不是注释，其余是注释 #Program: //程序内容说明 #History: //时间和作者 shell变量的种类 用户自定义变量：由用户自己定义、修改和使用 与定义变量：Bash与定义的特殊变量，不能直接修改 位置变量：通过命令行给程序传递执行的参数 1、定义变量： 变量名要以英文字母或下划线开头，区分大小写。 格式：变量名=值 输出变量：echo $变量名 2、键盘输入为变量内容： 格式：read [-p “信息”] 变量名 如：read -p “pewase input your name:” name 3、不同引号对变量的作用 双引号””：可解析变量，$符号为变量前缀。 单引号’’：不解析变量，$为普通字符。 反引号：将命令执行的结果输出给变量。 shell 条件测试1、test命令： 用途：测试特定的表达式是否成立，当条件成立时，命令执行后的返回值为0，否则为其他数字。 格式：test 条件表达式 [ 条件表达式 ] (注意：[]与表达式之间存在空格) 2、常见的测试类型： 测试文件状态 格式：[ 操作符 文件或目录 ] 如：if [ -d /etc ] then echo “exists” else echo “not exists” fi 常见的测试操作符： -d:测试是否为目录 -e:测试目录或文件是否存在 -f:测试是否为文件 -r:测试当前用户是否有读权限 -w:测试当前用户是否有写权限 -x:测试当前用户是否有执行权限 -L:测试是否为符号链接文件 字符串比较 格式：[ 字符串1 = 字符串2 ] [ 字符串1 != 字符串2 ] [ -z 字符串 ] 如：read -p ‘name:’ name read -p ‘pass:’ pass if [ $name = ‘admin’ ] &amp;&amp; [ $pass = ‘123’] then echo ‘登录成功’ else echo ‘登录失败’ if 常用的测试操作符： =:字符串内容相同。 !=:字符串内容不同。 -z:字符串内容为空。 整数值比较 格式：[ 整数1 操作符 整数2 ] 如：age=30 if [ $age -ge 18 ] then echo “已成年” else echo “未成年” fi 常用的测试操作符： -eq:等于 -ne:不等于 -gt:大于 -lt:小于 -le:大于或等于 -ge:小于或等于 逻辑测试 格式：[ 表达式1 ] 操作符 [ 表达式2 ] 常用操作符： -a或&amp;&amp;:逻辑与 -o或||:逻辑或 !:逻辑非 流程判断 1、条件判断 a、if语句 格式： 单分支： if 条件表达式 then 命令序列 fi `bash 如：age=30 if [ $age -ge 18 ] then echo “已成年” else echo “未成年” fi 多分枝： if 条件表达式 then 命令序列 elif 命令序列 fi 如： ```bash score=87 if [ $score -lt 60 ];then echo &#39;60以下&#39; elif [ $score -gt 60 ] &amp;&amp; [ $score -lt 70 ];then echo &#39;60~70之间&#39; elif [ $score -ge 70 ] &amp;&amp; [ $score -lt 80 ];then echo &#39;70～ 80之间&#39; else echo &#39;优秀&#39; fi b、case 格式：case $变量名称 in &quot;第一个变量内容&quot;) ;; &quot;第二个变量内容&quot;) ;; *) //最后一个变量内容都会用*来代表其它值，不包含前面的变量内容 ;; esac 如： case $1 in start) echo 'start MYSQL service.' ;; stop) echo 'stop MYSQL service.' ;; *) echo \"Usage: $0 start|stop\" ;; esac 2、循环控制 跳出本次循环：continue 结束循环：break a、while循环 格式：while [ 条件表达式 ] do 程序段落 done 如：num=3 while [ $num -gt 0 ] do echo $num num=$(($num-1)) done b、for循环 格式：for var in con1 con2 con3 do 程序段 done 如： for i in user0 user1 user2 user3 echo $i done 格式：for ((i=0;i&lt;10 1++)) do 程序段 done 如：for ((i=0;i&lt;10;i++)) do echo $i useradd user$i echo 123 | password --stdin_user$i done 3、函数使用 定义一个函数：在程序的最前面 function 函数名(){}或者function 函数名{} 如：function printit(){ echo \"your choice is $1\" } 调用：直接使用函数名 如：printit 1 传递参数：函数名 参数1 参数1 如：printit 2 五、Shell文本操作 1、Find查找命令的使用 find . -name \"*.text\" //在当前目录下查找已txt为后缀的文件 fing .-name \"[a-z]*\" //在当前目录下查找开头字母的文件 find /etc -name \"host*\" //查找/etc目录下以host开头的文件 find . -perm 755 //在当前目录下查找属性为755的文件 find -user root //在当前目录下查找属主为root的文件 find /var -mtime -5 //在/var下查找更改时间在5天内的文件 find /var -mtime +3 //在/var下查找更改时间在3天以前的文件 find /etc -type d //查找文件类型为d的目录文件 find /etc -typt l //查找文件类型为l的链接文件 find . -size +1000000c //查找文件大小在1M的文件 2、正则表达式 ^linux //以linux开头的 $php //以php结尾的 . //匹配任意单字符 .+ //匹配任意多个字符 .* //匹配0个或多个字符 [0-9a-z] //匹配[]内任意一个字符 (linux)+ //出现多次linux单词 (web){2} //web出现了2次以上 \\ //转译 3、grep详解 grep \"li qq\"* //在所有文件中查找li qq文件 grep -c \"file\" a //在文件中查找有多少行匹配到file grep -n \"file\" a //在文件中查找有多少行匹配file，同时显示行和行号 grep -i \"file\" a //在文件中查找file，并不区分大小写 grep -v \"file\" a //在文件中过滤掉file所在的行 grep -E \"2017:22:5[0-9]\" a //在文件中查找在时间在2017:22:50到59的所在行 grep -E \"^[^210]\" a //在文件中查找不号寒210的行 grep -E \"h*p\" a //查找包含h和p的行 grep -E \"[5-8][6-9][0-3]\" a //查找大于560小于893的行 grep -E \"^d\" a //在文件中查找以d开头的行 grep -E \"^[^d]\" a //在文件中查找不是以d开头的行 #### 4、awk命令： 简介：awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。 通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。 格式：awk ‘{pattern + action}’ {filenames} pattern:查找内容 action:匹配规则 awk ‘{pring $0}’ access.log //查找文件中的每一列 awk ‘{print $1”\\t”$7}’ access.log //查找文件中第一列和第七列 cat file | awk ‘$0 !~ /192.168.31.25/‘|grep “php” //匹配Ip 地址的统计，!~为不匹配 例：for i in `cat /etc/passwd | head | awk -F:'{print $1}'` do echo $i done -F---以什么符号分割 head---去前多少行，默认是10行 5、sed行定位使用 简介：sed是非交互式的编辑器。它不会修改文件，除非使用shell重定向来保存结果。默认情况下，所有的输出行都被打印到屏幕上。 选项 功能 -e 进行多项编辑，即对输入行应用多条sed命令时使用 -n 取消默认的输出 -f 指定sed脚本的文件名`bash sed -n ‘2’p file //只打印第二行，不打印其他行 sed -n ‘1,4’p file //从第一行到第四行的记录 sed -n ‘/los/‘p file //打印匹配los的行 sed -n ‘4,/los/‘p file //打印从第四行到匹配los的之间所有行 sed ‘1,2’d file //吧第一行和第二行全部删除 6、Uniq行定位使用 简介：uniq命令用于报告或忽略文件中的重复行，一般与sort命令结合使用。 语法 uniq(选项)(参数) 选项 ： -c或——count：在每列旁边显示该行重复出现的次数； -d或–repeated：仅显示重复出现的行列； -f&lt;栏位&gt;或–skip-fields=&lt;栏位&gt;：忽略比较指定的栏位； -s&lt;字符位置&gt;或–skip-chars=&lt;字符位置&gt;：忽略比较指定的字符； -u或——unique：仅显示出一次的行列； -w&lt;字符位置&gt;或–check-chars=&lt;字符位置&gt;：指定要比较的字符。 uniq -c file //打印紧挨的重复行出现的次数 uniq -d file //只打印重复的行 awk ‘{print $1}’ /var/log/httpd/access_log | sort|uniq -c //把apache网站的所有访问ip全部统计出来，并打印出统计次数。 7、spli行定位 简介：可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志。 语法：split（选项）（file）PREFIX 选项： -b：值为每一输出档案的大小，单位为 byte。 -C：每一输出档中，单行的最大 byte 数。 -d：使用数字作为后缀。 -l：值为每一输出档的列数大小。 PREFIX:代表前导符，可作为切割文件的前导文件。 `","path":"2018/10/15/shell-jiao-ben-xue-xi/","date":"10-15","excerpt":""},{"title":"git 命令 学习","text":"刚开始 初始化 一个 目录的时候 （注意编写文件的时候 选择 其他编辑工具 ue 或者 notepaid 格式选择utf-8） 然后 cd d:/github git init 创建一个叫做 readme.txt 的文件 git add 把文件添加到本地git库 （先进行 add） git commit -m \"wrote a readme file\" (然后进行commit) 可以同时add 多个 然后一次性 commit 然后 修改 一个 readme.txt 文件 git status git diff git add git status https://blog.csdn.net/r8l8q8/article/details/80015330","path":"2018/09/19/git-ming-ling-xue-xi/","date":"09-19","excerpt":""},{"title":"如何发布hexo 的 博客","text":"前言在跟几个同学一起 搭建尝试 用hexo 搭建完博客 之后 又互相商业互呲了 一波 突然 发现自己不知道怎么从头发布一篇博客了有没有 赶紧打开我的 度娘 谷歌 找到了 一篇 知识点 废话 不多说 开始我的表演 ！！！创建 一个 博客 hexo n \"my article\" #完整命令为hexo new,用于新建一篇名为“my article”的文章 Markdown 语法 常用命令一、标题 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 一、字体 **这是加粗的文字** *这是倾斜的文字*` ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 三、引用 &gt;这是引用的内容 &gt;&gt;这是引用的内容 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 这是引用的内容 不信你看 hello beijing hello shanghai 四、分割线 三个或者三个以上的 - 或者 * 都可以。` ### 五、图片 ```java ![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;) 图片alt就是显示在图片下面的文字，相当于对图片内容的解释。 图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 六、超链接 语法: [超链接名](超链接地址 \"超链接title\") title可加可不加 [简书](http://jianshu.com) [百度](http://baidu.com) &lt;a href=\"超链接地址\" target=\"_blank\">超链接名&lt;/a> 例:&lt;a href=\"https://doudouchen.cn\" target=\"_blank\">豆豆陈&lt;/a> 个人博客 七、代码语法： 单行代码：代码之间分别用一个反引号包起来 `代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 public static void main (String[] args){ system.out.println(\"hhh\"); } 注意事项在使用代码快的时候 注意要 在 ``` 后边加上 对应的编程 语言 感谢 blinkfox 的指导 学习于简书 https://www.jianshu.com/p/191d1e21f7ed","path":"2018/09/19/ru-he-fa-bu-hexo-de-bo-ke/","date":"09-19","excerpt":""},{"title":"Docker","text":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 hello docker !!!查看docker版本docker version More info: Writing 显示docker系统的信息docker info 日志信息docker logs 故障检查service docker status 启动关闭docker sudo service docker start|stop","path":"2018/09/11/docker/","date":"09-11","excerpt":""},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. hello hexo !!!Create a new post hexo new \"My New Post\" More info: Writing Run server hexo server More info: Server Generate static files hexo generate 或者 hexo g More info: Generating Deploy to remote sites hexo deploy More info: Deployment","path":"2018/09/10/hello-world/","date":"09-10","excerpt":""}]}